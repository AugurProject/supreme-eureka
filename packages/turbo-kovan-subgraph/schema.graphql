type AMMFactory @entity {
  id: ID!

  blockHash: String!

  blockNumber: Int!

  logIndex: Int!

  "A composite key of blockNumber+logIndex used for easily paging through logs"
  logPosition: String!

  name: String!

  transactionHash: String!

  origin: String!

  pool: String!

  marketFactory: String!

  marketId: Int!

  creator: String!

  lpTokenRecipient: String!
}

type Market @entity {
  id: ID!

  liquidity: [Liquidity!]! @derivedFrom(field: "marketId")

  shares: [Shares!]! @derivedFrom(field: "marketId")
}

type Liquidity @entity {
  id: ID!

  marketId: Market!

  marketFactory: String!

  user: String!

  recipient: String!

  "From the perspective of the user. E.g. collateral is negative when adding liquidity."
  collateral: Int!

  lpTokens: Int!
}

type Shares @entity {
  id: ID!

  marketId: Market!

  marketFactory: String!

  user: String!

  outcome: Int!

  "From the perspective of the user. E.g. collateral is negative when buying."
  collateral: Int!

  shares: Int!
}

type User @entity {
  id: ID!

  winningsClaimed: [WinningsClaimed!]! @derivedFrom(field: "user")
}

type WinningsClaimed @entity {
  id: ID!

  user: User!

  marketId: String!

  winningShares: Int!
}