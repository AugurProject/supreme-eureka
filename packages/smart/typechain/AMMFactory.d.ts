/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface AMMFactoryInterface extends ethers.utils.Interface {
  functions: {
    "bFactory()": FunctionFragment;
    "buy(address,uint256,uint256,uint256,uint256)": FunctionFragment;
    "createPool(address,uint256,uint256,uint256[],address)": FunctionFragment;
    "pools(address,uint256)": FunctionFragment;
    "sell(address,uint256,uint256,uint256[],uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "bFactory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "buy",
    values: [string, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createPool",
    values: [string, BigNumberish, BigNumberish, BigNumberish[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "pools",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sell",
    values: [string, BigNumberish, BigNumberish, BigNumberish[], BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "bFactory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pools", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sell", data: BytesLike): Result;

  events: {
    "PoolCreated(address,address,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PoolCreated"): EventFragment;
}

export class AMMFactory extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: AMMFactoryInterface;

  functions: {
    bFactory(overrides?: CallOverrides): Promise<[string]>;

    "bFactory()"(overrides?: CallOverrides): Promise<[string]>;

    buy(
      _hatchery: string,
      _turboId: BigNumberish,
      _outcome: BigNumberish,
      _collateralIn: BigNumberish,
      _minTokensOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "buy(address,uint256,uint256,uint256,uint256)"(
      _hatchery: string,
      _turboId: BigNumberish,
      _outcome: BigNumberish,
      _collateralIn: BigNumberish,
      _minTokensOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createPool(
      _hatchery: string,
      _turboId: BigNumberish,
      _initialLiquidity: BigNumberish,
      _weights: BigNumberish[],
      _lpTokenRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "createPool(address,uint256,uint256,uint256[],address)"(
      _hatchery: string,
      _turboId: BigNumberish,
      _initialLiquidity: BigNumberish,
      _weights: BigNumberish[],
      _lpTokenRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pools(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "pools(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    sell(
      _hatchery: string,
      _turboId: BigNumberish,
      _outcome: BigNumberish,
      _swaps: BigNumberish[],
      _minCollateralOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "sell(address,uint256,uint256,uint256[],uint256)"(
      _hatchery: string,
      _turboId: BigNumberish,
      _outcome: BigNumberish,
      _swaps: BigNumberish[],
      _minCollateralOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  bFactory(overrides?: CallOverrides): Promise<string>;

  "bFactory()"(overrides?: CallOverrides): Promise<string>;

  buy(
    _hatchery: string,
    _turboId: BigNumberish,
    _outcome: BigNumberish,
    _collateralIn: BigNumberish,
    _minTokensOut: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "buy(address,uint256,uint256,uint256,uint256)"(
    _hatchery: string,
    _turboId: BigNumberish,
    _outcome: BigNumberish,
    _collateralIn: BigNumberish,
    _minTokensOut: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createPool(
    _hatchery: string,
    _turboId: BigNumberish,
    _initialLiquidity: BigNumberish,
    _weights: BigNumberish[],
    _lpTokenRecipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "createPool(address,uint256,uint256,uint256[],address)"(
    _hatchery: string,
    _turboId: BigNumberish,
    _initialLiquidity: BigNumberish,
    _weights: BigNumberish[],
    _lpTokenRecipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pools(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "pools(address,uint256)"(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  sell(
    _hatchery: string,
    _turboId: BigNumberish,
    _outcome: BigNumberish,
    _swaps: BigNumberish[],
    _minCollateralOut: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "sell(address,uint256,uint256,uint256[],uint256)"(
    _hatchery: string,
    _turboId: BigNumberish,
    _outcome: BigNumberish,
    _swaps: BigNumberish[],
    _minCollateralOut: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    bFactory(overrides?: CallOverrides): Promise<string>;

    "bFactory()"(overrides?: CallOverrides): Promise<string>;

    buy(
      _hatchery: string,
      _turboId: BigNumberish,
      _outcome: BigNumberish,
      _collateralIn: BigNumberish,
      _minTokensOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "buy(address,uint256,uint256,uint256,uint256)"(
      _hatchery: string,
      _turboId: BigNumberish,
      _outcome: BigNumberish,
      _collateralIn: BigNumberish,
      _minTokensOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createPool(
      _hatchery: string,
      _turboId: BigNumberish,
      _initialLiquidity: BigNumberish,
      _weights: BigNumberish[],
      _lpTokenRecipient: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "createPool(address,uint256,uint256,uint256[],address)"(
      _hatchery: string,
      _turboId: BigNumberish,
      _initialLiquidity: BigNumberish,
      _weights: BigNumberish[],
      _lpTokenRecipient: string,
      overrides?: CallOverrides
    ): Promise<string>;

    pools(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "pools(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    sell(
      _hatchery: string,
      _turboId: BigNumberish,
      _outcome: BigNumberish,
      _swaps: BigNumberish[],
      _minCollateralOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "sell(address,uint256,uint256,uint256[],uint256)"(
      _hatchery: string,
      _turboId: BigNumberish,
      _outcome: BigNumberish,
      _swaps: BigNumberish[],
      _minCollateralOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    PoolCreated(
      _pool: null,
      _hatchery: string | null,
      _turboId: BigNumberish | null,
      _creator: string | null
    ): TypedEventFilter<
      [string, string, BigNumber, string],
      {
        _pool: string;
        _hatchery: string;
        _turboId: BigNumber;
        _creator: string;
      }
    >;
  };

  estimateGas: {
    bFactory(overrides?: CallOverrides): Promise<BigNumber>;

    "bFactory()"(overrides?: CallOverrides): Promise<BigNumber>;

    buy(
      _hatchery: string,
      _turboId: BigNumberish,
      _outcome: BigNumberish,
      _collateralIn: BigNumberish,
      _minTokensOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "buy(address,uint256,uint256,uint256,uint256)"(
      _hatchery: string,
      _turboId: BigNumberish,
      _outcome: BigNumberish,
      _collateralIn: BigNumberish,
      _minTokensOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createPool(
      _hatchery: string,
      _turboId: BigNumberish,
      _initialLiquidity: BigNumberish,
      _weights: BigNumberish[],
      _lpTokenRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "createPool(address,uint256,uint256,uint256[],address)"(
      _hatchery: string,
      _turboId: BigNumberish,
      _initialLiquidity: BigNumberish,
      _weights: BigNumberish[],
      _lpTokenRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pools(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pools(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sell(
      _hatchery: string,
      _turboId: BigNumberish,
      _outcome: BigNumberish,
      _swaps: BigNumberish[],
      _minCollateralOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "sell(address,uint256,uint256,uint256[],uint256)"(
      _hatchery: string,
      _turboId: BigNumberish,
      _outcome: BigNumberish,
      _swaps: BigNumberish[],
      _minCollateralOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "bFactory()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buy(
      _hatchery: string,
      _turboId: BigNumberish,
      _outcome: BigNumberish,
      _collateralIn: BigNumberish,
      _minTokensOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "buy(address,uint256,uint256,uint256,uint256)"(
      _hatchery: string,
      _turboId: BigNumberish,
      _outcome: BigNumberish,
      _collateralIn: BigNumberish,
      _minTokensOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createPool(
      _hatchery: string,
      _turboId: BigNumberish,
      _initialLiquidity: BigNumberish,
      _weights: BigNumberish[],
      _lpTokenRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "createPool(address,uint256,uint256,uint256[],address)"(
      _hatchery: string,
      _turboId: BigNumberish,
      _initialLiquidity: BigNumberish,
      _weights: BigNumberish[],
      _lpTokenRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pools(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "pools(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sell(
      _hatchery: string,
      _turboId: BigNumberish,
      _outcome: BigNumberish,
      _swaps: BigNumberish[],
      _minCollateralOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "sell(address,uint256,uint256,uint256[],uint256)"(
      _hatchery: string,
      _turboId: BigNumberish,
      _outcome: BigNumberish,
      _swaps: BigNumberish[],
      _minCollateralOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
