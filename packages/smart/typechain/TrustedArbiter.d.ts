/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface TrustedArbiterInterface extends ethers.utils.Interface {
  functions: {
    "decodeConfiguration(bytes)": FunctionFragment;
    "encodeConfiguration(uint256,uint256,string,int256[],uint8)": FunctionFragment;
    "getOwner()": FunctionFragment;
    "getPayoutHash(uint256[])": FunctionFragment;
    "getTurboResolution(uint256)": FunctionFragment;
    "hatchery()": FunctionFragment;
    "onTurboCreated(uint256,string[],bytes32[],uint256,bytes)": FunctionFragment;
    "setTurboResolution(uint256,uint256[])": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "turboData(uint256)": FunctionFragment;
    "validatePayout(uint256,uint256[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "decodeConfiguration",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "encodeConfiguration",
    values: [BigNumberish, BigNumberish, string, BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPayoutHash",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getTurboResolution",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "hatchery", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "onTurboCreated",
    values: [BigNumberish, string[], BytesLike[], BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setTurboResolution",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "turboData",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "validatePayout",
    values: [BigNumberish, BigNumberish[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "decodeConfiguration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "encodeConfiguration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPayoutHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTurboResolution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hatchery", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onTurboCreated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTurboResolution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "turboData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "validatePayout",
    data: BytesLike
  ): Result;

  events: {};
}

export class TrustedArbiter extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TrustedArbiterInterface;

  functions: {
    decodeConfiguration(
      _arbiterConfiguration: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, string, BigNumber[], number] & {
          startTime: BigNumber;
          duration: BigNumber;
          extraInfo: string;
          prices: BigNumber[];
          marketType: number;
        }
      ]
    >;

    "decodeConfiguration(bytes)"(
      _arbiterConfiguration: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, string, BigNumber[], number] & {
          startTime: BigNumber;
          duration: BigNumber;
          extraInfo: string;
          prices: BigNumber[];
          marketType: number;
        }
      ]
    >;

    encodeConfiguration(
      _startTime: BigNumberish,
      _duration: BigNumberish,
      _extraInfo: string,
      _prices: BigNumberish[],
      _marketType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "encodeConfiguration(uint256,uint256,string,int256[],uint8)"(
      _startTime: BigNumberish,
      _duration: BigNumberish,
      _extraInfo: string,
      _prices: BigNumberish[],
      _marketType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getOwner(overrides?: CallOverrides): Promise<[string]>;

    "getOwner()"(overrides?: CallOverrides): Promise<[string]>;

    getPayoutHash(
      _payout: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getPayoutHash(uint256[])"(
      _payout: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[string]>;

    getTurboResolution(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "getTurboResolution(uint256)"(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hatchery(overrides?: CallOverrides): Promise<[string]>;

    "hatchery()"(overrides?: CallOverrides): Promise<[string]>;

    onTurboCreated(
      _id: BigNumberish,
      _outcomeSymbols: string[],
      _outcomeNames: BytesLike[],
      _numTicks: BigNumberish,
      _arbiterConfiguration: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "onTurboCreated(uint256,string[],bytes32[],uint256,bytes)"(
      _id: BigNumberish,
      _outcomeSymbols: string[],
      _outcomeNames: BytesLike[],
      _numTicks: BigNumberish,
      _arbiterConfiguration: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTurboResolution(
      _id: BigNumberish,
      _payout: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setTurboResolution(uint256,uint256[])"(
      _id: BigNumberish,
      _payout: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    turboData(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, BigNumber, number, string, BigNumber] & {
        startTime: BigNumber;
        endTime: BigNumber;
        extraInfo: string;
        numTicks: BigNumber;
        marketType: number;
        winningPayoutHash: string;
        totalStake: BigNumber;
      }
    >;

    "turboData(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, BigNumber, number, string, BigNumber] & {
        startTime: BigNumber;
        endTime: BigNumber;
        extraInfo: string;
        numTicks: BigNumber;
        marketType: number;
        winningPayoutHash: string;
        totalStake: BigNumber;
      }
    >;

    validatePayout(
      _id: BigNumberish,
      _payout: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "validatePayout(uint256,uint256[])"(
      _id: BigNumberish,
      _payout: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  decodeConfiguration(
    _arbiterConfiguration: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string, BigNumber[], number] & {
      startTime: BigNumber;
      duration: BigNumber;
      extraInfo: string;
      prices: BigNumber[];
      marketType: number;
    }
  >;

  "decodeConfiguration(bytes)"(
    _arbiterConfiguration: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string, BigNumber[], number] & {
      startTime: BigNumber;
      duration: BigNumber;
      extraInfo: string;
      prices: BigNumber[];
      marketType: number;
    }
  >;

  encodeConfiguration(
    _startTime: BigNumberish,
    _duration: BigNumberish,
    _extraInfo: string,
    _prices: BigNumberish[],
    _marketType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "encodeConfiguration(uint256,uint256,string,int256[],uint8)"(
    _startTime: BigNumberish,
    _duration: BigNumberish,
    _extraInfo: string,
    _prices: BigNumberish[],
    _marketType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getOwner(overrides?: CallOverrides): Promise<string>;

  "getOwner()"(overrides?: CallOverrides): Promise<string>;

  getPayoutHash(
    _payout: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<string>;

  "getPayoutHash(uint256[])"(
    _payout: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<string>;

  getTurboResolution(
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "getTurboResolution(uint256)"(
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hatchery(overrides?: CallOverrides): Promise<string>;

  "hatchery()"(overrides?: CallOverrides): Promise<string>;

  onTurboCreated(
    _id: BigNumberish,
    _outcomeSymbols: string[],
    _outcomeNames: BytesLike[],
    _numTicks: BigNumberish,
    _arbiterConfiguration: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "onTurboCreated(uint256,string[],bytes32[],uint256,bytes)"(
    _id: BigNumberish,
    _outcomeSymbols: string[],
    _outcomeNames: BytesLike[],
    _numTicks: BigNumberish,
    _arbiterConfiguration: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTurboResolution(
    _id: BigNumberish,
    _payout: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setTurboResolution(uint256,uint256[])"(
    _id: BigNumberish,
    _payout: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    _newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    _newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  turboData(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string, BigNumber, number, string, BigNumber] & {
      startTime: BigNumber;
      endTime: BigNumber;
      extraInfo: string;
      numTicks: BigNumber;
      marketType: number;
      winningPayoutHash: string;
      totalStake: BigNumber;
    }
  >;

  "turboData(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string, BigNumber, number, string, BigNumber] & {
      startTime: BigNumber;
      endTime: BigNumber;
      extraInfo: string;
      numTicks: BigNumber;
      marketType: number;
      winningPayoutHash: string;
      totalStake: BigNumber;
    }
  >;

  validatePayout(
    _id: BigNumberish,
    _payout: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  "validatePayout(uint256,uint256[])"(
    _id: BigNumberish,
    _payout: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    decodeConfiguration(
      _arbiterConfiguration: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, BigNumber[], number] & {
        startTime: BigNumber;
        duration: BigNumber;
        extraInfo: string;
        prices: BigNumber[];
        marketType: number;
      }
    >;

    "decodeConfiguration(bytes)"(
      _arbiterConfiguration: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, BigNumber[], number] & {
        startTime: BigNumber;
        duration: BigNumber;
        extraInfo: string;
        prices: BigNumber[];
        marketType: number;
      }
    >;

    encodeConfiguration(
      _startTime: BigNumberish,
      _duration: BigNumberish,
      _extraInfo: string,
      _prices: BigNumberish[],
      _marketType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "encodeConfiguration(uint256,uint256,string,int256[],uint8)"(
      _startTime: BigNumberish,
      _duration: BigNumberish,
      _extraInfo: string,
      _prices: BigNumberish[],
      _marketType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getOwner(overrides?: CallOverrides): Promise<string>;

    "getOwner()"(overrides?: CallOverrides): Promise<string>;

    getPayoutHash(
      _payout: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<string>;

    "getPayoutHash(uint256[])"(
      _payout: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<string>;

    getTurboResolution(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "getTurboResolution(uint256)"(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    hatchery(overrides?: CallOverrides): Promise<string>;

    "hatchery()"(overrides?: CallOverrides): Promise<string>;

    onTurboCreated(
      _id: BigNumberish,
      _outcomeSymbols: string[],
      _outcomeNames: BytesLike[],
      _numTicks: BigNumberish,
      _arbiterConfiguration: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "onTurboCreated(uint256,string[],bytes32[],uint256,bytes)"(
      _id: BigNumberish,
      _outcomeSymbols: string[],
      _outcomeNames: BytesLike[],
      _numTicks: BigNumberish,
      _arbiterConfiguration: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setTurboResolution(
      _id: BigNumberish,
      _payout: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "setTurboResolution(uint256,uint256[])"(
      _id: BigNumberish,
      _payout: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transferOwnership(address)"(
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    turboData(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, BigNumber, number, string, BigNumber] & {
        startTime: BigNumber;
        endTime: BigNumber;
        extraInfo: string;
        numTicks: BigNumber;
        marketType: number;
        winningPayoutHash: string;
        totalStake: BigNumber;
      }
    >;

    "turboData(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, BigNumber, number, string, BigNumber] & {
        startTime: BigNumber;
        endTime: BigNumber;
        extraInfo: string;
        numTicks: BigNumber;
        marketType: number;
        winningPayoutHash: string;
        totalStake: BigNumber;
      }
    >;

    validatePayout(
      _id: BigNumberish,
      _payout: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    "validatePayout(uint256,uint256[])"(
      _id: BigNumberish,
      _payout: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    decodeConfiguration(
      _arbiterConfiguration: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "decodeConfiguration(bytes)"(
      _arbiterConfiguration: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    encodeConfiguration(
      _startTime: BigNumberish,
      _duration: BigNumberish,
      _extraInfo: string,
      _prices: BigNumberish[],
      _marketType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "encodeConfiguration(uint256,uint256,string,int256[],uint8)"(
      _startTime: BigNumberish,
      _duration: BigNumberish,
      _extraInfo: string,
      _prices: BigNumberish[],
      _marketType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOwner(overrides?: CallOverrides): Promise<BigNumber>;

    "getOwner()"(overrides?: CallOverrides): Promise<BigNumber>;

    getPayoutHash(
      _payout: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPayoutHash(uint256[])"(
      _payout: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTurboResolution(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "getTurboResolution(uint256)"(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hatchery(overrides?: CallOverrides): Promise<BigNumber>;

    "hatchery()"(overrides?: CallOverrides): Promise<BigNumber>;

    onTurboCreated(
      _id: BigNumberish,
      _outcomeSymbols: string[],
      _outcomeNames: BytesLike[],
      _numTicks: BigNumberish,
      _arbiterConfiguration: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "onTurboCreated(uint256,string[],bytes32[],uint256,bytes)"(
      _id: BigNumberish,
      _outcomeSymbols: string[],
      _outcomeNames: BytesLike[],
      _numTicks: BigNumberish,
      _arbiterConfiguration: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTurboResolution(
      _id: BigNumberish,
      _payout: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setTurboResolution(uint256,uint256[])"(
      _id: BigNumberish,
      _payout: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    turboData(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "turboData(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validatePayout(
      _id: BigNumberish,
      _payout: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "validatePayout(uint256,uint256[])"(
      _id: BigNumberish,
      _payout: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    decodeConfiguration(
      _arbiterConfiguration: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "decodeConfiguration(bytes)"(
      _arbiterConfiguration: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    encodeConfiguration(
      _startTime: BigNumberish,
      _duration: BigNumberish,
      _extraInfo: string,
      _prices: BigNumberish[],
      _marketType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "encodeConfiguration(uint256,uint256,string,int256[],uint8)"(
      _startTime: BigNumberish,
      _duration: BigNumberish,
      _extraInfo: string,
      _prices: BigNumberish[],
      _marketType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getOwner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPayoutHash(
      _payout: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPayoutHash(uint256[])"(
      _payout: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTurboResolution(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "getTurboResolution(uint256)"(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hatchery(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "hatchery()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onTurboCreated(
      _id: BigNumberish,
      _outcomeSymbols: string[],
      _outcomeNames: BytesLike[],
      _numTicks: BigNumberish,
      _arbiterConfiguration: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "onTurboCreated(uint256,string[],bytes32[],uint256,bytes)"(
      _id: BigNumberish,
      _outcomeSymbols: string[],
      _outcomeNames: BytesLike[],
      _numTicks: BigNumberish,
      _arbiterConfiguration: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTurboResolution(
      _id: BigNumberish,
      _payout: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setTurboResolution(uint256,uint256[])"(
      _id: BigNumberish,
      _payout: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    turboData(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "turboData(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validatePayout(
      _id: BigNumberish,
      _payout: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "validatePayout(uint256,uint256[])"(
      _id: BigNumberish,
      _payout: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
