/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface TurboHatcheryInterface extends ethers.utils.Interface {
  functions: {
    "burnCompleteSets(uint256,uint256,address)": FunctionFragment;
    "claimWinnings(uint256)": FunctionFragment;
    "collateral()": FunctionFragment;
    "createTurbo(uint256,uint256,string[],bytes32[],uint256,address,bytes)": FunctionFragment;
    "feePot()": FunctionFragment;
    "getShareTokens(uint256)": FunctionFragment;
    "mintCompleteSets(uint256,uint256,address)": FunctionFragment;
    "tokenFactory()": FunctionFragment;
    "turbos(uint256)": FunctionFragment;
    "withdrawCreatorFees(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "burnCompleteSets",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "claimWinnings",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collateral",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createTurbo",
    values: [
      BigNumberish,
      BigNumberish,
      string[],
      BytesLike[],
      BigNumberish,
      string,
      BytesLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "feePot", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getShareTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintCompleteSets",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "turbos",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawCreatorFees",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "burnCompleteSets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimWinnings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "collateral", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createTurbo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feePot", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getShareTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintCompleteSets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "turbos", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawCreatorFees",
    data: BytesLike
  ): Result;

  events: {
    "Claim(uint256)": EventFragment;
    "CompleteSetsBurned(uint256,uint256,address)": EventFragment;
    "CompleteSetsMinted(uint256,uint256,address)": EventFragment;
    "TurboCreated(uint256,uint256,string[],bytes32[],uint256,address,bytes,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Claim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CompleteSetsBurned"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CompleteSetsMinted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TurboCreated"): EventFragment;
}

export class TurboHatchery extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TurboHatcheryInterface;

  functions: {
    burnCompleteSets(
      _id: BigNumberish,
      _amount: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "burnCompleteSets(uint256,uint256,address)"(
      _id: BigNumberish,
      _amount: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimWinnings(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "claimWinnings(uint256)"(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    collateral(overrides?: CallOverrides): Promise<[string]>;

    "collateral()"(overrides?: CallOverrides): Promise<[string]>;

    createTurbo(
      _index: BigNumberish,
      _creatorFee: BigNumberish,
      _outcomeSymbols: string[],
      _outcomeNames: BytesLike[],
      _numTicks: BigNumberish,
      _arbiter: string,
      _arbiterConfiguration: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "createTurbo(uint256,uint256,string[],bytes32[],uint256,address,bytes)"(
      _index: BigNumberish,
      _creatorFee: BigNumberish,
      _outcomeSymbols: string[],
      _outcomeNames: BytesLike[],
      _numTicks: BigNumberish,
      _arbiter: string,
      _arbiterConfiguration: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    feePot(overrides?: CallOverrides): Promise<[string]>;

    "feePot()"(overrides?: CallOverrides): Promise<[string]>;

    getShareTokens(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    "getShareTokens(uint256)"(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    mintCompleteSets(
      _id: BigNumberish,
      _amount: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "mintCompleteSets(uint256,uint256,address)"(
      _id: BigNumberish,
      _amount: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokenFactory(overrides?: CallOverrides): Promise<[string]>;

    "tokenFactory()"(overrides?: CallOverrides): Promise<[string]>;

    turbos(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, string, BigNumber] & {
        creator: string;
        creatorFee: BigNumber;
        numTicks: BigNumber;
        arbiter: string;
        creatorFees: BigNumber;
      }
    >;

    "turbos(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, string, BigNumber] & {
        creator: string;
        creatorFee: BigNumber;
        numTicks: BigNumber;
        arbiter: string;
        creatorFees: BigNumber;
      }
    >;

    withdrawCreatorFees(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdrawCreatorFees(uint256)"(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  burnCompleteSets(
    _id: BigNumberish,
    _amount: BigNumberish,
    _receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "burnCompleteSets(uint256,uint256,address)"(
    _id: BigNumberish,
    _amount: BigNumberish,
    _receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimWinnings(
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "claimWinnings(uint256)"(
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  collateral(overrides?: CallOverrides): Promise<string>;

  "collateral()"(overrides?: CallOverrides): Promise<string>;

  createTurbo(
    _index: BigNumberish,
    _creatorFee: BigNumberish,
    _outcomeSymbols: string[],
    _outcomeNames: BytesLike[],
    _numTicks: BigNumberish,
    _arbiter: string,
    _arbiterConfiguration: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "createTurbo(uint256,uint256,string[],bytes32[],uint256,address,bytes)"(
    _index: BigNumberish,
    _creatorFee: BigNumberish,
    _outcomeSymbols: string[],
    _outcomeNames: BytesLike[],
    _numTicks: BigNumberish,
    _arbiter: string,
    _arbiterConfiguration: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  feePot(overrides?: CallOverrides): Promise<string>;

  "feePot()"(overrides?: CallOverrides): Promise<string>;

  getShareTokens(
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  "getShareTokens(uint256)"(
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  mintCompleteSets(
    _id: BigNumberish,
    _amount: BigNumberish,
    _receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "mintCompleteSets(uint256,uint256,address)"(
    _id: BigNumberish,
    _amount: BigNumberish,
    _receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokenFactory(overrides?: CallOverrides): Promise<string>;

  "tokenFactory()"(overrides?: CallOverrides): Promise<string>;

  turbos(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, string, BigNumber] & {
      creator: string;
      creatorFee: BigNumber;
      numTicks: BigNumber;
      arbiter: string;
      creatorFees: BigNumber;
    }
  >;

  "turbos(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, string, BigNumber] & {
      creator: string;
      creatorFee: BigNumber;
      numTicks: BigNumber;
      arbiter: string;
      creatorFees: BigNumber;
    }
  >;

  withdrawCreatorFees(
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdrawCreatorFees(uint256)"(
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    burnCompleteSets(
      _id: BigNumberish,
      _amount: BigNumberish,
      _receiver: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "burnCompleteSets(uint256,uint256,address)"(
      _id: BigNumberish,
      _amount: BigNumberish,
      _receiver: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    claimWinnings(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "claimWinnings(uint256)"(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    collateral(overrides?: CallOverrides): Promise<string>;

    "collateral()"(overrides?: CallOverrides): Promise<string>;

    createTurbo(
      _index: BigNumberish,
      _creatorFee: BigNumberish,
      _outcomeSymbols: string[],
      _outcomeNames: BytesLike[],
      _numTicks: BigNumberish,
      _arbiter: string,
      _arbiterConfiguration: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "createTurbo(uint256,uint256,string[],bytes32[],uint256,address,bytes)"(
      _index: BigNumberish,
      _creatorFee: BigNumberish,
      _outcomeSymbols: string[],
      _outcomeNames: BytesLike[],
      _numTicks: BigNumberish,
      _arbiter: string,
      _arbiterConfiguration: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    feePot(overrides?: CallOverrides): Promise<string>;

    "feePot()"(overrides?: CallOverrides): Promise<string>;

    getShareTokens(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "getShareTokens(uint256)"(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    mintCompleteSets(
      _id: BigNumberish,
      _amount: BigNumberish,
      _receiver: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "mintCompleteSets(uint256,uint256,address)"(
      _id: BigNumberish,
      _amount: BigNumberish,
      _receiver: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    tokenFactory(overrides?: CallOverrides): Promise<string>;

    "tokenFactory()"(overrides?: CallOverrides): Promise<string>;

    turbos(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, string, BigNumber] & {
        creator: string;
        creatorFee: BigNumber;
        numTicks: BigNumber;
        arbiter: string;
        creatorFees: BigNumber;
      }
    >;

    "turbos(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, string, BigNumber] & {
        creator: string;
        creatorFee: BigNumber;
        numTicks: BigNumber;
        arbiter: string;
        creatorFees: BigNumber;
      }
    >;

    withdrawCreatorFees(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "withdrawCreatorFees(uint256)"(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    Claim(turboId: null): TypedEventFilter<[BigNumber], { turboId: BigNumber }>;

    CompleteSetsBurned(
      turboId: null,
      amount: null,
      target: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string],
      { turboId: BigNumber; amount: BigNumber; target: string }
    >;

    CompleteSetsMinted(
      turboId: null,
      amount: null,
      target: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string],
      { turboId: BigNumber; amount: BigNumber; target: string }
    >;

    TurboCreated(
      id: null,
      creatorFee: null,
      outcomeSymbols: null,
      outcomeNames: null,
      numTicks: null,
      arbiter: null,
      arbiterConfiguration: null,
      index: BigNumberish | null
    ): TypedEventFilter<
      [
        BigNumber,
        BigNumber,
        string[],
        string[],
        BigNumber,
        string,
        string,
        BigNumber
      ],
      {
        id: BigNumber;
        creatorFee: BigNumber;
        outcomeSymbols: string[];
        outcomeNames: string[];
        numTicks: BigNumber;
        arbiter: string;
        arbiterConfiguration: string;
        index: BigNumber;
      }
    >;
  };

  estimateGas: {
    burnCompleteSets(
      _id: BigNumberish,
      _amount: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "burnCompleteSets(uint256,uint256,address)"(
      _id: BigNumberish,
      _amount: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimWinnings(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "claimWinnings(uint256)"(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    collateral(overrides?: CallOverrides): Promise<BigNumber>;

    "collateral()"(overrides?: CallOverrides): Promise<BigNumber>;

    createTurbo(
      _index: BigNumberish,
      _creatorFee: BigNumberish,
      _outcomeSymbols: string[],
      _outcomeNames: BytesLike[],
      _numTicks: BigNumberish,
      _arbiter: string,
      _arbiterConfiguration: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "createTurbo(uint256,uint256,string[],bytes32[],uint256,address,bytes)"(
      _index: BigNumberish,
      _creatorFee: BigNumberish,
      _outcomeSymbols: string[],
      _outcomeNames: BytesLike[],
      _numTicks: BigNumberish,
      _arbiter: string,
      _arbiterConfiguration: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    feePot(overrides?: CallOverrides): Promise<BigNumber>;

    "feePot()"(overrides?: CallOverrides): Promise<BigNumber>;

    getShareTokens(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getShareTokens(uint256)"(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintCompleteSets(
      _id: BigNumberish,
      _amount: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "mintCompleteSets(uint256,uint256,address)"(
      _id: BigNumberish,
      _amount: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokenFactory(overrides?: CallOverrides): Promise<BigNumber>;

    "tokenFactory()"(overrides?: CallOverrides): Promise<BigNumber>;

    turbos(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "turbos(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawCreatorFees(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdrawCreatorFees(uint256)"(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    burnCompleteSets(
      _id: BigNumberish,
      _amount: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "burnCompleteSets(uint256,uint256,address)"(
      _id: BigNumberish,
      _amount: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimWinnings(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "claimWinnings(uint256)"(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    collateral(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "collateral()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createTurbo(
      _index: BigNumberish,
      _creatorFee: BigNumberish,
      _outcomeSymbols: string[],
      _outcomeNames: BytesLike[],
      _numTicks: BigNumberish,
      _arbiter: string,
      _arbiterConfiguration: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "createTurbo(uint256,uint256,string[],bytes32[],uint256,address,bytes)"(
      _index: BigNumberish,
      _creatorFee: BigNumberish,
      _outcomeSymbols: string[],
      _outcomeNames: BytesLike[],
      _numTicks: BigNumberish,
      _arbiter: string,
      _arbiterConfiguration: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    feePot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "feePot()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getShareTokens(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getShareTokens(uint256)"(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintCompleteSets(
      _id: BigNumberish,
      _amount: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "mintCompleteSets(uint256,uint256,address)"(
      _id: BigNumberish,
      _amount: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokenFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "tokenFactory()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    turbos(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "turbos(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawCreatorFees(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawCreatorFees(uint256)"(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
