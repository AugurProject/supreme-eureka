/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface TurboShareTokenFactoryInterface extends ethers.utils.Interface {
  functions: {
    "INVALID_NAME()": FunctionFragment;
    "INVALID_SYMBOL()": FunctionFragment;
    "createShareTokens(bytes32[],string[])": FunctionFragment;
    "getInitialized()": FunctionFragment;
    "hatchery()": FunctionFragment;
    "initialize(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "INVALID_NAME",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "INVALID_SYMBOL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createShareTokens",
    values: [BytesLike[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "hatchery", values?: undefined): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "INVALID_NAME",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "INVALID_SYMBOL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createShareTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hatchery", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;

  events: {};
}

export class TurboShareTokenFactory extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TurboShareTokenFactoryInterface;

  functions: {
    INVALID_NAME(overrides?: CallOverrides): Promise<[string]>;

    "INVALID_NAME()"(overrides?: CallOverrides): Promise<[string]>;

    INVALID_SYMBOL(overrides?: CallOverrides): Promise<[string]>;

    "INVALID_SYMBOL()"(overrides?: CallOverrides): Promise<[string]>;

    createShareTokens(
      _names: BytesLike[],
      _symbols: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "createShareTokens(bytes32[],string[])"(
      _names: BytesLike[],
      _symbols: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    "getInitialized()"(overrides?: CallOverrides): Promise<[boolean]>;

    hatchery(overrides?: CallOverrides): Promise<[string]>;

    "hatchery()"(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _hatchery: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "initialize(address)"(
      _hatchery: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  INVALID_NAME(overrides?: CallOverrides): Promise<string>;

  "INVALID_NAME()"(overrides?: CallOverrides): Promise<string>;

  INVALID_SYMBOL(overrides?: CallOverrides): Promise<string>;

  "INVALID_SYMBOL()"(overrides?: CallOverrides): Promise<string>;

  createShareTokens(
    _names: BytesLike[],
    _symbols: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "createShareTokens(bytes32[],string[])"(
    _names: BytesLike[],
    _symbols: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getInitialized(overrides?: CallOverrides): Promise<boolean>;

  "getInitialized()"(overrides?: CallOverrides): Promise<boolean>;

  hatchery(overrides?: CallOverrides): Promise<string>;

  "hatchery()"(overrides?: CallOverrides): Promise<string>;

  initialize(
    _hatchery: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "initialize(address)"(
    _hatchery: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    INVALID_NAME(overrides?: CallOverrides): Promise<string>;

    "INVALID_NAME()"(overrides?: CallOverrides): Promise<string>;

    INVALID_SYMBOL(overrides?: CallOverrides): Promise<string>;

    "INVALID_SYMBOL()"(overrides?: CallOverrides): Promise<string>;

    createShareTokens(
      _names: BytesLike[],
      _symbols: string[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    "createShareTokens(bytes32[],string[])"(
      _names: BytesLike[],
      _symbols: string[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    getInitialized(overrides?: CallOverrides): Promise<boolean>;

    "getInitialized()"(overrides?: CallOverrides): Promise<boolean>;

    hatchery(overrides?: CallOverrides): Promise<string>;

    "hatchery()"(overrides?: CallOverrides): Promise<string>;

    initialize(_hatchery: string, overrides?: CallOverrides): Promise<boolean>;

    "initialize(address)"(
      _hatchery: string,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    INVALID_NAME(overrides?: CallOverrides): Promise<BigNumber>;

    "INVALID_NAME()"(overrides?: CallOverrides): Promise<BigNumber>;

    INVALID_SYMBOL(overrides?: CallOverrides): Promise<BigNumber>;

    "INVALID_SYMBOL()"(overrides?: CallOverrides): Promise<BigNumber>;

    createShareTokens(
      _names: BytesLike[],
      _symbols: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "createShareTokens(bytes32[],string[])"(
      _names: BytesLike[],
      _symbols: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    "getInitialized()"(overrides?: CallOverrides): Promise<BigNumber>;

    hatchery(overrides?: CallOverrides): Promise<BigNumber>;

    "hatchery()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _hatchery: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "initialize(address)"(
      _hatchery: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    INVALID_NAME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "INVALID_NAME()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    INVALID_SYMBOL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "INVALID_SYMBOL()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createShareTokens(
      _names: BytesLike[],
      _symbols: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "createShareTokens(bytes32[],string[])"(
      _names: BytesLike[],
      _symbols: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getInitialized()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hatchery(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "hatchery()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _hatchery: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "initialize(address)"(
      _hatchery: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
