{
  "address": "0xA642cd6036F11b7407e33b3fFa1376599D43318F",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "contract IERC20Full",
          "name": "_collateral",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_shareFactor",
          "type": "uint256"
        },
        {
          "internalType": "contract FeePot",
          "name": "_feePot",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_stakerFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_settlementFee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_protocol",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_protocolFee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_linkNode",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newLinkNode",
          "type": "address"
        }
      ],
      "name": "LinkNodeChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum SportsLinkMarketFactory.MarketType",
          "name": "marketType",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "homeTeamId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "awayTeamId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "estimatedStarTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "score",
          "type": "int256"
        }
      ],
      "name": "MarketCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "name": "MarketResolved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "protocol",
          "type": "address"
        }
      ],
      "name": "ProtocolChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "ProtocolFeeChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "protocol",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ProtocolFeeClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "SettlementFeeChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "settlementAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "SettlementFeeClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "SharesBurned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "SharesMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "StakerFeeChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "WinningsClaimed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "accumulatedProtocolFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "accumulatedSettlementFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_sharesToBurn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "burnShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_shares",
          "type": "uint256"
        }
      ],
      "name": "calcCost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_collateralIn",
          "type": "uint256"
        }
      ],
      "name": "calcShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newLinkNode",
          "type": "address"
        }
      ],
      "name": "changeLinkNode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_ids",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "claimManyWinnings",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimProtocolFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "claimSettlementFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "claimWinnings",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateral",
      "outputs": [
        {
          "internalType": "contract IERC20Full",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_payload",
          "type": "bytes32"
        }
      ],
      "name": "createMarket",
      "outputs": [
        {
          "internalType": "uint256[3]",
          "name": "_ids",
          "type": "uint256[3]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_payload",
          "type": "bytes32"
        }
      ],
      "name": "decodeCreation",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "_eventId",
          "type": "uint128"
        },
        {
          "internalType": "uint16",
          "name": "_homeTeamId",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_awayTeamId",
          "type": "uint16"
        },
        {
          "internalType": "uint32",
          "name": "_startTimestamp",
          "type": "uint32"
        },
        {
          "internalType": "int16",
          "name": "_homeSpread",
          "type": "int16"
        },
        {
          "internalType": "uint16",
          "name": "_totalScore",
          "type": "uint16"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_payload",
          "type": "bytes32"
        }
      ],
      "name": "decodeResolution",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "_eventId",
          "type": "uint128"
        },
        {
          "internalType": "uint8",
          "name": "_eventStatus",
          "type": "uint8"
        },
        {
          "internalType": "uint16",
          "name": "_homeScore",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_awayScore",
          "type": "uint16"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "_eventId",
          "type": "uint128"
        },
        {
          "internalType": "uint16",
          "name": "_homeTeamId",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_awayTeamId",
          "type": "uint16"
        },
        {
          "internalType": "uint32",
          "name": "_startTimestamp",
          "type": "uint32"
        },
        {
          "internalType": "int16",
          "name": "_homeSpread",
          "type": "int16"
        },
        {
          "internalType": "uint16",
          "name": "_totalScore",
          "type": "uint16"
        }
      ],
      "name": "encodeCreation",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "_payload",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "_eventId",
          "type": "uint128"
        },
        {
          "internalType": "uint8",
          "name": "_eventStatus",
          "type": "uint8"
        },
        {
          "internalType": "uint16",
          "name": "_homeScore",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_awayScore",
          "type": "uint16"
        }
      ],
      "name": "encodeResolution",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "_payload",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feePot",
      "outputs": [
        {
          "internalType": "contract FeePot",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "getMarket",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "settlementAddress",
              "type": "address"
            },
            {
              "internalType": "contract OwnedERC20[]",
              "name": "shareTokens",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            },
            {
              "internalType": "contract OwnedERC20",
              "name": "winner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "settlementFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "protocolFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stakerFee",
              "type": "uint256"
            }
          ],
          "internalType": "struct AbstractMarketFactory.Market",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        }
      ],
      "name": "getMarketDetails",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "eventId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "homeTeamId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "awayTeamId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "estimatedStartTime",
              "type": "uint256"
            },
            {
              "internalType": "enum SportsLinkMarketFactory.MarketType",
              "name": "marketType",
              "type": "uint8"
            },
            {
              "internalType": "enum SportsLinkMarketFactory.EventStatus",
              "name": "eventStatus",
              "type": "uint8"
            },
            {
              "internalType": "int256",
              "name": "value0",
              "type": "int256"
            }
          ],
          "internalType": "struct SportsLinkMarketFactory.MarketDetails",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_eventId",
          "type": "uint256"
        }
      ],
      "name": "isEventRegistered",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_eventId",
          "type": "uint256"
        }
      ],
      "name": "isEventResolved",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "isMarketResolved",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marketCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_shareToMint",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "mintShares",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocol",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "resolveMarket",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newProtocol",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_claimFirst",
          "type": "bool"
        }
      ],
      "name": "setProtocol",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newFee",
          "type": "uint256"
        }
      ],
      "name": "setProtocolFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newFee",
          "type": "uint256"
        }
      ],
      "name": "setSettlementFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newFee",
          "type": "uint256"
        }
      ],
      "name": "setStakerFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "settlementFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "shareFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakerFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_payload",
          "type": "bytes32"
        }
      ],
      "name": "trustedResolveMarkets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc0345e23c4d2aeadc820a2ed7378d9399cdea291d8a630f1a920d2acbf3b3e02",
  "receipt": {
    "to": null,
    "from": "0x5Cfc719AD2d969e0A005541D6a562dae4a618A20",
    "contractAddress": "0xA642cd6036F11b7407e33b3fFa1376599D43318F",
    "transactionIndex": 2,
    "gasUsed": "4096354",
    "logsBloom": "0x
    "blockHash": "0x1c05e0e320c0616e900cfef31d60a87a2aa4ce1d06e5b4ccf94343683d085fa4",
    "transactionHash": "0xc0345e23c4d2aeadc820a2ed7378d9399cdea291d8a630f1a920d2acbf3b3e02",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 24639416,
        "transactionHash": "0xc0345e23c4d2aeadc820a2ed7378d9399cdea291d8a630f1a920d2acbf3b3e02",
        "address": "0x5B9a38Bf07324B2Ff946F1ccdBD4698A8BC6c952",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000a642cd6036f11b7407e33b3ffa1376599d43318f",
          "0x0000000000000000000000006eb468d092783f6644d2912ce732527f51357a4d"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 3,
        "blockHash": "0x1c05e0e320c0616e900cfef31d60a87a2aa4ce1d06e5b4ccf94343683d085fa4"
      }
    ],
    "blockNumber": 24639416,
    "cumulativeGasUsed": "4470544",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5Cfc719AD2d969e0A005541D6a562dae4a618A20",
    "0x5B9a38Bf07324B2Ff946F1ccdBD4698A8BC6c952",
    "1000000000000",
    "0x6eB468d092783F6644D2912ce732527F51357A4D",
    0,
    "500000000000000",
    "0x5Cfc719AD2d969e0A005541D6a562dae4a618A20",
    0,
    "0x5Cfc719AD2d969e0A005541D6a562dae4a618A20"
  ],
  "solcInputHash": "9c26d0db042f253dfc1ecc6c3f3e0c96",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Full\",\"name\":\"_collateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_shareFactor\",\"type\":\"uint256\"},{\"internalType\":\"contract FeePot\",\"name\":\"_feePot\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stakerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_settlementFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_protocol\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_protocolFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_linkNode\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newLinkNode\",\"type\":\"address\"}],\"name\":\"LinkNodeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum SportsLinkMarketFactory.MarketType\",\"name\":\"marketType\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"homeTeamId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"awayTeamId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"estimatedStarTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"score\",\"type\":\"int256\"}],\"name\":\"MarketCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"MarketResolved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"protocol\",\"type\":\"address\"}],\"name\":\"ProtocolChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"ProtocolFeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"protocol\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ProtocolFeeClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"SettlementFeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"settlementAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"SettlementFeeClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"SharesBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"SharesMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"StakerFeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"WinningsClaimed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accumulatedProtocolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accumulatedSettlementFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sharesToBurn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"burnShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"calcCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_collateralIn\",\"type\":\"uint256\"}],\"name\":\"calcShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newLinkNode\",\"type\":\"address\"}],\"name\":\"changeLinkNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"claimManyWinnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimProtocolFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"claimSettlementFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"claimWinnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateral\",\"outputs\":[{\"internalType\":\"contract IERC20Full\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_payload\",\"type\":\"bytes32\"}],\"name\":\"createMarket\",\"outputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"_ids\",\"type\":\"uint256[3]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_payload\",\"type\":\"bytes32\"}],\"name\":\"decodeCreation\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"_eventId\",\"type\":\"uint128\"},{\"internalType\":\"uint16\",\"name\":\"_homeTeamId\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_awayTeamId\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"_startTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"int16\",\"name\":\"_homeSpread\",\"type\":\"int16\"},{\"internalType\":\"uint16\",\"name\":\"_totalScore\",\"type\":\"uint16\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_payload\",\"type\":\"bytes32\"}],\"name\":\"decodeResolution\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"_eventId\",\"type\":\"uint128\"},{\"internalType\":\"uint8\",\"name\":\"_eventStatus\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"_homeScore\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_awayScore\",\"type\":\"uint16\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_eventId\",\"type\":\"uint128\"},{\"internalType\":\"uint16\",\"name\":\"_homeTeamId\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_awayTeamId\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"_startTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"int16\",\"name\":\"_homeSpread\",\"type\":\"int16\"},{\"internalType\":\"uint16\",\"name\":\"_totalScore\",\"type\":\"uint16\"}],\"name\":\"encodeCreation\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"_payload\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_eventId\",\"type\":\"uint128\"},{\"internalType\":\"uint8\",\"name\":\"_eventStatus\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"_homeScore\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_awayScore\",\"type\":\"uint16\"}],\"name\":\"encodeResolution\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"_payload\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feePot\",\"outputs\":[{\"internalType\":\"contract FeePot\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getMarket\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"settlementAddress\",\"type\":\"address\"},{\"internalType\":\"contract OwnedERC20[]\",\"name\":\"shareTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"contract OwnedERC20\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"settlementFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakerFee\",\"type\":\"uint256\"}],\"internalType\":\"struct AbstractMarketFactory.Market\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"}],\"name\":\"getMarketDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"homeTeamId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"awayTeamId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"estimatedStartTime\",\"type\":\"uint256\"},{\"internalType\":\"enum SportsLinkMarketFactory.MarketType\",\"name\":\"marketType\",\"type\":\"uint8\"},{\"internalType\":\"enum SportsLinkMarketFactory.EventStatus\",\"name\":\"eventStatus\",\"type\":\"uint8\"},{\"internalType\":\"int256\",\"name\":\"value0\",\"type\":\"int256\"}],\"internalType\":\"struct SportsLinkMarketFactory.MarketDetails\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_eventId\",\"type\":\"uint256\"}],\"name\":\"isEventRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_eventId\",\"type\":\"uint256\"}],\"name\":\"isEventResolved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"isMarketResolved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_shareToMint\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"mintShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocol\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"resolveMarket\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newProtocol\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_claimFirst\",\"type\":\"bool\"}],\"name\":\"setProtocol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"setProtocolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"setSettlementFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"setStakerFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"settlementFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shareFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakerFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_payload\",\"type\":\"bytes32\"}],\"name\":\"trustedResolveMarkets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"transferOwnership(address)\":{\"details\":\"Allows the current owner to transfer control of the contract to a newOwner.\",\"params\":{\"_newOwner\":\"The address to transfer ownership to.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/turbo/SportsLinkMarketFactory.sol\":\"SportsLinkMarketFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xe22a1fc7400ae196eba2ad1562d0386462b00a6363b742d55a2fd2021a58586f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0x36b5ca4eabe888b39b10973621ca0dcc9b1508f8d06db9ddf045d7aa7c867d4a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"contracts/balancer/BColor.sol\":{\"content\":\"// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\ninterface BColor {\\n    function getColor() external view returns (bytes32);\\n}\\n\\ncontract BBronze is BColor {\\n    function getColor() external pure override returns (bytes32) {\\n        return bytes32(\\\"BRONZE\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xc716fe6583bbf6f8546c258540b2f7527dbc3b1f4b30007a0978b620c9779378\",\"license\":\"MIT\"},\"contracts/balancer/BConst.sol\":{\"content\":\"// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\nimport \\\"./BColor.sol\\\";\\n\\ncontract BConst is BBronze {\\n    uint256 public constant BONE = 10**18;\\n\\n    uint256 public constant MIN_BOUND_TOKENS = 2;\\n    uint256 public constant MAX_BOUND_TOKENS = 8;\\n\\n    uint256 public constant MIN_FEE = BONE / 10**6;\\n    uint256 public constant MAX_FEE = BONE / 10;\\n    uint256 public constant EXIT_FEE = 0;\\n\\n    uint256 public constant MIN_WEIGHT = BONE;\\n    uint256 public constant MAX_WEIGHT = BONE * 50;\\n    uint256 public constant MAX_TOTAL_WEIGHT = BONE * 50;\\n    uint256 public constant MIN_BALANCE = BONE / 10**12;\\n\\n    uint256 public constant INIT_POOL_SUPPLY = BONE * 100;\\n\\n    uint256 public constant MIN_BPOW_BASE = 1 wei;\\n    uint256 public constant MAX_BPOW_BASE = (2 * BONE) - 1 wei;\\n    uint256 public constant BPOW_PRECISION = BONE / 10**10;\\n\\n    uint256 public constant MAX_IN_RATIO = BONE / 2;\\n    uint256 public constant MAX_OUT_RATIO = (BONE / 3) + 1 wei;\\n}\\n\",\"keccak256\":\"0xb8d5d4ae9948f9be6ddb3111b38f01a15a607a155010321c4666351c9ca9afec\",\"license\":\"MIT\"},\"contracts/balancer/BMath.sol\":{\"content\":\"// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\nimport \\\"./BNum.sol\\\";\\n\\ncontract BMath is BBronze, BConst, BNum {\\n    /**********************************************************************************************\\n    // calcSpotPrice                                                                             //\\n    // sP = spotPrice                                                                            //\\n    // bI = tokenBalanceIn                ( bI / wI )         1                                  //\\n    // bO = tokenBalanceOut         sP =  -----------  *  ----------                             //\\n    // wI = tokenWeightIn                 ( bO / wO )     ( 1 - sF )                             //\\n    // wO = tokenWeightOut                                                                       //\\n    // sF = swapFee                                                                              //\\n    **********************************************************************************************/\\n    function calcSpotPrice(\\n        uint256 tokenBalanceIn,\\n        uint256 tokenWeightIn,\\n        uint256 tokenBalanceOut,\\n        uint256 tokenWeightOut,\\n        uint256 swapFee\\n    ) public pure returns (uint256 spotPrice) {\\n        uint256 numer = bdiv(tokenBalanceIn, tokenWeightIn);\\n        uint256 denom = bdiv(tokenBalanceOut, tokenWeightOut);\\n        uint256 ratio = bdiv(numer, denom);\\n        uint256 scale = bdiv(BONE, bsub(BONE, swapFee));\\n        return (spotPrice = bmul(ratio, scale));\\n    }\\n\\n    /**********************************************************************************************\\n    // calcOutGivenIn                                                                            //\\n    // aO = tokenAmountOut                                                                       //\\n    // bO = tokenBalanceOut                                                                      //\\n    // bI = tokenBalanceIn              /      /            bI             \\\\    (wI / wO) \\\\      //\\n    // aI = tokenAmountIn    aO = bO * |  1 - | --------------------------  | ^            |     //\\n    // wI = tokenWeightIn               \\\\      \\\\ ( bI + ( aI * ( 1 - sF )) /              /      //\\n    // wO = tokenWeightOut                                                                       //\\n    // sF = swapFee                                                                              //\\n    **********************************************************************************************/\\n    function calcOutGivenIn(\\n        uint256 tokenBalanceIn,\\n        uint256 tokenWeightIn,\\n        uint256 tokenBalanceOut,\\n        uint256 tokenWeightOut,\\n        uint256 tokenAmountIn,\\n        uint256 swapFee\\n    ) public pure returns (uint256 tokenAmountOut) {\\n        uint256 weightRatio = bdiv(tokenWeightIn, tokenWeightOut);\\n        uint256 adjustedIn = bsub(BONE, swapFee);\\n        adjustedIn = bmul(tokenAmountIn, adjustedIn);\\n        uint256 y = bdiv(tokenBalanceIn, badd(tokenBalanceIn, adjustedIn));\\n        uint256 foo = bpow(y, weightRatio);\\n        uint256 bar = bsub(BONE, foo);\\n        tokenAmountOut = bmul(tokenBalanceOut, bar);\\n        return tokenAmountOut;\\n    }\\n\\n    /**********************************************************************************************\\n    // calcInGivenOut                                                                            //\\n    // aI = tokenAmountIn                                                                        //\\n    // bO = tokenBalanceOut               /  /     bO      \\\\    (wO / wI)      \\\\                 //\\n    // bI = tokenBalanceIn          bI * |  | ------------  | ^            - 1  |                //\\n    // aO = tokenAmountOut    aI =        \\\\  \\\\ ( bO - aO ) /                   /                 //\\n    // wI = tokenWeightIn           --------------------------------------------                 //\\n    // wO = tokenWeightOut                          ( 1 - sF )                                   //\\n    // sF = swapFee                                                                              //\\n    **********************************************************************************************/\\n    function calcInGivenOut(\\n        uint256 tokenBalanceIn,\\n        uint256 tokenWeightIn,\\n        uint256 tokenBalanceOut,\\n        uint256 tokenWeightOut,\\n        uint256 tokenAmountOut,\\n        uint256 swapFee\\n    ) public pure returns (uint256 tokenAmountIn) {\\n        uint256 weightRatio = bdiv(tokenWeightOut, tokenWeightIn);\\n        uint256 diff = bsub(tokenBalanceOut, tokenAmountOut);\\n        uint256 y = bdiv(tokenBalanceOut, diff);\\n        uint256 foo = bpow(y, weightRatio);\\n        foo = bsub(foo, BONE);\\n        tokenAmountIn = bsub(BONE, swapFee);\\n        tokenAmountIn = bdiv(bmul(tokenBalanceIn, foo), tokenAmountIn);\\n        return tokenAmountIn;\\n    }\\n\\n    /**********************************************************************************************\\n    // calcPoolOutGivenSingleIn                                                                  //\\n    // pAo = poolAmountOut         /                                              \\\\              //\\n    // tAi = tokenAmountIn        ///      /     //    wI \\\\      \\\\\\\\       \\\\     wI \\\\             //\\n    // wI = tokenWeightIn        //| tAi *| 1 - || 1 - --  | * sF || + tBi \\\\    --  \\\\            //\\n    // tW = totalWeight     pAo=||  \\\\      \\\\     \\\\\\\\    tW /      //         | ^ tW   | * pS - pS //\\n    // tBi = tokenBalanceIn      \\\\\\\\  ------------------------------------- /        /            //\\n    // pS = poolSupply            \\\\\\\\                    tBi               /        /             //\\n    // sF = swapFee                \\\\                                              /              //\\n    **********************************************************************************************/\\n\\n    // Charge the trading fee for the proportion of tokenAi\\n    ///  which is implicitly traded to the other pool tokens.\\n    // That proportion is (1- weightTokenIn)\\n    // tokenAiAfterFee = tAi * (1 - (1-weightTi) * poolFee);\\n\\n    function calcPoolOutGivenSingleIn(\\n        uint256 tokenBalanceIn,\\n        uint256 tokenWeightIn,\\n        uint256 poolSupply,\\n        uint256 totalWeight,\\n        uint256 tokenAmountIn,\\n        uint256 swapFee\\n    ) public pure returns (uint256 poolAmountOut) {\\n        uint256 normalizedWeight = bdiv(tokenWeightIn, totalWeight);\\n        uint256 zaz = bmul(bsub(BONE, normalizedWeight), swapFee);\\n        uint256 tokenAmountInAfterFee = bmul(tokenAmountIn, bsub(BONE, zaz));\\n\\n        uint256 newTokenBalanceIn = badd(tokenBalanceIn, tokenAmountInAfterFee);\\n        uint256 tokenInRatio = bdiv(newTokenBalanceIn, tokenBalanceIn);\\n\\n        // uint newPoolSupply = (ratioTi ^ weightTi) * poolSupply;\\n        uint256 poolRatio = bpow(tokenInRatio, normalizedWeight);\\n        uint256 newPoolSupply = bmul(poolRatio, poolSupply);\\n        poolAmountOut = bsub(newPoolSupply, poolSupply);\\n        return poolAmountOut;\\n    }\\n\\n    /**********************************************************************************************\\n    // calcSingleInGivenPoolOut                                                                  //\\n    // tAi = tokenAmountIn              //(pS + pAo)\\\\     /    1    \\\\\\\\                           //\\n    // pS = poolSupply                 || ---------  | ^ | --------- || * bI - bI                //\\n    // pAo = poolAmountOut              \\\\\\\\    pS    /     \\\\(wI / tW)//                           //\\n    // bI = balanceIn          tAi =  --------------------------------------------               //\\n    // wI = weightIn                              /      wI  \\\\                                   //\\n    // tW = totalWeight                          |  1 - ----  |  * sF                            //\\n    // sF = swapFee                               \\\\      tW  /                                   //\\n    **********************************************************************************************/\\n    function calcSingleInGivenPoolOut(\\n        uint256 tokenBalanceIn,\\n        uint256 tokenWeightIn,\\n        uint256 poolSupply,\\n        uint256 totalWeight,\\n        uint256 poolAmountOut,\\n        uint256 swapFee\\n    ) public pure returns (uint256 tokenAmountIn) {\\n        uint256 normalizedWeight = bdiv(tokenWeightIn, totalWeight);\\n        uint256 newPoolSupply = badd(poolSupply, poolAmountOut);\\n        uint256 poolRatio = bdiv(newPoolSupply, poolSupply);\\n\\n        //uint newBalTi = poolRatio^(1/weightTi) * balTi;\\n        uint256 boo = bdiv(BONE, normalizedWeight);\\n        uint256 tokenInRatio = bpow(poolRatio, boo);\\n        uint256 newTokenBalanceIn = bmul(tokenInRatio, tokenBalanceIn);\\n        uint256 tokenAmountInAfterFee = bsub(newTokenBalanceIn, tokenBalanceIn);\\n        // Do reverse order of fees charged in joinswap_ExternAmountIn, this way\\n        //     ``` pAo == joinswap_ExternAmountIn(Ti, joinswap_PoolAmountOut(pAo, Ti)) ```\\n        //uint tAi = tAiAfterFee / (1 - (1-weightTi) * swapFee) ;\\n        uint256 zar = bmul(bsub(BONE, normalizedWeight), swapFee);\\n        tokenAmountIn = bdiv(tokenAmountInAfterFee, bsub(BONE, zar));\\n        return tokenAmountIn;\\n    }\\n\\n    /**********************************************************************************************\\n    // calcSingleOutGivenPoolIn                                                                  //\\n    // tAo = tokenAmountOut            /      /                                             \\\\\\\\   //\\n    // bO = tokenBalanceOut           /      // pS - (pAi * (1 - eF)) \\\\     /    1    \\\\      \\\\\\\\  //\\n    // pAi = poolAmountIn            | bO - || ----------------------- | ^ | --------- | * b0 || //\\n    // ps = poolSupply                \\\\      \\\\\\\\          pS           /     \\\\(wO / tW)/      //  //\\n    // wI = tokenWeightIn      tAo =   \\\\      \\\\                                             //   //\\n    // tW = totalWeight                    /     /      wO \\\\       \\\\                             //\\n    // sF = swapFee                    *  | 1 - |  1 - ---- | * sF  |                            //\\n    // eF = exitFee                        \\\\     \\\\      tW /       /                             //\\n    **********************************************************************************************/\\n    function calcSingleOutGivenPoolIn(\\n        uint256 tokenBalanceOut,\\n        uint256 tokenWeightOut,\\n        uint256 poolSupply,\\n        uint256 totalWeight,\\n        uint256 poolAmountIn,\\n        uint256 swapFee\\n    ) public pure returns (uint256 tokenAmountOut) {\\n        uint256 normalizedWeight = bdiv(tokenWeightOut, totalWeight);\\n        // charge exit fee on the pool token side\\n        // pAiAfterExitFee = pAi*(1-exitFee)\\n        uint256 poolAmountInAfterExitFee = bmul(poolAmountIn, bsub(BONE, EXIT_FEE));\\n        uint256 newPoolSupply = bsub(poolSupply, poolAmountInAfterExitFee);\\n        uint256 poolRatio = bdiv(newPoolSupply, poolSupply);\\n\\n        // newBalTo = poolRatio^(1/weightTo) * balTo;\\n        uint256 tokenOutRatio = bpow(poolRatio, bdiv(BONE, normalizedWeight));\\n        uint256 newTokenBalanceOut = bmul(tokenOutRatio, tokenBalanceOut);\\n\\n        uint256 tokenAmountOutBeforeSwapFee = bsub(tokenBalanceOut, newTokenBalanceOut);\\n\\n        // charge swap fee on the output token side\\n        //uint tAo = tAoBeforeSwapFee * (1 - (1-weightTo) * swapFee)\\n        uint256 zaz = bmul(bsub(BONE, normalizedWeight), swapFee);\\n        tokenAmountOut = bmul(tokenAmountOutBeforeSwapFee, bsub(BONE, zaz));\\n        return tokenAmountOut;\\n    }\\n\\n    /**********************************************************************************************\\n    // calcPoolInGivenSingleOut                                                                  //\\n    // pAi = poolAmountIn               // /               tAo             \\\\\\\\     / wO \\\\     \\\\   //\\n    // bO = tokenBalanceOut            // | bO - -------------------------- |\\\\   | ---- |     \\\\  //\\n    // tAo = tokenAmountOut      pS - ||   \\\\     1 - ((1 - (tO / tW)) * sF)/  | ^ \\\\ tW /  * pS | //\\n    // ps = poolSupply                 \\\\\\\\ -----------------------------------/                /  //\\n    // wO = tokenWeightOut  pAi =       \\\\\\\\               bO                 /                /   //\\n    // tW = totalWeight           -------------------------------------------------------------  //\\n    // sF = swapFee                                        ( 1 - eF )                            //\\n    // eF = exitFee                                                                              //\\n    **********************************************************************************************/\\n    function calcPoolInGivenSingleOut(\\n        uint256 tokenBalanceOut,\\n        uint256 tokenWeightOut,\\n        uint256 poolSupply,\\n        uint256 totalWeight,\\n        uint256 tokenAmountOut,\\n        uint256 swapFee\\n    ) public pure returns (uint256 poolAmountIn) {\\n        // charge swap fee on the output token side\\n        uint256 normalizedWeight = bdiv(tokenWeightOut, totalWeight);\\n        //uint tAoBeforeSwapFee = tAo / (1 - (1-weightTo) * swapFee) ;\\n        uint256 zoo = bsub(BONE, normalizedWeight);\\n        uint256 zar = bmul(zoo, swapFee);\\n        uint256 tokenAmountOutBeforeSwapFee = bdiv(tokenAmountOut, bsub(BONE, zar));\\n\\n        uint256 newTokenBalanceOut = bsub(tokenBalanceOut, tokenAmountOutBeforeSwapFee);\\n        uint256 tokenOutRatio = bdiv(newTokenBalanceOut, tokenBalanceOut);\\n\\n        //uint newPoolSupply = (ratioTo ^ weightTo) * poolSupply;\\n        uint256 poolRatio = bpow(tokenOutRatio, normalizedWeight);\\n        uint256 newPoolSupply = bmul(poolRatio, poolSupply);\\n        uint256 poolAmountInAfterExitFee = bsub(poolSupply, newPoolSupply);\\n\\n        // charge exit fee on the pool token side\\n        // pAi = pAiAfterExitFee/(1-exitFee)\\n        poolAmountIn = bdiv(poolAmountInAfterExitFee, bsub(BONE, EXIT_FEE));\\n        return poolAmountIn;\\n    }\\n}\\n\",\"keccak256\":\"0x0a19a262ccff90637f3d74538bc55cff57d1b9d484df33cca36f29fad8f37e2e\",\"license\":\"MIT\"},\"contracts/balancer/BNum.sol\":{\"content\":\"// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\nimport \\\"./BConst.sol\\\";\\n\\ncontract BNum is BConst {\\n    function btoi(uint256 a) internal pure returns (uint256) {\\n        return a / BONE;\\n    }\\n\\n    function bfloor(uint256 a) internal pure returns (uint256) {\\n        return btoi(a) * BONE;\\n    }\\n\\n    function badd(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"ERR_ADD_OVERFLOW\\\");\\n        return c;\\n    }\\n\\n    function bsub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (uint256 c, bool flag) = bsubSign(a, b);\\n        require(!flag, \\\"ERR_SUB_UNDERFLOW\\\");\\n        return c;\\n    }\\n\\n    function bsubSign(uint256 a, uint256 b) internal pure returns (uint256, bool) {\\n        if (a >= b) {\\n            return (a - b, false);\\n        } else {\\n            return (b - a, true);\\n        }\\n    }\\n\\n    function bmul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c0 = a * b;\\n        require(a == 0 || c0 / a == b, \\\"ERR_MUL_OVERFLOW\\\");\\n        uint256 c1 = c0 + (BONE / 2);\\n        require(c1 >= c0, \\\"ERR_MUL_OVERFLOW\\\");\\n        uint256 c2 = c1 / BONE;\\n        return c2;\\n    }\\n\\n    function bdiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, \\\"ERR_DIV_ZERO\\\");\\n        uint256 c0 = a * BONE;\\n        require(a == 0 || c0 / a == BONE, \\\"ERR_DIV_INTERNAL\\\"); // bmul overflow\\n        uint256 c1 = c0 + (b / 2);\\n        require(c1 >= c0, \\\"ERR_DIV_INTERNAL\\\"); //  badd require\\n        uint256 c2 = c1 / b;\\n        return c2;\\n    }\\n\\n    // DSMath.wpow\\n    function bpowi(uint256 a, uint256 n) internal pure returns (uint256) {\\n        uint256 z = n % 2 != 0 ? a : BONE;\\n\\n        for (n /= 2; n != 0; n /= 2) {\\n            a = bmul(a, a);\\n\\n            if (n % 2 != 0) {\\n                z = bmul(z, a);\\n            }\\n        }\\n        return z;\\n    }\\n\\n    // Compute b^(e.w) by splitting it into (b^e)*(b^0.w).\\n    // Use `bpowi` for `b^e` and `bpowK` for k iterations\\n    // of approximation of b^0.w\\n    function bpow(uint256 base, uint256 exp) internal pure returns (uint256) {\\n        require(base >= MIN_BPOW_BASE, \\\"ERR_BPOW_BASE_TOO_LOW\\\");\\n        require(base <= MAX_BPOW_BASE, \\\"ERR_BPOW_BASE_TOO_HIGH\\\");\\n\\n        uint256 whole = bfloor(exp);\\n        uint256 remain = bsub(exp, whole);\\n\\n        uint256 wholePow = bpowi(base, btoi(whole));\\n\\n        if (remain == 0) {\\n            return wholePow;\\n        }\\n\\n        uint256 partialResult = bpowApprox(base, remain, BPOW_PRECISION);\\n        return bmul(wholePow, partialResult);\\n    }\\n\\n    function bpowApprox(\\n        uint256 base,\\n        uint256 exp,\\n        uint256 precision\\n    ) internal pure returns (uint256) {\\n        // term 0:\\n        uint256 a = exp;\\n        (uint256 x, bool xneg) = bsubSign(base, BONE);\\n        uint256 term = BONE;\\n        uint256 sum = term;\\n        bool negative = false;\\n\\n        // term(k) = numer / denom\\n        //         = (product(a - i - 1, i=1-->k) * x^k) / (k!)\\n        // each iteration, multiply previous term by (a-(k-1)) * x / k\\n        // continue until term is less than precision\\n        for (uint256 i = 1; term >= precision; i++) {\\n            uint256 bigK = i * BONE;\\n            (uint256 c, bool cneg) = bsubSign(a, bsub(bigK, BONE));\\n            term = bmul(term, bmul(c, x));\\n            term = bdiv(term, bigK);\\n            if (term == 0) break;\\n\\n            if (xneg) negative = !negative;\\n            if (cneg) negative = !negative;\\n            if (negative) {\\n                sum = bsub(sum, term);\\n            } else {\\n                sum = badd(sum, term);\\n            }\\n        }\\n\\n        return sum;\\n    }\\n}\\n\",\"keccak256\":\"0x015e4af906575a6fff48089af01a4c683d8e9127179271f545b6e687d767d178\",\"license\":\"MIT\"},\"contracts/balancer/BPool.sol\":{\"content\":\"// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\nimport \\\"./BToken.sol\\\";\\nimport \\\"./BMath.sol\\\";\\n\\ncontract BPool is BBronze, BToken, BMath {\\n    struct Record {\\n        bool bound; // is token bound to pool\\n        uint256 index; // private\\n        uint256 denorm; // denormalized weight\\n        uint256 balance;\\n    }\\n\\n    event LOG_SWAP(\\n        address indexed caller,\\n        address indexed tokenIn,\\n        address indexed tokenOut,\\n        uint256 tokenAmountIn,\\n        uint256 tokenAmountOut\\n    );\\n\\n    event LOG_JOIN(address indexed caller, address indexed tokenIn, uint256 tokenAmountIn);\\n\\n    event LOG_EXIT(address indexed caller, address indexed tokenOut, uint256 tokenAmountOut);\\n\\n    event LOG_CALL(bytes4 indexed sig, address indexed caller, bytes data) anonymous;\\n\\n    modifier _logs_() {\\n        emit LOG_CALL(msg.sig, msg.sender, msg.data);\\n        _;\\n    }\\n\\n    modifier _lock_() {\\n        require(!_mutex, \\\"ERR_REENTRY\\\");\\n        _mutex = true;\\n        _;\\n        _mutex = false;\\n    }\\n\\n    modifier _viewlock_() {\\n        require(!_mutex, \\\"ERR_REENTRY\\\");\\n        _;\\n    }\\n\\n    bool private _mutex;\\n\\n    address private _factory; // BFactory address to push token exitFee to\\n    address private _controller; // has CONTROL role\\n    bool private _publicSwap; // true if PUBLIC can call SWAP functions\\n\\n    // `setSwapFee` and `finalize` require CONTROL\\n    // `finalize` sets `PUBLIC can SWAP`, `PUBLIC can JOIN`\\n    uint256 private _swapFee;\\n    bool private _finalized;\\n\\n    address[] private _tokens;\\n    mapping(address => Record) private _records;\\n    uint256 private _totalWeight;\\n\\n    constructor() {\\n        _controller = msg.sender;\\n        _factory = msg.sender;\\n        _swapFee = MIN_FEE;\\n        _publicSwap = false;\\n        _finalized = false;\\n    }\\n\\n    function isPublicSwap() external view returns (bool) {\\n        return _publicSwap;\\n    }\\n\\n    function isFinalized() external view returns (bool) {\\n        return _finalized;\\n    }\\n\\n    function isBound(address t) external view returns (bool) {\\n        return _records[t].bound;\\n    }\\n\\n    function getNumTokens() external view returns (uint256) {\\n        return _tokens.length;\\n    }\\n\\n    function getCurrentTokens() external view _viewlock_ returns (address[] memory tokens) {\\n        return _tokens;\\n    }\\n\\n    function getFinalTokens() external view _viewlock_ returns (address[] memory tokens) {\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\n        return _tokens;\\n    }\\n\\n    function getDenormalizedWeight(address token) external view _viewlock_ returns (uint256) {\\n        require(_records[token].bound, \\\"ERR_NOT_BOUND\\\");\\n        return _records[token].denorm;\\n    }\\n\\n    function getTotalDenormalizedWeight() external view _viewlock_ returns (uint256) {\\n        return _totalWeight;\\n    }\\n\\n    function getNormalizedWeight(address token) external view _viewlock_ returns (uint256) {\\n        require(_records[token].bound, \\\"ERR_NOT_BOUND\\\");\\n        uint256 denorm = _records[token].denorm;\\n        return bdiv(denorm, _totalWeight);\\n    }\\n\\n    function getBalance(address token) external view _viewlock_ returns (uint256) {\\n        require(_records[token].bound, \\\"ERR_NOT_BOUND\\\");\\n        return _records[token].balance;\\n    }\\n\\n    function getSwapFee() external view _viewlock_ returns (uint256) {\\n        return _swapFee;\\n    }\\n\\n    function getController() external view _viewlock_ returns (address) {\\n        return _controller;\\n    }\\n\\n    function setSwapFee(uint256 swapFee) external _logs_ _lock_ {\\n        require(!_finalized, \\\"ERR_IS_FINALIZED\\\");\\n        require(msg.sender == _controller, \\\"ERR_NOT_CONTROLLER\\\");\\n        require(swapFee >= MIN_FEE, \\\"ERR_MIN_FEE\\\");\\n        require(swapFee <= MAX_FEE, \\\"ERR_MAX_FEE\\\");\\n        _swapFee = swapFee;\\n    }\\n\\n    function setController(address manager) external _logs_ _lock_ {\\n        require(msg.sender == _controller, \\\"ERR_NOT_CONTROLLER\\\");\\n        _controller = manager;\\n    }\\n\\n    function setPublicSwap(bool public_) external _logs_ _lock_ {\\n        require(!_finalized, \\\"ERR_IS_FINALIZED\\\");\\n        require(msg.sender == _controller, \\\"ERR_NOT_CONTROLLER\\\");\\n        _publicSwap = public_;\\n    }\\n\\n    function finalize() external _logs_ _lock_ {\\n        require(msg.sender == _controller, \\\"ERR_NOT_CONTROLLER\\\");\\n        require(!_finalized, \\\"ERR_IS_FINALIZED\\\");\\n        require(_tokens.length >= MIN_BOUND_TOKENS, \\\"ERR_MIN_TOKENS\\\");\\n\\n        _finalized = true;\\n        _publicSwap = true;\\n\\n        _mintPoolShare(INIT_POOL_SUPPLY);\\n        _pushPoolShare(msg.sender, INIT_POOL_SUPPLY);\\n    }\\n\\n    function bind(\\n        address token,\\n        uint256 balance,\\n        uint256 denorm\\n    )\\n        external\\n        _logs_ // _lock_  Bind does not lock because it jumps to `rebind`, which does\\n    {\\n        require(msg.sender == _controller, \\\"ERR_NOT_CONTROLLER\\\");\\n        require(!_records[token].bound, \\\"ERR_IS_BOUND\\\");\\n        require(!_finalized, \\\"ERR_IS_FINALIZED\\\");\\n\\n        require(_tokens.length < MAX_BOUND_TOKENS, \\\"ERR_MAX_TOKENS\\\");\\n\\n        _records[token] = Record({\\n            bound: true,\\n            index: _tokens.length,\\n            denorm: 0, // balance and denorm will be validated\\n            balance: 0 // and set by `rebind`\\n        });\\n        _tokens.push(token);\\n        rebind(token, balance, denorm);\\n    }\\n\\n    function rebind(\\n        address token,\\n        uint256 balance,\\n        uint256 denorm\\n    ) public _logs_ _lock_ {\\n        require(msg.sender == _controller, \\\"ERR_NOT_CONTROLLER\\\");\\n        require(_records[token].bound, \\\"ERR_NOT_BOUND\\\");\\n        require(!_finalized, \\\"ERR_IS_FINALIZED\\\");\\n\\n        require(denorm >= MIN_WEIGHT, \\\"ERR_MIN_WEIGHT\\\");\\n        require(denorm <= MAX_WEIGHT, \\\"ERR_MAX_WEIGHT\\\");\\n        require(balance >= MIN_BALANCE, \\\"ERR_MIN_BALANCE\\\");\\n\\n        // Adjust the denorm and totalWeight\\n        uint256 oldWeight = _records[token].denorm;\\n        if (denorm > oldWeight) {\\n            _totalWeight = badd(_totalWeight, bsub(denorm, oldWeight));\\n            require(_totalWeight <= MAX_TOTAL_WEIGHT, \\\"ERR_MAX_TOTAL_WEIGHT\\\");\\n        } else if (denorm < oldWeight) {\\n            _totalWeight = bsub(_totalWeight, bsub(oldWeight, denorm));\\n        }\\n        _records[token].denorm = denorm;\\n\\n        // Adjust the balance record and actual token balance\\n        uint256 oldBalance = _records[token].balance;\\n        _records[token].balance = balance;\\n        if (balance > oldBalance) {\\n            _pullUnderlying(token, msg.sender, bsub(balance, oldBalance));\\n        } else if (balance < oldBalance) {\\n            // In this case liquidity is being withdrawn, so charge EXIT_FEE\\n            uint256 tokenBalanceWithdrawn = bsub(oldBalance, balance);\\n            uint256 tokenExitFee = bmul(tokenBalanceWithdrawn, EXIT_FEE);\\n            _pushUnderlying(token, msg.sender, bsub(tokenBalanceWithdrawn, tokenExitFee));\\n            _pushUnderlying(token, _factory, tokenExitFee);\\n        }\\n    }\\n\\n    function unbind(address token) external _logs_ _lock_ {\\n        require(msg.sender == _controller, \\\"ERR_NOT_CONTROLLER\\\");\\n        require(_records[token].bound, \\\"ERR_NOT_BOUND\\\");\\n        require(!_finalized, \\\"ERR_IS_FINALIZED\\\");\\n\\n        uint256 tokenBalance = _records[token].balance;\\n        uint256 tokenExitFee = bmul(tokenBalance, EXIT_FEE);\\n\\n        _totalWeight = bsub(_totalWeight, _records[token].denorm);\\n\\n        // Swap the token-to-unbind with the last token,\\n        // then delete the last token\\n        uint256 index = _records[token].index;\\n        uint256 last = _tokens.length - 1;\\n        _tokens[index] = _tokens[last];\\n        _records[_tokens[index]].index = index;\\n        _tokens.pop();\\n        _records[token] = Record({bound: false, index: 0, denorm: 0, balance: 0});\\n\\n        _pushUnderlying(token, msg.sender, bsub(tokenBalance, tokenExitFee));\\n        _pushUnderlying(token, _factory, tokenExitFee);\\n    }\\n\\n    // Absorb any tokens that have been sent to this contract into the pool\\n    function gulp(address token) external _logs_ _lock_ {\\n        require(_records[token].bound, \\\"ERR_NOT_BOUND\\\");\\n        _records[token].balance = IERC20Balancer(token).balanceOf(address(this));\\n    }\\n\\n    function getSpotPrice(address tokenIn, address tokenOut) external view _viewlock_ returns (uint256 spotPrice) {\\n        require(_records[tokenIn].bound, \\\"ERR_NOT_BOUND\\\");\\n        require(_records[tokenOut].bound, \\\"ERR_NOT_BOUND\\\");\\n        Record storage inRecord = _records[tokenIn];\\n        Record storage outRecord = _records[tokenOut];\\n        return calcSpotPrice(inRecord.balance, inRecord.denorm, outRecord.balance, outRecord.denorm, _swapFee);\\n    }\\n\\n    function getSpotPriceSansFee(address tokenIn, address tokenOut)\\n        external\\n        view\\n        _viewlock_\\n        returns (uint256 spotPrice)\\n    {\\n        require(_records[tokenIn].bound, \\\"ERR_NOT_BOUND\\\");\\n        require(_records[tokenOut].bound, \\\"ERR_NOT_BOUND\\\");\\n        Record storage inRecord = _records[tokenIn];\\n        Record storage outRecord = _records[tokenOut];\\n        return calcSpotPrice(inRecord.balance, inRecord.denorm, outRecord.balance, outRecord.denorm, 0);\\n    }\\n\\n    function joinPool(uint256 poolAmountOut, uint256[] calldata maxAmountsIn) external _logs_ _lock_ {\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\n\\n        uint256 poolTotal = totalSupply();\\n        uint256 ratio = bdiv(poolAmountOut, poolTotal);\\n        require(ratio != 0, \\\"ERR_MATH_APPROX\\\");\\n\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            address t = _tokens[i];\\n            uint256 bal = _records[t].balance;\\n            uint256 tokenAmountIn = bmul(ratio, bal);\\n            require(tokenAmountIn != 0, \\\"ERR_MATH_APPROX\\\");\\n            require(tokenAmountIn <= maxAmountsIn[i], \\\"ERR_LIMIT_IN\\\");\\n            _records[t].balance = badd(_records[t].balance, tokenAmountIn);\\n            emit LOG_JOIN(msg.sender, t, tokenAmountIn);\\n            _pullUnderlying(t, msg.sender, tokenAmountIn);\\n        }\\n        _mintPoolShare(poolAmountOut);\\n        _pushPoolShare(msg.sender, poolAmountOut);\\n    }\\n\\n    function exitPool(uint256 poolAmountIn, uint256[] calldata minAmountsOut) external _logs_ _lock_ {\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\n\\n        uint256 poolTotal = totalSupply();\\n        uint256 exitFee = bmul(poolAmountIn, EXIT_FEE);\\n        uint256 pAiAfterExitFee = bsub(poolAmountIn, exitFee);\\n        uint256 ratio = bdiv(pAiAfterExitFee, poolTotal);\\n        require(ratio != 0, \\\"ERR_MATH_APPROX\\\");\\n\\n        _pullPoolShare(msg.sender, poolAmountIn);\\n        _pushPoolShare(_factory, exitFee);\\n        _burnPoolShare(pAiAfterExitFee);\\n\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            address t = _tokens[i];\\n            uint256 bal = _records[t].balance;\\n            uint256 tokenAmountOut = bmul(ratio, bal);\\n            require(tokenAmountOut != 0, \\\"ERR_MATH_APPROX\\\");\\n            require(tokenAmountOut >= minAmountsOut[i], \\\"ERR_LIMIT_OUT\\\");\\n            _records[t].balance = bsub(_records[t].balance, tokenAmountOut);\\n            emit LOG_EXIT(msg.sender, t, tokenAmountOut);\\n            _pushUnderlying(t, msg.sender, tokenAmountOut);\\n        }\\n    }\\n\\n    function calcExitPool(uint256 poolAmountIn, uint256[] calldata minAmountsOut)\\n        external\\n        view\\n        returns (uint256[] memory)\\n    {\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\n\\n        uint256 poolTotal = totalSupply();\\n        uint256 exitFee = bmul(poolAmountIn, EXIT_FEE);\\n        uint256 pAiAfterExitFee = bsub(poolAmountIn, exitFee);\\n        uint256 ratio = bdiv(pAiAfterExitFee, poolTotal);\\n\\n        uint256[] memory _amounts = new uint256[](_tokens.length * 2);\\n\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            address t = _tokens[i];\\n            uint256 bal = _records[t].balance;\\n\\n            _amounts[i] = bmul(ratio, bal);\\n            _amounts[_tokens.length + i] = minAmountsOut[i];\\n            require(_amounts[i] >= minAmountsOut[i], \\\"ERR_LIMIT_OUT\\\");\\n        }\\n\\n        return _amounts;\\n    }\\n\\n    function swapExactAmountIn(\\n        address tokenIn,\\n        uint256 tokenAmountIn,\\n        address tokenOut,\\n        uint256 minAmountOut,\\n        uint256 maxPrice\\n    ) external _logs_ _lock_ returns (uint256 tokenAmountOut, uint256 spotPriceAfter) {\\n        require(_records[tokenIn].bound, \\\"ERR_NOT_BOUND\\\");\\n        require(_records[tokenOut].bound, \\\"ERR_NOT_BOUND\\\");\\n        require(_publicSwap, \\\"ERR_SWAP_NOT_PUBLIC\\\");\\n\\n        Record storage inRecord = _records[address(tokenIn)];\\n        Record storage outRecord = _records[address(tokenOut)];\\n\\n        require(tokenAmountIn <= bmul(inRecord.balance, MAX_IN_RATIO), \\\"ERR_MAX_IN_RATIO\\\");\\n\\n        uint256 spotPriceBefore =\\n            calcSpotPrice(inRecord.balance, inRecord.denorm, outRecord.balance, outRecord.denorm, _swapFee);\\n        require(spotPriceBefore <= maxPrice, \\\"ERR_BAD_LIMIT_PRICE\\\");\\n\\n        tokenAmountOut = calcOutGivenIn(\\n            inRecord.balance,\\n            inRecord.denorm,\\n            outRecord.balance,\\n            outRecord.denorm,\\n            tokenAmountIn,\\n            _swapFee\\n        );\\n        require(tokenAmountOut >= minAmountOut, \\\"ERR_LIMIT_OUT\\\");\\n\\n        inRecord.balance = badd(inRecord.balance, tokenAmountIn);\\n        outRecord.balance = bsub(outRecord.balance, tokenAmountOut);\\n\\n        spotPriceAfter = calcSpotPrice(\\n            inRecord.balance,\\n            inRecord.denorm,\\n            outRecord.balance,\\n            outRecord.denorm,\\n            _swapFee\\n        );\\n        require(spotPriceAfter >= spotPriceBefore, \\\"ERR_MATH_APPROX\\\");\\n        require(spotPriceAfter <= maxPrice, \\\"ERR_LIMIT_PRICE\\\");\\n        require(spotPriceBefore <= bdiv(tokenAmountIn, tokenAmountOut), \\\"ERR_MATH_APPROX\\\");\\n\\n        emit LOG_SWAP(msg.sender, tokenIn, tokenOut, tokenAmountIn, tokenAmountOut);\\n\\n        _pullUnderlying(tokenIn, msg.sender, tokenAmountIn);\\n        _pushUnderlying(tokenOut, msg.sender, tokenAmountOut);\\n\\n        return (tokenAmountOut, spotPriceAfter);\\n    }\\n\\n    function swapExactAmountOut(\\n        address tokenIn,\\n        uint256 maxAmountIn,\\n        address tokenOut,\\n        uint256 tokenAmountOut,\\n        uint256 maxPrice\\n    ) external _logs_ _lock_ returns (uint256 tokenAmountIn, uint256 spotPriceAfter) {\\n        require(_records[tokenIn].bound, \\\"ERR_NOT_BOUND\\\");\\n        require(_records[tokenOut].bound, \\\"ERR_NOT_BOUND\\\");\\n        require(_publicSwap, \\\"ERR_SWAP_NOT_PUBLIC\\\");\\n\\n        Record storage inRecord = _records[address(tokenIn)];\\n        Record storage outRecord = _records[address(tokenOut)];\\n\\n        require(tokenAmountOut <= bmul(outRecord.balance, MAX_OUT_RATIO), \\\"ERR_MAX_OUT_RATIO\\\");\\n\\n        uint256 spotPriceBefore =\\n            calcSpotPrice(inRecord.balance, inRecord.denorm, outRecord.balance, outRecord.denorm, _swapFee);\\n        require(spotPriceBefore <= maxPrice, \\\"ERR_BAD_LIMIT_PRICE\\\");\\n\\n        tokenAmountIn = calcInGivenOut(\\n            inRecord.balance,\\n            inRecord.denorm,\\n            outRecord.balance,\\n            outRecord.denorm,\\n            tokenAmountOut,\\n            _swapFee\\n        );\\n        require(tokenAmountIn <= maxAmountIn, \\\"ERR_LIMIT_IN\\\");\\n\\n        inRecord.balance = badd(inRecord.balance, tokenAmountIn);\\n        outRecord.balance = bsub(outRecord.balance, tokenAmountOut);\\n\\n        spotPriceAfter = calcSpotPrice(\\n            inRecord.balance,\\n            inRecord.denorm,\\n            outRecord.balance,\\n            outRecord.denorm,\\n            _swapFee\\n        );\\n        require(spotPriceAfter >= spotPriceBefore, \\\"ERR_MATH_APPROX\\\");\\n        require(spotPriceAfter <= maxPrice, \\\"ERR_LIMIT_PRICE\\\");\\n        require(spotPriceBefore <= bdiv(tokenAmountIn, tokenAmountOut), \\\"ERR_MATH_APPROX\\\");\\n\\n        emit LOG_SWAP(msg.sender, tokenIn, tokenOut, tokenAmountIn, tokenAmountOut);\\n\\n        _pullUnderlying(tokenIn, msg.sender, tokenAmountIn);\\n        _pushUnderlying(tokenOut, msg.sender, tokenAmountOut);\\n\\n        return (tokenAmountIn, spotPriceAfter);\\n    }\\n\\n    function joinswapExternAmountIn(\\n        address tokenIn,\\n        uint256 tokenAmountIn,\\n        uint256 minPoolAmountOut\\n    ) external _logs_ _lock_ returns (uint256 poolAmountOut) {\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\n        require(_records[tokenIn].bound, \\\"ERR_NOT_BOUND\\\");\\n        require(tokenAmountIn <= bmul(_records[tokenIn].balance, MAX_IN_RATIO), \\\"ERR_MAX_IN_RATIO\\\");\\n\\n        Record storage inRecord = _records[tokenIn];\\n\\n        poolAmountOut = calcPoolOutGivenSingleIn(\\n            inRecord.balance,\\n            inRecord.denorm,\\n            _totalSupply,\\n            _totalWeight,\\n            tokenAmountIn,\\n            _swapFee\\n        );\\n\\n        require(poolAmountOut >= minPoolAmountOut, \\\"ERR_LIMIT_OUT\\\");\\n\\n        inRecord.balance = badd(inRecord.balance, tokenAmountIn);\\n\\n        emit LOG_JOIN(msg.sender, tokenIn, tokenAmountIn);\\n\\n        _mintPoolShare(poolAmountOut);\\n        _pushPoolShare(msg.sender, poolAmountOut);\\n        _pullUnderlying(tokenIn, msg.sender, tokenAmountIn);\\n\\n        return poolAmountOut;\\n    }\\n\\n    function joinswapPoolAmountOut(\\n        address tokenIn,\\n        uint256 poolAmountOut,\\n        uint256 maxAmountIn\\n    ) external _logs_ _lock_ returns (uint256 tokenAmountIn) {\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\n        require(_records[tokenIn].bound, \\\"ERR_NOT_BOUND\\\");\\n\\n        Record storage inRecord = _records[tokenIn];\\n\\n        tokenAmountIn = calcSingleInGivenPoolOut(\\n            inRecord.balance,\\n            inRecord.denorm,\\n            _totalSupply,\\n            _totalWeight,\\n            poolAmountOut,\\n            _swapFee\\n        );\\n\\n        require(tokenAmountIn != 0, \\\"ERR_MATH_APPROX\\\");\\n        require(tokenAmountIn <= maxAmountIn, \\\"ERR_LIMIT_IN\\\");\\n\\n        require(tokenAmountIn <= bmul(_records[tokenIn].balance, MAX_IN_RATIO), \\\"ERR_MAX_IN_RATIO\\\");\\n\\n        inRecord.balance = badd(inRecord.balance, tokenAmountIn);\\n\\n        emit LOG_JOIN(msg.sender, tokenIn, tokenAmountIn);\\n\\n        _mintPoolShare(poolAmountOut);\\n        _pushPoolShare(msg.sender, poolAmountOut);\\n        _pullUnderlying(tokenIn, msg.sender, tokenAmountIn);\\n\\n        return tokenAmountIn;\\n    }\\n\\n    function exitswapPoolAmountIn(\\n        address tokenOut,\\n        uint256 poolAmountIn,\\n        uint256 minAmountOut\\n    ) external _logs_ _lock_ returns (uint256 tokenAmountOut) {\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\n        require(_records[tokenOut].bound, \\\"ERR_NOT_BOUND\\\");\\n\\n        Record storage outRecord = _records[tokenOut];\\n\\n        tokenAmountOut = calcSingleOutGivenPoolIn(\\n            outRecord.balance,\\n            outRecord.denorm,\\n            _totalSupply,\\n            _totalWeight,\\n            poolAmountIn,\\n            _swapFee\\n        );\\n\\n        require(tokenAmountOut >= minAmountOut, \\\"ERR_LIMIT_OUT\\\");\\n\\n        require(tokenAmountOut <= bmul(_records[tokenOut].balance, MAX_OUT_RATIO), \\\"ERR_MAX_OUT_RATIO\\\");\\n\\n        outRecord.balance = bsub(outRecord.balance, tokenAmountOut);\\n\\n        uint256 exitFee = bmul(poolAmountIn, EXIT_FEE);\\n\\n        emit LOG_EXIT(msg.sender, tokenOut, tokenAmountOut);\\n\\n        _pullPoolShare(msg.sender, poolAmountIn);\\n        _burnPoolShare(bsub(poolAmountIn, exitFee));\\n        _pushPoolShare(_factory, exitFee);\\n        _pushUnderlying(tokenOut, msg.sender, tokenAmountOut);\\n\\n        return tokenAmountOut;\\n    }\\n\\n    function exitswapExternAmountOut(\\n        address tokenOut,\\n        uint256 tokenAmountOut,\\n        uint256 maxPoolAmountIn\\n    ) external _logs_ _lock_ returns (uint256 poolAmountIn) {\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\n        require(_records[tokenOut].bound, \\\"ERR_NOT_BOUND\\\");\\n        require(tokenAmountOut <= bmul(_records[tokenOut].balance, MAX_OUT_RATIO), \\\"ERR_MAX_OUT_RATIO\\\");\\n\\n        Record storage outRecord = _records[tokenOut];\\n\\n        poolAmountIn = calcPoolInGivenSingleOut(\\n            outRecord.balance,\\n            outRecord.denorm,\\n            _totalSupply,\\n            _totalWeight,\\n            tokenAmountOut,\\n            _swapFee\\n        );\\n\\n        require(poolAmountIn != 0, \\\"ERR_MATH_APPROX\\\");\\n        require(poolAmountIn <= maxPoolAmountIn, \\\"ERR_LIMIT_IN\\\");\\n\\n        outRecord.balance = bsub(outRecord.balance, tokenAmountOut);\\n\\n        uint256 exitFee = bmul(poolAmountIn, EXIT_FEE);\\n\\n        emit LOG_EXIT(msg.sender, tokenOut, tokenAmountOut);\\n\\n        _pullPoolShare(msg.sender, poolAmountIn);\\n        _burnPoolShare(bsub(poolAmountIn, exitFee));\\n        _pushPoolShare(_factory, exitFee);\\n        _pushUnderlying(tokenOut, msg.sender, tokenAmountOut);\\n\\n        return poolAmountIn;\\n    }\\n\\n    // ==\\n    // 'Underlying' token-manipulation functions make external calls but are NOT locked\\n    // You must `_lock_` or otherwise ensure reentry-safety\\n\\n    function _pullUnderlying(\\n        address erc20,\\n        address from,\\n        uint256 amount\\n    ) internal {\\n        bool xfer = IERC20Balancer(erc20).transferFrom(from, address(this), amount);\\n        require(xfer, \\\"ERR_ERC20_FALSE\\\");\\n    }\\n\\n    function _pushUnderlying(\\n        address erc20,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool xfer = IERC20Balancer(erc20).transfer(to, amount);\\n        require(xfer, \\\"ERR_ERC20_FALSE\\\");\\n    }\\n\\n    function _pullPoolShare(address from, uint256 amount) internal {\\n        _pull(from, amount);\\n    }\\n\\n    function _pushPoolShare(address to, uint256 amount) internal {\\n        _push(to, amount);\\n    }\\n\\n    function _mintPoolShare(uint256 amount) internal {\\n        _mint(amount);\\n    }\\n\\n    function _burnPoolShare(uint256 amount) internal {\\n        _burn(amount);\\n    }\\n}\\n\",\"keccak256\":\"0x776103e689b42b4ab375106ed1183fd14fc7b842ff4eaff52de716cdb1689d92\",\"license\":\"MIT\"},\"contracts/balancer/BToken.sol\":{\"content\":\"// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\nimport \\\"./BNum.sol\\\";\\n\\ninterface IERC20Balancer {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address whom) external view returns (uint256);\\n\\n    function allowance(address src, address dst) external view returns (uint256);\\n\\n    function approve(address dst, uint256 amt) external returns (bool);\\n\\n    function transfer(address dst, uint256 amt) external returns (bool);\\n\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 amt\\n    ) external returns (bool);\\n}\\n\\ncontract BTokenBase is BNum {\\n    mapping(address => uint256) internal _balance;\\n    mapping(address => mapping(address => uint256)) internal _allowance;\\n    uint256 internal _totalSupply;\\n\\n    event Approval(address indexed src, address indexed dst, uint256 amt);\\n    event Transfer(address indexed src, address indexed dst, uint256 amt);\\n\\n    function _mint(uint256 amt) internal {\\n        _balance[address(this)] = badd(_balance[address(this)], amt);\\n        _totalSupply = badd(_totalSupply, amt);\\n        emit Transfer(address(0), address(this), amt);\\n    }\\n\\n    function _burn(uint256 amt) internal {\\n        require(_balance[address(this)] >= amt, \\\"ERR_INSUFFICIENT_BAL\\\");\\n        _balance[address(this)] = bsub(_balance[address(this)], amt);\\n        _totalSupply = bsub(_totalSupply, amt);\\n        emit Transfer(address(this), address(0), amt);\\n    }\\n\\n    function _move(\\n        address src,\\n        address dst,\\n        uint256 amt\\n    ) internal {\\n        require(_balance[src] >= amt, \\\"ERR_INSUFFICIENT_BAL\\\");\\n        _balance[src] = bsub(_balance[src], amt);\\n        _balance[dst] = badd(_balance[dst], amt);\\n        emit Transfer(src, dst, amt);\\n    }\\n\\n    function _push(address to, uint256 amt) internal {\\n        _move(address(this), to, amt);\\n    }\\n\\n    function _pull(address from, uint256 amt) internal {\\n        _move(from, address(this), amt);\\n    }\\n}\\n\\ncontract BToken is BTokenBase, IERC20Balancer {\\n    string private _name = \\\"Balancer Pool Token\\\";\\n    string private _symbol = \\\"BPT\\\";\\n    uint8 private _decimals = 18;\\n\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    function allowance(address src, address dst) external view override returns (uint256) {\\n        return _allowance[src][dst];\\n    }\\n\\n    function balanceOf(address whom) external view override returns (uint256) {\\n        return _balance[whom];\\n    }\\n\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function approve(address dst, uint256 amt) external override returns (bool) {\\n        _allowance[msg.sender][dst] = amt;\\n        emit Approval(msg.sender, dst, amt);\\n        return true;\\n    }\\n\\n    function increaseApproval(address dst, uint256 amt) external returns (bool) {\\n        _allowance[msg.sender][dst] = badd(_allowance[msg.sender][dst], amt);\\n        emit Approval(msg.sender, dst, _allowance[msg.sender][dst]);\\n        return true;\\n    }\\n\\n    function decreaseApproval(address dst, uint256 amt) external returns (bool) {\\n        uint256 oldValue = _allowance[msg.sender][dst];\\n        if (amt > oldValue) {\\n            _allowance[msg.sender][dst] = 0;\\n        } else {\\n            _allowance[msg.sender][dst] = bsub(oldValue, amt);\\n        }\\n        emit Approval(msg.sender, dst, _allowance[msg.sender][dst]);\\n        return true;\\n    }\\n\\n    function transfer(address dst, uint256 amt) external override returns (bool) {\\n        _move(msg.sender, dst, amt);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 amt\\n    ) external override returns (bool) {\\n        require(msg.sender == src || amt <= _allowance[src][msg.sender], \\\"ERR_BTOKEN_BAD_CALLER\\\");\\n        _move(src, dst, amt);\\n        if (msg.sender != src && _allowance[src][msg.sender] != uint256(-1)) {\\n            _allowance[src][msg.sender] = bsub(_allowance[src][msg.sender], amt);\\n            emit Approval(msg.sender, dst, _allowance[src][msg.sender]);\\n        }\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x96a133234ad4896507bb420719cd57c33b17499c87558016adc9fc1b30d78eca\",\"license\":\"MIT\"},\"contracts/libraries/IERC20Full.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IERC20Full is IERC20 {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x228083482ab7326cdb12ae8cb7dcd8d3b805651e35c08c29a7b0a54e0e97fbb0\",\"license\":\"MIT\"},\"contracts/libraries/IOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\ninterface IOwnable {\\n    function getOwner() external view returns (address);\\n\\n    function transferOwnership(address _newOwner) external returns (bool);\\n}\\n\",\"keccak256\":\"0xace52430f7fd5468e14cb5a8f91f66daa9518d8393b257a3d01c5899d4828000\",\"license\":\"MIT\"},\"contracts/libraries/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\nimport \\\"./IOwnable.sol\\\";\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\\"user permissions\\\".\\n */\\nabstract contract Ownable is IOwnable {\\n    address internal owner;\\n\\n    /**\\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n     * account.\\n     */\\n    constructor() {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    function getOwner() public view override returns (address) {\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n     * @param _newOwner The address to transfer ownership to.\\n     */\\n    function transferOwnership(address _newOwner) public override onlyOwner returns (bool) {\\n        require(_newOwner != address(0));\\n        onTransferOwnership(owner, _newOwner);\\n        owner = _newOwner;\\n        return true;\\n    }\\n\\n    // Subclasses of this token may want to send additional logs through the centralized Augur log emitter contract\\n    function onTransferOwnership(address, address) internal virtual;\\n}\\n\",\"keccak256\":\"0x65f237e09612478773b06aa74b21364f4ae25b6c419793be79ab9aa0258e57ef\",\"license\":\"MIT\"},\"contracts/libraries/SafeMathInt256.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\n/**\\n * @title SafeMathInt256\\n * @dev Int256 math operations with safety checks that throw on error\\n */\\nlibrary SafeMathInt256 {\\n    // Signed ints with n bits can range from -2**(n-1) to (2**(n-1) - 1)\\n    int256 private constant INT256_MIN = -2**(255);\\n    int256 private constant INT256_MAX = (2**(255) - 1);\\n\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a * b;\\n        require(a == 0 || c / a == b);\\n        return c;\\n    }\\n\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        // No need to check for dividing by 0 -- Solidity automatically throws on division by 0\\n        int256 c = a / b;\\n        return c;\\n    }\\n\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        require(((a >= 0) && (b >= a - INT256_MAX)) || ((a < 0) && (b <= a - INT256_MIN)));\\n        return a - b;\\n    }\\n\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        require(((a >= 0) && (b <= INT256_MAX - a)) || ((a < 0) && (b >= INT256_MIN - a)));\\n        return a + b;\\n    }\\n\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        if (a <= b) {\\n            return a;\\n        } else {\\n            return b;\\n        }\\n    }\\n\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        if (a >= b) {\\n            return a;\\n        } else {\\n            return b;\\n        }\\n    }\\n\\n    function abs(int256 a) internal pure returns (int256) {\\n        if (a < 0) {\\n            return -a;\\n        }\\n        return a;\\n    }\\n\\n    function getInt256Min() internal pure returns (int256) {\\n        return INT256_MIN;\\n    }\\n\\n    function getInt256Max() internal pure returns (int256) {\\n        return INT256_MAX;\\n    }\\n\\n    // Float [fixed point] Operations\\n    function fxpMul(\\n        int256 a,\\n        int256 b,\\n        int256 base\\n    ) internal pure returns (int256) {\\n        return div(mul(a, b), base);\\n    }\\n\\n    function fxpDiv(\\n        int256 a,\\n        int256 b,\\n        int256 base\\n    ) internal pure returns (int256) {\\n        return div(mul(a, base), b);\\n    }\\n\\n    function sqrt(int256 y) internal pure returns (int256 z) {\\n        if (y > 3) {\\n            int256 x = (y + 1) / 2;\\n            z = y;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x714309025fa79f257ce215aca9bd5bd2b4c1cc5b4e14579fb815da218f8350a5\",\"license\":\"MIT\"},\"contracts/libraries/SafeMathUint256.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\n/**\\n * @title SafeMathUint256\\n * @dev Uint256 math operations with safety checks that throw on error\\n */\\nlibrary SafeMathUint256 {\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b);\\n\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a);\\n        return a - b;\\n    }\\n\\n    function subS(\\n        uint256 a,\\n        uint256 b,\\n        string memory message\\n    ) internal pure returns (uint256) {\\n        require(b <= a, message);\\n        return a - b;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a);\\n        return c;\\n    }\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a <= b) {\\n            return a;\\n        } else {\\n            return b;\\n        }\\n    }\\n\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a >= b) {\\n            return a;\\n        } else {\\n            return b;\\n        }\\n    }\\n\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        if (y > 3) {\\n            uint256 x = (y + 1) / 2;\\n            z = y;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n\\n    function getUint256Min() internal pure returns (uint256) {\\n        return 0;\\n    }\\n\\n    function getUint256Max() internal pure returns (uint256) {\\n        // 2 ** 256 - 1\\n        return 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\\n    }\\n\\n    function isMultipleOf(uint256 a, uint256 b) internal pure returns (bool) {\\n        return a % b == 0;\\n    }\\n\\n    // Float [fixed point] Operations\\n    function fxpMul(\\n        uint256 a,\\n        uint256 b,\\n        uint256 base\\n    ) internal pure returns (uint256) {\\n        return div(mul(a, b), base);\\n    }\\n\\n    function fxpDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 base\\n    ) internal pure returns (uint256) {\\n        return div(mul(a, base), b);\\n    }\\n}\\n\",\"keccak256\":\"0x96f8c0fa44dfb1d34495acebab8f6385d50a34132bd28b02a6589a976f869a87\",\"license\":\"MIT\"},\"contracts/turbo/AbstractMarketFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"../libraries/IERC20Full.sol\\\";\\nimport \\\"../balancer/BPool.sol\\\";\\nimport \\\"./TurboShareTokenFactory.sol\\\";\\nimport \\\"./FeePot.sol\\\";\\n\\nabstract contract AbstractMarketFactory is TurboShareTokenFactory, Ownable {\\n    using SafeMathUint256 for uint256;\\n\\n    // Should always have ID. Others are optional.\\n    // event MarketCreated(uint256 id, address settlementAddress, uint256 endTime, ...);\\n\\n    // Should always have ID. Others are optional.\\n    // event MarketResolved(uint256 id, ...);\\n\\n    event SharesMinted(uint256 id, uint256 amount, address receiver);\\n    event SharesBurned(uint256 id, uint256 amount, address receiver);\\n    event WinningsClaimed(uint256 id, uint256 amount, address indexed receiver);\\n\\n    event SettlementFeeClaimed(address settlementAddress, uint256 amount, address indexed receiver);\\n    event ProtocolFeeClaimed(address protocol, uint256 amount);\\n\\n    event ProtocolChanged(address protocol);\\n    event ProtocolFeeChanged(uint256 fee);\\n    event SettlementFeeChanged(uint256 fee);\\n    event StakerFeeChanged(uint256 fee);\\n\\n    IERC20Full public collateral;\\n    FeePot public feePot;\\n\\n    // fees are out of 1e18 and only apply to new markets\\n    uint256 public stakerFee;\\n    uint256 public settlementFee;\\n    uint256 public protocolFee;\\n\\n    address public protocol; // collects protocol fees\\n\\n    uint256 public accumulatedProtocolFee = 0;\\n    // settlement address => amount of collateral\\n    mapping(address => uint256) public accumulatedSettlementFees;\\n\\n    // How many shares equals one collateral.\\n    // Necessary to account for math errors from small numbers in balancer.\\n    // shares = collateral / shareFactor\\n    // collateral = shares * shareFactor\\n    uint256 public shareFactor;\\n\\n    struct Market {\\n        address settlementAddress;\\n        OwnedERC20[] shareTokens;\\n        uint256 endTime;\\n        OwnedERC20 winner;\\n        uint256 settlementFee;\\n        uint256 protocolFee;\\n        uint256 stakerFee;\\n    }\\n    Market[] internal markets;\\n\\n    uint256 private constant MAX_UINT = 2**256 - 1;\\n\\n    constructor(\\n        address _owner,\\n        IERC20Full _collateral,\\n        uint256 _shareFactor,\\n        FeePot _feePot,\\n        uint256 _stakerFee,\\n        uint256 _settlementFee,\\n        address _protocol,\\n        uint256 _protocolFee\\n    ) {\\n        owner = _owner; // controls fees for new markets\\n        collateral = _collateral;\\n        shareFactor = _shareFactor;\\n        feePot = _feePot;\\n        stakerFee = _stakerFee;\\n        settlementFee = _settlementFee;\\n        protocol = _protocol;\\n        protocolFee = _protocolFee;\\n\\n        _collateral.approve(address(_feePot), MAX_UINT);\\n    }\\n\\n    // function createMarket(address _settlementAddress, uint256 _endTime, ...) public returns (uint256);\\n\\n    function resolveMarket(uint256 _id) public virtual;\\n\\n    // Returns an empty struct if the market doesn't exist.\\n    // As a check of market existence, use `endTime != 0` on the returned struct\\n    function getMarket(uint256 _id) public view returns (Market memory) {\\n        if (_id > markets.length) {\\n            return Market(address(0), new OwnedERC20[](0), 0, OwnedERC20(0), 0, 0, 0);\\n        } else {\\n            return markets[_id];\\n        }\\n    }\\n\\n    function marketCount() public view returns (uint256) {\\n        return markets.length;\\n    }\\n\\n    // Returns factory-specific details about a market.\\n    // function getMarketDetails(uint256 _id) public view returns (MarketDetails memory);\\n\\n    function mintShares(\\n        uint256 _id,\\n        uint256 _shareToMint,\\n        address _receiver\\n    ) public {\\n        Market memory _market = markets[_id];\\n        require(_market.endTime > 0, \\\"No such market\\\");\\n\\n        uint256 _cost = calcCost(_shareToMint);\\n        collateral.transferFrom(msg.sender, address(this), _cost);\\n\\n        for (uint256 _i = 0; _i < _market.shareTokens.length; _i++) {\\n            _market.shareTokens[_i].trustedMint(_receiver, _shareToMint);\\n        }\\n\\n        emit SharesMinted(_id, _shareToMint, _receiver);\\n    }\\n\\n    function burnShares(\\n        uint256 _id,\\n        uint256 _sharesToBurn,\\n        address _receiver\\n    ) public returns (uint256) {\\n        Market memory _market = markets[_id];\\n        require(_market.endTime > 0, \\\"No such market\\\");\\n\\n        for (uint256 _i = 0; _i < _market.shareTokens.length; _i++) {\\n            // errors if sender doesn't have enough shares\\n            _market.shareTokens[_i].trustedBurn(msg.sender, _sharesToBurn);\\n        }\\n\\n        uint256 _payout = calcCost(_sharesToBurn);\\n        uint256 _protocolFee = _payout.mul(_market.protocolFee).div(10**18);\\n        _payout = _payout.sub(_protocolFee);\\n        collateral.transfer(_receiver, _payout);\\n\\n        emit SharesBurned(_id, _sharesToBurn, msg.sender);\\n        return _payout;\\n    }\\n\\n    function claimWinnings(uint256 _id, address _receiver) public returns (uint256) {\\n        if (!isMarketResolved(_id)) {\\n            // errors if market does not exist or is not resolved or resolvable\\n            resolveMarket(_id);\\n        }\\n\\n        Market memory _market = markets[_id];\\n        uint256 _winningShares = _market.winner.trustedBurnAll(msg.sender);\\n        _winningShares = (_winningShares / shareFactor) * shareFactor; // remove unusable dust\\n\\n        uint256 _payout = calcCost(_winningShares);\\n        uint256 _settlementFee = _payout.mul(_market.settlementFee).div(10**18);\\n        uint256 _stakerFee = _payout.mul(_market.stakerFee).div(10**18);\\n        _payout = _payout.sub(_settlementFee).sub(_stakerFee);\\n        collateral.transfer(_receiver, _payout);\\n\\n        emit WinningsClaimed(_id, _winningShares, msg.sender);\\n        return _payout;\\n    }\\n\\n    function claimManyWinnings(uint256[] memory _ids, address _receiver) public returns (uint256) {\\n        uint256 _totalWinnings = 0;\\n        for (uint256 i = 0; i < _ids.length; i++) {\\n            _totalWinnings = _totalWinnings.add(claimWinnings(_ids[i], _receiver));\\n        }\\n        return _totalWinnings;\\n    }\\n\\n    function claimSettlementFees(address _receiver) public returns (uint256) {\\n        uint256 _fees = accumulatedSettlementFees[msg.sender];\\n        accumulatedSettlementFees[msg.sender] = 0;\\n        collateral.transfer(_receiver, _fees);\\n        emit SettlementFeeClaimed(msg.sender, _fees, _receiver);\\n        return _fees;\\n    }\\n\\n    function claimProtocolFees() public returns (uint256) {\\n        require(msg.sender == protocol || msg.sender == address(this), \\\"Only protocol can claim protocol fee\\\");\\n        uint256 _fees = accumulatedProtocolFee;\\n        accumulatedProtocolFee = 0;\\n        collateral.transfer(protocol, _fees);\\n        emit ProtocolFeeClaimed(protocol, _fees);\\n        return _fees;\\n    }\\n\\n    function setSettlementFee(uint256 _newFee) external onlyOwner {\\n        settlementFee = _newFee;\\n        emit SettlementFeeChanged(_newFee);\\n    }\\n\\n    function setStakerFee(uint256 _newFee) external onlyOwner {\\n        stakerFee = _newFee;\\n        emit StakerFeeChanged(_newFee);\\n    }\\n\\n    function setProtocolFee(uint256 _newFee) external onlyOwner {\\n        protocolFee = _newFee;\\n        emit ProtocolFeeChanged(_newFee);\\n    }\\n\\n    function setProtocol(address _newProtocol, bool _claimFirst) external onlyOwner {\\n        if (_claimFirst) {\\n            claimProtocolFees();\\n        }\\n        protocol = _newProtocol;\\n        emit ProtocolChanged(_newProtocol);\\n    }\\n\\n    function makeMarket(\\n        address _settlementAddress,\\n        string[] memory _names,\\n        string[] memory _symbols,\\n        uint256 _endTime\\n    ) internal returns (Market memory _market) {\\n        _market = Market(\\n            _settlementAddress,\\n            createShareTokens(_names, _symbols, address(this)),\\n            _endTime,\\n            OwnedERC20(0),\\n            settlementFee,\\n            protocolFee,\\n            stakerFee\\n        );\\n    }\\n\\n    function isMarketResolved(uint256 _id) public view returns (bool) {\\n        Market memory _market = markets[_id];\\n        return _market.winner != OwnedERC20(0);\\n    }\\n\\n    // shares => collateral\\n    function calcCost(uint256 _shares) public view returns (uint256) {\\n        require(\\n            _shares >= shareFactor && _shares % shareFactor == 0,\\n            \\\"Shares must be both greater than (or equal to) and divisible by shareFactor\\\"\\n        );\\n        return _shares / shareFactor;\\n    }\\n\\n    // collateral => shares\\n    function calcShares(uint256 _collateralIn) public view returns (uint256) {\\n        return _collateralIn * shareFactor;\\n    }\\n\\n    function onTransferOwnership(address, address) internal override {}\\n}\\n\",\"keccak256\":\"0x7483f53b6cddc239fce347ad716087caf11241c84ab62769e56d407a2a956df6\",\"license\":\"MIT\"},\"contracts/turbo/FeePot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"../libraries/SafeMathUint256.sol\\\";\\nimport \\\"../libraries/IERC20Full.sol\\\";\\n\\ncontract FeePot is ERC20 {\\n    using SafeMathUint256 for uint256;\\n\\n    uint256 internal constant magnitude = 2**128;\\n\\n    IERC20Full public collateral;\\n    IERC20Full public reputationToken;\\n\\n    uint256 public magnifiedFeesPerShare;\\n\\n    mapping(address => uint256) public magnifiedFeesCorrections;\\n    mapping(address => uint256) public storedFees;\\n\\n    uint256 public feeReserve;\\n\\n    constructor(IERC20Full _collateral, IERC20Full _reputationToken)\\n        ERC20(\\n            string(abi.encodePacked(\\\"S_\\\", _reputationToken.symbol())),\\n            string(abi.encodePacked(\\\"S_\\\", _reputationToken.symbol()))\\n        )\\n    {\\n        collateral = _collateral;\\n        reputationToken = _reputationToken;\\n\\n        require(_collateral != IERC20Full(0));\\n    }\\n\\n    function depositFees(uint256 _amount) public returns (bool) {\\n        collateral.transferFrom(msg.sender, address(this), _amount);\\n        uint256 _totalSupply = totalSupply(); // after collateral.transferFrom to prevent reentrancy causing stale totalSupply\\n        if (_totalSupply == 0) {\\n            feeReserve = feeReserve.add(_amount);\\n            return true;\\n        }\\n        if (feeReserve > 0) {\\n            _amount = _amount.add(feeReserve);\\n            feeReserve = 0;\\n        }\\n        magnifiedFeesPerShare = magnifiedFeesPerShare.add((_amount).mul(magnitude) / _totalSupply);\\n        return true;\\n    }\\n\\n    function withdrawableFeesOf(address _owner) public view returns (uint256) {\\n        return earnedFeesOf(_owner).add(storedFees[_owner]);\\n    }\\n\\n    function earnedFeesOf(address _owner) public view returns (uint256) {\\n        uint256 _ownerBalance = balanceOf(_owner);\\n        uint256 _magnifiedFees = magnifiedFeesPerShare.mul(_ownerBalance);\\n        return _magnifiedFees.sub(magnifiedFeesCorrections[_owner]) / magnitude;\\n    }\\n\\n    function _transfer(\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) internal override {\\n        storedFees[_from] = storedFees[_from].add(earnedFeesOf(_from));\\n        super._transfer(_from, _to, _amount);\\n\\n        magnifiedFeesCorrections[_from] = magnifiedFeesPerShare.mul(balanceOf(_from));\\n        magnifiedFeesCorrections[_to] = magnifiedFeesCorrections[_to].add(magnifiedFeesPerShare.mul(_amount));\\n    }\\n\\n    function stake(uint256 _amount) external returns (bool) {\\n        reputationToken.transferFrom(msg.sender, address(this), _amount);\\n        _mint(msg.sender, _amount);\\n        magnifiedFeesCorrections[msg.sender] = magnifiedFeesCorrections[msg.sender].add(\\n            magnifiedFeesPerShare.mul(_amount)\\n        );\\n        return true;\\n    }\\n\\n    function exit(uint256 _amount) external returns (bool) {\\n        redeemInternal(msg.sender);\\n        _burn(msg.sender, _amount);\\n        reputationToken.transfer(msg.sender, _amount);\\n        magnifiedFeesCorrections[msg.sender] = magnifiedFeesPerShare.mul(balanceOf(msg.sender));\\n        return true;\\n    }\\n\\n    function redeem() public returns (bool) {\\n        redeemInternal(msg.sender);\\n        magnifiedFeesCorrections[msg.sender] = magnifiedFeesPerShare.mul(balanceOf(msg.sender));\\n        return true;\\n    }\\n\\n    function redeemInternal(address _account) internal {\\n        uint256 _withdrawableFees = withdrawableFeesOf(_account);\\n        if (_withdrawableFees > 0) {\\n            storedFees[_account] = 0;\\n            collateral.transfer(_account, _withdrawableFees);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4189f90e0c0d061643abdea7d166a863801cfedb488a99b018ddc52ff9bdd3b0\",\"license\":\"MIT\"},\"contracts/turbo/OwnedShareToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"../libraries/Ownable.sol\\\";\\n\\ncontract OwnedERC20 is ERC20, Ownable {\\n    constructor(\\n        string memory name_,\\n        string memory symbol_,\\n        address _owner\\n    ) ERC20(name_, symbol_) {\\n        owner = _owner;\\n    }\\n\\n    function trustedTransfer(\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) external onlyOwner {\\n        _transfer(_from, _to, _amount);\\n    }\\n\\n    function trustedMint(address _target, uint256 _amount) external onlyOwner {\\n        _mint(_target, _amount);\\n    }\\n\\n    function trustedBurn(address _target, uint256 _amount) external onlyOwner {\\n        _burn(_target, _amount);\\n    }\\n\\n    function trustedBurnAll(address _target) external onlyOwner returns (uint256) {\\n        uint256 _balance = balanceOf(_target);\\n        _burn(_target, _balance);\\n        return _balance;\\n    }\\n\\n    function onTransferOwnership(address, address) internal override {}\\n}\\n\",\"keccak256\":\"0x1a60d8f5bb07018b446bf34cdc626ab309c5d2db2eaf75575622090af92c0086\",\"license\":\"MIT\"},\"contracts/turbo/SportsLinkMarketFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"../libraries/IERC20Full.sol\\\";\\nimport \\\"../balancer/BPool.sol\\\";\\nimport \\\"./AbstractMarketFactory.sol\\\";\\nimport \\\"./FeePot.sol\\\";\\nimport \\\"../libraries/SafeMathInt256.sol\\\";\\n\\ncontract SportsLinkMarketFactory is AbstractMarketFactory {\\n    using SafeMathUint256 for uint256;\\n    using SafeMathInt256 for int256;\\n\\n    event MarketCreated(\\n        uint256 id,\\n        address creator,\\n        uint256 endTime,\\n        MarketType marketType,\\n        uint256 indexed eventId,\\n        uint256 homeTeamId,\\n        uint256 awayTeamId,\\n        uint256 estimatedStarTime,\\n        int256 score\\n    );\\n    event MarketResolved(uint256 id, address winner);\\n\\n    event LinkNodeChanged(address newLinkNode);\\n\\n    enum MarketType {HeadToHead, Spread, OverUnder}\\n    enum EventStatus {Unknown, Scheduled, Final, Postponed, Canceled}\\n\\n    struct MarketDetails {\\n        uint256 eventId;\\n        uint256 homeTeamId;\\n        uint256 awayTeamId;\\n        uint256 estimatedStartTime;\\n        MarketType marketType;\\n        EventStatus eventStatus;\\n        // This value depends on the marketType.\\n        // HeadToHead: ignored\\n        // Spread: the home team spread\\n        // OverUnder: total score in game\\n        int256 value0;\\n    }\\n    // MarketId => MarketDetails\\n    mapping(uint256 => MarketDetails) internal marketDetails;\\n    // EventId => [MarketId]\\n    mapping(uint256 => uint256[3]) internal events;\\n\\n    address linkNode;\\n\\n    constructor(\\n        address _owner,\\n        IERC20Full _collateral,\\n        uint256 _shareFactor,\\n        FeePot _feePot,\\n        uint256 _stakerFee,\\n        uint256 _settlementFee,\\n        address _protocol,\\n        uint256 _protocolFee,\\n        address _linkNode\\n    )\\n        AbstractMarketFactory(\\n            _owner,\\n            _collateral,\\n            _shareFactor,\\n            _feePot,\\n            _stakerFee,\\n            _settlementFee,\\n            _protocol,\\n            _protocolFee\\n        )\\n    {\\n        linkNode = _linkNode;\\n    }\\n\\n    function createMarket(bytes32 _payload) external returns (uint256[3] memory _ids) {\\n        require(msg.sender == linkNode, \\\"Only link node can create markets\\\");\\n\\n        (\\n            uint256 _eventId,\\n            uint256 _homeTeamId,\\n            uint256 _awayTeamId,\\n            uint256 _startTimestamp,\\n            int256 _homeSpread,\\n            uint256 _totalScore\\n        ) = decodeCreation(_payload);\\n        address _creator = msg.sender;\\n        uint256 _endTime = _startTimestamp.add(60 * 8); // 8 hours\\n\\n        require(!isEventRegistered(_eventId), \\\"Markets already created\\\");\\n\\n        _ids[0] = createHeadToHeadMarket(_creator, _endTime, _eventId, _homeTeamId, _awayTeamId, _startTimestamp);\\n        _ids[1] = createSpreadMarket(\\n            _creator,\\n            _endTime,\\n            _eventId,\\n            _homeTeamId,\\n            _awayTeamId,\\n            _startTimestamp,\\n            _homeSpread\\n        );\\n        _ids[2] = createOverUnderMarket(\\n            _creator,\\n            _endTime,\\n            _eventId,\\n            _homeTeamId,\\n            _awayTeamId,\\n            _startTimestamp,\\n            _totalScore\\n        );\\n\\n        events[_eventId] = _ids;\\n    }\\n\\n    function createHeadToHeadMarket(\\n        address _creator,\\n        uint256 _endTime,\\n        uint256 _eventId,\\n        uint256 _homeTeamId,\\n        uint256 _awayTeamId,\\n        uint256 _startTimestamp\\n    ) internal returns (uint256) {\\n        string[] memory _outcomes = new string[](3);\\n        _outcomes[0] = \\\"No Contest\\\";\\n        _outcomes[1] = \\\"Away\\\";\\n        _outcomes[2] = \\\"Home\\\";\\n\\n        uint256 _id = markets.length;\\n        markets.push(makeMarket(_creator, _outcomes, _outcomes, _endTime));\\n        marketDetails[_id] = MarketDetails(\\n            _eventId,\\n            _homeTeamId,\\n            _awayTeamId,\\n            _startTimestamp,\\n            MarketType.HeadToHead,\\n            EventStatus.Scheduled,\\n            0\\n        );\\n        emit MarketCreated(\\n            _id,\\n            _creator,\\n            _endTime,\\n            MarketType.HeadToHead,\\n            _eventId,\\n            _homeTeamId,\\n            _awayTeamId,\\n            _startTimestamp,\\n            0\\n        );\\n        return _id;\\n    }\\n\\n    function createSpreadMarket(\\n        address _creator,\\n        uint256 _endTime,\\n        uint256 _eventId,\\n        uint256 _homeTeamId,\\n        uint256 _awayTeamId,\\n        uint256 _startTimestamp,\\n        int256 _homeSpread\\n    ) internal returns (uint256) {\\n        string[] memory _outcomes = new string[](3);\\n        _outcomes[0] = \\\"No Contest\\\";\\n        _outcomes[1] = \\\"Away\\\";\\n        _outcomes[2] = \\\"Home\\\";\\n\\n        uint256 _id = markets.length;\\n        markets.push(makeMarket(_creator, _outcomes, _outcomes, _endTime));\\n        marketDetails[_id] = MarketDetails(\\n            _eventId,\\n            _homeTeamId,\\n            _awayTeamId,\\n            _startTimestamp,\\n            MarketType.Spread,\\n            EventStatus.Scheduled,\\n            _homeSpread\\n        );\\n        emit MarketCreated(\\n            _id,\\n            _creator,\\n            _endTime,\\n            MarketType.Spread,\\n            _eventId,\\n            _homeTeamId,\\n            _awayTeamId,\\n            _startTimestamp,\\n            _homeSpread\\n        );\\n        return _id;\\n    }\\n\\n    function createOverUnderMarket(\\n        address _creator,\\n        uint256 _endTime,\\n        uint256 _eventId,\\n        uint256 _homeTeamId,\\n        uint256 _awayTeamId,\\n        uint256 _startTimestamp,\\n        uint256 _overUnderTotal\\n    ) internal returns (uint256) {\\n        string[] memory _outcomes = new string[](3);\\n        _outcomes[0] = \\\"No Contest\\\";\\n        _outcomes[1] = \\\"Over\\\";\\n        _outcomes[2] = \\\"Under\\\";\\n\\n        uint256 _id = markets.length;\\n        markets.push(makeMarket(_creator, _outcomes, _outcomes, _endTime));\\n        marketDetails[_id] = MarketDetails(\\n            _eventId,\\n            _homeTeamId,\\n            _awayTeamId,\\n            _startTimestamp,\\n            MarketType.OverUnder,\\n            EventStatus.Scheduled,\\n            int256(_overUnderTotal)\\n        );\\n        emit MarketCreated(\\n            _id,\\n            _creator,\\n            _endTime,\\n            MarketType.OverUnder,\\n            _eventId,\\n            _homeTeamId,\\n            _awayTeamId,\\n            _startTimestamp,\\n            int256(_overUnderTotal)\\n        );\\n        return _id;\\n    }\\n\\n    function resolveMarket(uint256) public pure override {\\n        require(false, \\\"Only the link node can resolve the market, using trustedResolveMarkets\\\");\\n    }\\n\\n    function trustedResolveMarkets(bytes32 _payload) public {\\n        require(msg.sender == linkNode, \\\"Only link node can resolve markets\\\");\\n\\n        (uint256 _eventId, uint256 _eventStatus, uint256 _homeScore, uint256 _awayScore) = decodeResolution(_payload);\\n        uint256[3] memory _ids = events[_eventId];\\n\\n        // resolve markets as No Contest\\n        if (EventStatus(_eventStatus) != EventStatus.Final) {\\n            for (uint256 i = 0; i < _ids.length; i++) {\\n                uint256 _id = _ids[0];\\n                markets[_id].winner = markets[_id].shareTokens[0];\\n            }\\n            return;\\n        }\\n\\n        resolveHeadToHeadMarket(_ids[0], _homeScore, _awayScore);\\n        resolveSpreadMarket(_ids[1], _homeScore, _awayScore);\\n        resolveOverUnderMarket(_ids[2], _homeScore, _awayScore);\\n    }\\n\\n    function resolveHeadToHeadMarket(\\n        uint256 _id,\\n        uint256 _homeScore,\\n        uint256 _awayScore\\n    ) internal {\\n        OwnedERC20 _winner;\\n        if (_homeScore > _awayScore) {\\n            _winner = markets[_id].shareTokens[2];\\n        } else if (_homeScore < _awayScore) {\\n            _winner = markets[_id].shareTokens[1];\\n        } else {\\n            _winner = markets[_id].shareTokens[0];\\n        }\\n\\n        markets[_id].winner = _winner;\\n        emit MarketResolved(_id, address(_winner));\\n    }\\n\\n    function resolveSpreadMarket(\\n        uint256 _id,\\n        uint256 _homeScore,\\n        uint256 _awayScore\\n    ) internal {\\n        MarketDetails memory _details = marketDetails[_id];\\n        int256 _targetSpread = _details.value0;\\n\\n        int256 _actualSpread = int256(_homeScore).sub(int256(_awayScore));\\n\\n        OwnedERC20 _winner;\\n        if (_actualSpread > _targetSpread) {\\n            _winner = markets[_id].shareTokens[2];\\n        } else if (_actualSpread < _targetSpread) {\\n            _winner = markets[_id].shareTokens[1];\\n        } else {\\n            _winner = markets[_id].shareTokens[0];\\n        }\\n\\n        markets[_id].winner = _winner;\\n        emit MarketResolved(_id, address(_winner));\\n    }\\n\\n    function resolveOverUnderMarket(\\n        uint256 _id,\\n        uint256 _homeScore,\\n        uint256 _awayScore\\n    ) internal {\\n        MarketDetails memory _details = marketDetails[_id];\\n        int256 _targetTotal = _details.value0;\\n\\n        int256 _actualTotal = int256(_homeScore).add(int256(_awayScore));\\n\\n        OwnedERC20 _winner;\\n        if (_actualTotal > _targetTotal) {\\n            _winner = markets[_id].shareTokens[2];\\n        } else if (_actualTotal < _targetTotal) {\\n            _winner = markets[_id].shareTokens[1];\\n        } else {\\n            _winner = markets[_id].shareTokens[0];\\n        }\\n\\n        markets[_id].winner = _winner;\\n        emit MarketResolved(_id, address(_winner));\\n    }\\n\\n    function getMarketDetails(uint256 _marketId) public view returns (MarketDetails memory) {\\n        return marketDetails[_marketId];\\n    }\\n\\n    function changeLinkNode(address _newLinkNode) external onlyOwner {\\n        linkNode = _newLinkNode;\\n        emit LinkNodeChanged(_newLinkNode);\\n    }\\n\\n    function isEventRegistered(uint256 _eventId) public view returns (bool) {\\n        // The first market id could be zero, so use another one that can't.\\n        return events[_eventId][2] != 0;\\n    }\\n\\n    function isEventResolved(uint256 _eventId) public view returns (bool) {\\n        uint256 _marketId = events[_eventId][2];\\n        return isMarketResolved(_marketId);\\n    }\\n\\n    function encodeCreation(\\n        uint128 _eventId,\\n        uint16 _homeTeamId,\\n        uint16 _awayTeamId,\\n        uint32 _startTimestamp,\\n        int16 _homeSpread,\\n        uint16 _totalScore\\n    ) external pure returns (bytes32 _payload) {\\n        bytes memory _a =\\n            abi.encodePacked(_eventId, _homeTeamId, _awayTeamId, _startTimestamp, _homeSpread, _totalScore);\\n        assembly {\\n            _payload := mload(add(_a, 32))\\n        }\\n    }\\n\\n    function decodeCreation(bytes32 _payload)\\n        public\\n        pure\\n        returns (\\n            uint128 _eventId,\\n            uint16 _homeTeamId,\\n            uint16 _awayTeamId,\\n            uint32 _startTimestamp,\\n            int16 _homeSpread,\\n            uint16 _totalScore\\n        )\\n    {\\n        uint256 _temp = uint256(_payload);\\n        // prettier-ignore\\n        {\\n            _eventId        = uint128(_temp >> 128);\\n            _homeTeamId     = uint16((_temp << 128)                       >> (256 - 16));\\n            _awayTeamId     = uint16((_temp << (128 + 16))                >> (256 - 16));\\n            _startTimestamp = uint32((_temp << (128 + 16 + 16))           >> (256 - 32));\\n            _homeSpread     = int16 ((_temp << (128 + 16 + 16 + 32))      >> (256 - 16));\\n            _totalScore     = uint16((_temp << (128 + 16 + 16 + 32 + 16)) >> (256 - 16));\\n        }\\n    }\\n\\n    function encodeResolution(\\n        uint128 _eventId,\\n        uint8 _eventStatus,\\n        uint16 _homeScore,\\n        uint16 _awayScore\\n    ) external pure returns (bytes32 _payload) {\\n        bytes memory _a = abi.encodePacked(_eventId, _eventStatus, _homeScore, _awayScore);\\n        assembly {\\n            _payload := mload(add(_a, 32))\\n        }\\n    }\\n\\n    function decodeResolution(bytes32 _payload)\\n        public\\n        pure\\n        returns (\\n            uint128 _eventId,\\n            uint8 _eventStatus,\\n            uint16 _homeScore,\\n            uint16 _awayScore\\n        )\\n    {\\n        uint256 _temp = uint256(_payload);\\n        // prettier-ignore\\n        {\\n            _eventId     = uint128(_temp >> 128);\\n            _eventStatus = uint8 ((_temp << 128)            >> (256 - 8));\\n            _homeScore   = uint16((_temp << (128 + 8))      >> (256 - 16));\\n            _awayScore   = uint16((_temp << (128 + 8 + 16)) >> (256 - 16));\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa8d09f7ee02cdb2afde1700a898b7058c59c21961308123a74ce49abe40bafae\",\"license\":\"MIT\"},\"contracts/turbo/TurboShareTokenFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"./OwnedShareToken.sol\\\";\\n\\nabstract contract TurboShareTokenFactory {\\n    function createShareTokens(\\n        string[] memory _names,\\n        string[] memory _symbols,\\n        address _owner\\n    ) internal returns (OwnedERC20[] memory) {\\n        uint256 _numOutcomes = _names.length;\\n        OwnedERC20[] memory _tokens = new OwnedERC20[](_numOutcomes);\\n\\n        for (uint256 _i = 0; _i < _numOutcomes; _i++) {\\n            _tokens[_i] = new OwnedERC20(_names[_i], _symbols[_i], _owner);\\n        }\\n        return _tokens;\\n    }\\n}\\n\",\"keccak256\":\"0x31865ce6e401897696c2716d76e2882ff105283603556f61814b5874cd7d32a9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b50600436106200025c5760003560e01c80638ce74426116200014d578063bff838bf11620000c9578063e5678dfa1162000087578063e5678dfa146200053b578063e8766d761462000552578063eb44fdd31462000569578063ec979082146200058f578063f2fde38b1462000599576200025c565b8063bff838bf14620004c1578063cc87adea14620004d8578063d5da4f1d14620004ef578063d8dfeb451462000506578063db747ac91462000510576200025c565b8063a17944961162000117578063a17944961462000459578063a544a62c1462000470578063b06c1ba3146200047a578063b0e21e8a14620004a0578063b65ad5fd14620004aa576200025c565b80638ce74426146200040a5780638e0ed193146200041457806397eef187146200042b578063992c90791462000442576200025c565b80634c9f66c711620001dd5780637641ab0111620001a75780637641ab0114620003be578063787dce3d14620003c85780637d1d7fb814620003df5780638580c50414620003e9578063893d20e81462000400576200025c565b80634c9f66c7146200035157806353ac55f5146200036a578063575717b014620003905780636399d03d14620003a7576200025c565b806335a9cdad116200022b57806335a9cdad14620002e9578063473a6d52146200030f57806349a4d93414620003265780634a7d0369146200033d5780634b2d9ffc1462000347576200025c565b8063221fff8114620002615780632243118a146200027a5780632745917914620002a957806332ecabe914620002d2575b600080fd5b620002786200027236600462002d76565b620005b0565b005b620002916200028b36600462002c24565b62000834565b604051620002a0919062002f14565b60405180910390f35b620002c0620002ba36600462002c24565b6200095d565b604051620002a09493929190620032f7565b62000278620002e336600462002b00565b62000981565b62000300620002fa36600462002d76565b62000a05565b604051620002a0919062002f52565b620003006200032036600462002c24565b62000cc1565b620003006200033736600462002ae3565b62000d14565b6200030062000d26565b6200030062000e47565b6200035b62000e4d565b604051620002a0919062002ec3565b620003816200037b36600462002c24565b62000e5c565b604051620002a0919062002f47565b62000278620003a136600462002c24565b62000f4b565b62000278620003b836600462002c24565b620010fa565b6200030062001114565b62000278620003d936600462002c24565b6200111a565b6200030062001174565b62000300620003fa36600462002ccd565b6200117a565b6200035b620011b4565b6200035b620011c3565b620003006200042536600462002ae3565b620011d2565b620002786200043c36600462002c24565b620012bd565b620003006200045336600462002d48565b6200130c565b620003816200046a36600462002c24565b62001617565b620003006200163b565b620004916200048b36600462002c24565b62001641565b604051620002a09190620031a0565b6200030062001700565b62000381620004bb36600462002c24565b62001706565b62000278620004d236600462002ae3565b6200171d565b62000300620004e936600462002c24565b62001782565b620002786200050036600462002c24565b62001789565b6200035b620017d8565b620005276200052136600462002c24565b620017e7565b604051620002a096959493929190620032b4565b620003006200054c36600462002b3b565b6200181b565b620003006200056336600462002c3d565b62001869565b620005806200057a36600462002c24565b620018a9565b604051620002a0919062003206565b62000300620019e4565b62000381620005aa36600462002ae3565b620019ea565b6000600a8481548110620005c057fe5b60009182526020918290206040805160e081018252600790930290910180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156200064357602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831162000624575b50505091835250506002820154602082015260038201546001600160a01b0316604080830191909152600483015460608301526005830154608083015260069092015460a090910152810151909150620006ba5760405162461bcd60e51b8152600401620006b190620030ff565b60405180910390fd5b6000620006c78462000cc1565b6001546040516323b872dd60e01b81529192506001600160a01b0316906323b872dd90620006fe9033903090869060040162002ed7565b602060405180830381600087803b1580156200071957600080fd5b505af11580156200072e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000754919062002c05565b5060005b826020015151811015620007ef57826020015181815181106200077757fe5b60200260200101516001600160a01b031663c024cd2685876040518363ffffffff1660e01b8152600401620007ae92919062002efb565b600060405180830381600087803b158015620007c957600080fd5b505af1158015620007de573d6000803e3d6000fd5b505060019092019150620007589050565b507fd81c0442e10068a9818f3aa093c9ccb804584690df572d7df3da2d892a6973f285858560405162000825939291906200339e565b60405180910390a15050505050565b6200083e6200292a565b600d546001600160a01b031633146200086b5760405162461bcd60e51b8152600401620006b190620030be565b6000806000806000806200087f88620017e7565b61ffff16955060010b955063ffffffff16955061ffff16955061ffff1695506001600160801b0316955060003390506000620008c76101e08662001a5490919063ffffffff16565b9050620008d48862001706565b15620008f45760405162461bcd60e51b8152600401620006b19062003169565b6200090482828a8a8a8a62001a67565b89526200091782828a8a8a8a8a62001d38565b60208a01526200092d82828a8a8a8a8962002008565b6040808b01919091526000898152600c602052206200094f908a600362002948565b505050505050505050919050565b608081901c9160ff607883901c169161ffff606882901c81169260589290921c1690565b6000546001600160a01b031633146200099957600080fd5b8015620009ac57620009aa62000d26565b505b600680546001600160a01b0319166001600160a01b0384161790556040517f15b84596b3c567ae2998116949ae5f2d47f3055c12d9053db4d6e50f4c794dd990620009f990849062002ec3565b60405180910390a15050565b600080600a858154811062000a1657fe5b60009182526020918290206040805160e081018252600790930290910180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801562000a9957602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831162000a7a575b50505091835250506002820154602082015260038201546001600160a01b0316604080830191909152600483015460608301526005830154608083015260069092015460a09091015281015190915062000b075760405162461bcd60e51b8152600401620006b190620030ff565b60005b81602001515181101562000ba1578160200151818151811062000b2957fe5b60200260200101516001600160a01b03166342986e1333876040518363ffffffff1660e01b815260040162000b6092919062002efb565b600060405180830381600087803b15801562000b7b57600080fd5b505af115801562000b90573d6000803e3d6000fd5b50506001909201915062000b0a9050565b50600062000baf8562000cc1565b9050600062000be0670de0b6b3a764000062000bd98560a0015185620022c390919063ffffffff16565b90620022ee565b905062000bee828262002304565b60015460405163a9059cbb60e01b81529193506001600160a01b03169063a9059cbb9062000c23908890869060040162002efb565b602060405180830381600087803b15801562000c3e57600080fd5b505af115801562000c53573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000c79919062002c05565b507fb6fdb729b2ed801daf629f0ab713e4a7a73619505790f6f27fd92d6f2c9688d787873360405162000caf939291906200339e565b60405180910390a15095945050505050565b6000600954821015801562000ce05750600954828162000cdd57fe5b06155b62000cff5760405162461bcd60e51b8152600401620006b1906200304d565b600954828162000d0b57fe5b0490505b919050565b60086020526000908152604090205481565b6006546000906001600160a01b031633148062000d4257503330145b62000d615760405162461bcd60e51b8152600401620006b19062002f9d565b60078054600090915560015460065460405163a9059cbb60e01b81526001600160a01b039283169263a9059cbb9262000da292911690859060040162002efb565b602060405180830381600087803b15801562000dbd57600080fd5b505af115801562000dd2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000df8919062002c05565b506006546040517f0f7f5b155b0b0ac6890709a2c7bf1b8bb3f675fff1e7840b4dd3c9acde59048b9162000e3a916001600160a01b0390911690849062002efb565b60405180910390a1905090565b60035481565b6002546001600160a01b031681565b600080600a838154811062000e6d57fe5b60009182526020918290206040805160e081018252600790930290910180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801562000ef057602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831162000ed1575b50505091835250506002820154602082015260038201546001600160a01b03908116604083015260048301546060808401919091526005840154608084015260069093015460a0909201919091529101511615159392505050565b600d546001600160a01b0316331462000f785760405162461bcd60e51b8152600401620006b19062003127565b60008060008062000f89856200095d565b6001600160801b03939093166000818152600c602052604080822081516060810192839052939a5060ff95909516985061ffff9384169750929094169450919060039082845b81548152602001906001019080831162000fcf57509394506002935062000ff592505050565b8460048111156200100257fe5b60048111156200100e57fe5b14620010be5760005b6003811015620010b2578151600a8054829081106200103257fe5b90600052602060002090600702016001016000815481106200105057fe5b600091825260209091200154600a80546001600160a01b0390921691839081106200107757fe5b6000918252602090912060079091020160030180546001600160a01b0319166001600160a01b03929092169190911790555060010162001017565b505050505050620010f7565b8051620010cd9084846200231a565b6020810151620010df9084846200246c565b6040810151620010f19084846200267d565b50505050505b50565b60405162461bcd60e51b8152600401620006b19062002fe1565b60095481565b6000546001600160a01b031633146200113257600080fd5b60058190556040517fada2cde3c4a561f5c23e2fdbfb223e1f0d1ec7109b9811b32644e6e974d6631f906200116990839062002f52565b60405180910390a150565b60045481565b6000808585858560405160200162001196949392919062002e77565b60408051601f19818403018152919052602001519695505050505050565b6000546001600160a01b031690565b6006546001600160a01b031681565b33600090815260086020526040808220805490839055600154915163a9059cbb60e01b815290916001600160a01b03169063a9059cbb906200121b908690859060040162002efb565b602060405180830381600087803b1580156200123657600080fd5b505af11580156200124b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001271919062002c05565b50826001600160a01b03167fc9985ad824d943d66367ce5feea26e18979b3e1c9273742926d87e2b0d7473873383604051620012af92919062002efb565b60405180910390a292915050565b6000546001600160a01b03163314620012d557600080fd5b60038190556040517fcc4df50442ac32f0142ba4853f617661e0823be0e92148e7e5f36ce56c139825906200116990839062002f52565b6000620013198362000e5c565b62001329576200132983620010fa565b6000600a84815481106200133957fe5b60009182526020918290206040805160e081018252600790930290910180546001600160a01b03168352600181018054835181870281018701909452808452939491938583019392830182828015620013bc57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116200139d575b50505050508152602001600282015481526020016003820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b0316815260200160048201548152602001600582015481526020016006820154815250509050600081606001516001600160a01b03166371297784336040518263ffffffff1660e01b815260040162001452919062002ec3565b602060405180830381600087803b1580156200146d57600080fd5b505af115801562001482573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620014a8919062002d2f565b90506009546009548281620014b957fe5b040290506000620014ca8262000cc1565b90506000620014f4670de0b6b3a764000062000bd9866080015185620022c390919063ffffffff16565b905060006200151e670de0b6b3a764000062000bd98760c0015186620022c390919063ffffffff16565b9050620015388162001531858562002304565b9062002304565b60015460405163a9059cbb60e01b81529194506001600160a01b03169063a9059cbb906200156d908a90879060040162002efb565b602060405180830381600087803b1580156200158857600080fd5b505af11580156200159d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620015c3919062002c05565b50336001600160a01b03167f2bdd7a5109193ce6270ec3b4afcf4ccd4a06c27742ba11f660498cb41433bb0089866040516200160192919062003390565b60405180910390a2509093505050505b92915050565b6000818152600c6020526040812060020154620016348162000e5c565b9392505050565b60075481565b6200164b6200298b565b600b60008381526020019081526020016000206040518060e0016040529081600082015481526020016001820154815260200160028201548152602001600382015481526020016004820160009054906101000a900460ff166002811115620016b057fe5b6002811115620016bc57fe5b81526020016004820160019054906101000a900460ff166004811115620016df57fe5b6004811115620016eb57fe5b81526020016005820154815250509050919050565b60055481565b6000908152600c6020526040902060020154151590565b6000546001600160a01b031633146200173557600080fd5b600d80546001600160a01b0319166001600160a01b0383161790556040517f6b7517523482c8d89ffbc530829d5decd506cf6dc60874b11fa26c8a53bb9fa9906200116990839062002ec3565b6009540290565b6000546001600160a01b03163314620017a157600080fd5b60048190556040517f92d395c429898992f8532ee7145901513e524c2085fd7fd1da39b8badcd6df31906200116990839062002f52565b6001546001600160a01b031681565b608081901c9161ffff607083901c811692606081901c82169263ffffffff604083901c1692603083901c81169260201c1690565b600080805b84518110156200186157620018566200184e8683815181106200183f57fe5b6020026020010151866200130c565b839062001a54565b915060010162001820565b509392505050565b600080878787878787604051602001620018899695949392919062002e17565b60408051601f198184030181529190526020015198975050505050505050565b620018b3620029d4565b600a548211156200190657506040805160e0810182526000808252825181815260208082018552830152918101829052606081018290526080810182905260a0810182905260c081019190915262000d0f565b600a82815481106200191457fe5b60009182526020918290206040805160e081018252600790930290910180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156200199757602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831162001978575b50505091835250506002820154602082015260038201546001600160a01b03166040820152600482015460608201526005820154608082015260069091015460a090910152905062000d0f565b600a5490565b600080546001600160a01b0316331462001a0357600080fd5b6001600160a01b03821662001a1757600080fd5b60005462001a2f906001600160a01b03168362002737565b50600080546001600160a01b0383166001600160a01b03199091161790556001919050565b6000828201838110156200163457600080fd5b60408051600380825260808201909252600091829190816020015b606081526020019060019003908162001a825790505090506040518060400160405280600a815260200169139bc810dbdb9d195cdd60b21b8152508160008151811062001acb57fe5b6020026020010181905250604051806040016040528060048152602001634177617960e01b8152508160018151811062001b0157fe5b602002602001018190525060405180604001604052806004815260200163486f6d6560e01b8152508160028151811062001b3757fe5b6020908102919091010152600a80549062001b558a84808c6200273b565b8154600180820184556000938452602093849020835160079093020180546001600160a01b0319166001600160a01b039093169290921782558284015180519394929362001bac9392850192919091019062002a23565b506040820151816002015560608201518160030160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506080820151816004015560a0820151816005015560c0820151816006015550506040518060e001604052808881526020018781526020018681526020018581526020016000600281111562001c3557fe5b8152602001600181526020016000815250600b60008381526020019081526020016000206000820151816000015560208201518160010155604082015181600201556060820151816003015560808201518160040160006101000a81548160ff0219169083600281111562001ca657fe5b021790555060a08201518160040160016101000a81548160ff0219169083600481111562001cd057fe5b021790555060c08201518160050155905050867fafad6545e5200f9fdf4db34dfca61a9e7d72518593fd5155d11fd69c20e1555f828b8b60008b8b8b600060405162001d249897969594939291906200333e565b60405180910390a298975050505050505050565b60408051600380825260808201909252600091829190816020015b606081526020019060019003908162001d535790505090506040518060400160405280600a815260200169139bc810dbdb9d195cdd60b21b8152508160008151811062001d9c57fe5b6020026020010181905250604051806040016040528060048152602001634177617960e01b8152508160018151811062001dd257fe5b602002602001018190525060405180604001604052806004815260200163486f6d6560e01b8152508160028151811062001e0857fe5b6020908102919091010152600a80549062001e268b84808d6200273b565b8154600180820184556000938452602093849020835160079093020180546001600160a01b0319166001600160a01b039093169290921782558284015180519394929362001e7d9392850192919091019062002a23565b506040820151816002015560608201518160030160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506080820151816004015560a0820151816005015560c0820151816006015550506040518060e001604052808981526020018881526020018781526020018681526020016001600281111562001f0657fe5b81526020016001815260200185815250600b60008381526020019081526020016000206000820151816000015560208201518160010155604082015181600201556060820151816003015560808201518160040160006101000a81548160ff0219169083600281111562001f7657fe5b021790555060a08201518160040160016101000a81548160ff0219169083600481111562001fa057fe5b021790555060c08201518160050155905050877fafad6545e5200f9fdf4db34dfca61a9e7d72518593fd5155d11fd69c20e1555f828c8c60018c8c8c8c60405162001ff39897969594939291906200333e565b60405180910390a29998505050505050505050565b60408051600380825260808201909252600091829190816020015b6060815260200190600190039081620020235790505090506040518060400160405280600a815260200169139bc810dbdb9d195cdd60b21b815250816000815181106200206c57fe5b60200260200101819052506040518060400160405280600481526020016327bb32b960e11b81525081600181518110620020a257fe5b6020026020010181905250604051806040016040528060058152602001642ab73232b960d91b81525081600281518110620020d957fe5b6020908102919091010152600a805490620020f78b84808d6200273b565b8154600180820184556000938452602093849020835160079093020180546001600160a01b0319166001600160a01b03909316929092178255828401518051939492936200214e9392850192919091019062002a23565b506040820151816002015560608201518160030160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506080820151816004015560a0820151816005015560c0820151816006015550506040518060e00160405280898152602001888152602001878152602001868152602001600280811115620021d657fe5b81526020016001815260200185815250600b60008381526020019081526020016000206000820151816000015560208201518160010155604082015181600201556060820151816003015560808201518160040160006101000a81548160ff021916908360028111156200224657fe5b021790555060a08201518160040160016101000a81548160ff021916908360048111156200227057fe5b021790555060c08201518160050155905050877fafad6545e5200f9fdf4db34dfca61a9e7d72518593fd5155d11fd69c20e1555f828c8c60028c8c8c8c60405162001ff39897969594939291906200333e565b600082620022d45750600062001611565b82820282848281620022e257fe5b04146200163457600080fd5b600080828481620022fb57fe5b04949350505050565b6000828211156200231457600080fd5b50900390565b6000818311156200236e57600a84815481106200233357fe5b90600052602060002090600702016001016002815481106200235157fe5b6000918252602090912001546001600160a01b03169050620023e7565b81831015620023a357600a84815481106200238557fe5b90600052602060002090600702016001016001815481106200235157fe5b600a8481548110620023b157fe5b9060005260206000209060070201600101600081548110620023cf57fe5b6000918252602090912001546001600160a01b031690505b80600a8581548110620023f657fe5b906000526020600020906007020160030160006101000a8154816001600160a01b0302191690836001600160a01b031602179055507fc68d106ea6e4bec784925cfd91767212c71ced92adbac107dc364435321113f684826040516200245e92919062003327565b60405180910390a150505050565b6000838152600b60209081526040808320815160e08101835281548152600182015493810193909352600280820154928401929092526003810154606084015260048101549091608084019160ff1690811115620024c657fe5b6002811115620024d257fe5b81526020016004820160019054906101000a900460ff166004811115620024f557fe5b60048111156200250157fe5b81526005919091015460209091015260c08101519091506000620025268585620027a7565b90506000828213156200257c57600a87815481106200254157fe5b90600052602060002090600702016001016002815481106200255f57fe5b6000918252602090912001546001600160a01b03169050620025f5565b82821215620025b157600a87815481106200259357fe5b90600052602060002090600702016001016001815481106200255f57fe5b600a8781548110620025bf57fe5b9060005260206000209060070201600101600081548110620025dd57fe5b6000918252602090912001546001600160a01b031690505b80600a88815481106200260457fe5b906000526020600020906007020160030160006101000a8154816001600160a01b0302191690836001600160a01b031602179055507fc68d106ea6e4bec784925cfd91767212c71ced92adbac107dc364435321113f687826040516200266c92919062003327565b60405180910390a150505050505050565b6000838152600b60209081526040808320815160e08101835281548152600182015493810193909352600280820154928401929092526003810154606084015260048101549091608084019160ff1690811115620026d757fe5b6002811115620026e357fe5b81526020016004820160019054906101000a900460ff1660048111156200270657fe5b60048111156200271257fe5b81526005919091015460209091015260c08101519091506000620025268585620027eb565b5050565b62002745620029d4565b6040518060e00160405280866001600160a01b031681526020016200276c86863062002834565b815260200183815260200160006001600160a01b03168152602001600454815260200160055481526020016003548152509050949350505050565b6000808312158015620027c357506001600160ff1b0383038212155b80620027e15750600083128015620027e15750600160ff1b83038213155b6200231457600080fd5b6000808312158015620028075750826001600160ff1b03038213155b8062002825575060008312801562002825575082600160ff1b038212155b6200282f57600080fd5b500190565b825160609060008167ffffffffffffffff811180156200285357600080fd5b506040519080825280602002602001820160405280156200287e578160200160208202803683370190505b50905060005b8281101562002920578681815181106200289a57fe5b6020026020010151868281518110620028af57fe5b602002602001015186604051620028c69062002a7b565b620028d49392919062002f5b565b604051809103906000f080158015620028f1573d6000803e3d6000fd5b50828281518110620028ff57fe5b6001600160a01b039092166020928302919091019091015260010162002884565b5095945050505050565b60405180606001604052806003906020820280368337509192915050565b826003810192821562002979579160200282015b82811115620029795782518255916020019190600101906200295c565b506200298792915062002a89565b5090565b6040518060e001604052806000815260200160008152602001600081526020016000815260200160006002811115620029c057fe5b815260200160008152602001600081525090565b6040518060e0016040528060006001600160a01b03168152602001606081526020016000815260200160006001600160a01b031681526020016000815260200160008152602001600081525090565b82805482825590600052602060002090810192821562002979579160200282015b828111156200297957825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019062002a44565b6111f380620033cd83390190565b5b8082111562002987576000815560010162002a8a565b80356001600160a01b038116811462000d0f57600080fd5b80356001600160801b038116811462000d0f57600080fd5b803561ffff8116811462000d0f57600080fd5b60006020828403121562002af5578081fd5b620016348262002aa0565b6000806040838503121562002b13578081fd5b62002b1e8362002aa0565b9150602083013562002b3081620033bd565b809150509250929050565b6000806040838503121562002b4e578182fd5b823567ffffffffffffffff8082111562002b66578384fd5b818501915085601f83011262002b7a578384fd5b813560208282111562002b8957fe5b8082026040518282820101818110868211171562002ba357fe5b604052838152828101945085830182870184018b101562002bc2578889fd5b8896505b8487101562002be657803586526001969096019594830194830162002bc6565b50965062002bf8905087820162002aa0565b9450505050509250929050565b60006020828403121562002c17578081fd5b81516200163481620033bd565b60006020828403121562002c36578081fd5b5035919050565b60008060008060008060c0878903121562002c56578182fd5b62002c618762002ab8565b955062002c716020880162002ad0565b945062002c816040880162002ad0565b9350606087013563ffffffff8116811462002c9a578283fd5b92506080870135600181900b811462002cb1578283fd5b915062002cc160a0880162002ad0565b90509295509295509295565b6000806000806080858703121562002ce3578384fd5b62002cee8562002ab8565b9350602085013560ff8116811462002d04578384fd5b925062002d146040860162002ad0565b915062002d246060860162002ad0565b905092959194509250565b60006020828403121562002d41578081fd5b5051919050565b6000806040838503121562002d5b578182fd5b8235915062002d6d6020840162002aa0565b90509250929050565b60008060006060848603121562002d8b578283fd5b833592506020840135915062002da46040850162002aa0565b90509250925092565b6001600160a01b03169052565b6003811062002dc557fe5b9052565b60008151808452815b8181101562002df05760208185018101518683018201520162002dd2565b8181111562002e025782602083870101525b50601f01601f19169290920160200192915050565b60809690961b6001600160801b031916865260f094851b6001600160f01b0319908116601088015293851b8416601287015260e09290921b6001600160e01b031916601486015260010b831b601885015290911b16601a820152601c0190565b60809490941b6001600160801b031916845260f89290921b6001600160f81b031916601084015260f090811b6001600160f01b0319908116601185015291901b16601382015260150190565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b60608101818360005b600381101562002f3e57815183526020928301929091019060010162002f1d565b50505092915050565b901515815260200190565b90815260200190565b60006060825262002f70606083018662002dc9565b828103602084015262002f84818662002dc9565b91505060018060a01b0383166040830152949350505050565b60208082526024908201527f4f6e6c792070726f746f636f6c2063616e20636c61696d2070726f746f636f6c6040820152632066656560e01b606082015260800190565b60208082526046908201527f4f6e6c7920746865206c696e6b206e6f64652063616e207265736f6c7665207460408201527f6865206d61726b65742c207573696e6720747275737465645265736f6c76654d60608201526561726b65747360d01b608082015260a00190565b6020808252604b908201527f536861726573206d75737420626520626f74682067726561746572207468616e60408201527f20286f7220657175616c20746f2920616e6420646976697369626c652062792060608201526a39b430b932a330b1ba37b960a91b608082015260a00190565b60208082526021908201527f4f6e6c79206c696e6b206e6f64652063616e20637265617465206d61726b65746040820152607360f81b606082015260800190565b6020808252600e908201526d139bc81cdd58da081b585c9ad95d60921b604082015260600190565b60208082526022908201527f4f6e6c79206c696e6b206e6f64652063616e207265736f6c7665206d61726b65604082015261747360f01b606082015260800190565b60208082526017908201527f4d61726b65747320616c72656164792063726561746564000000000000000000604082015260600190565b600060e082019050825182526020830151602083015260408301516040830152606083015160608301526080830151620031de608084018262002dba565b5060a083015160058110620031ef57fe5b8060a08401525060c083015160c083015292915050565b602080825282516001600160a01b03908116838301528382015160e060408501528051610100850181905260009392918301919084906101208701905b80831015620032675784518416825293850193600192909201919085019062003243565b50604088015160608801526060880151945062003288608088018662002dad565b608088015160a088015260a088015160c088015260c088015160e0880152809550505050505092915050565b6001600160801b0396909616865261ffff9485166020870152928416604086015263ffffffff91909116606085015260010b60808401521660a082015260c00190565b6001600160801b0394909416845260ff92909216602084015261ffff908116604084015216606082015260800190565b9182526001600160a01b0316602082015260400190565b8881526001600160a01b03881660208201526040810187905261010081016200336b606083018862002dba565b8560808301528460a08301528360c08301528260e08301529998505050505050505050565b918252602082015260400190565b92835260208301919091526001600160a01b0316604082015260600190565b8015158114620010f757600080fdfe60806040523480156200001157600080fd5b50604051620011f3380380620011f3833981810160405260608110156200003757600080fd5b81019080805160405193929190846401000000008211156200005857600080fd5b9083019060208201858111156200006e57600080fd5b82516401000000008111828201881017156200008957600080fd5b82525081516020918201929091019080838360005b83811015620000b85781810151838201526020016200009e565b50505050905090810190601f168015620000e65780820380516001836020036101000a031916815260200191505b50604052602001805160405193929190846401000000008211156200010a57600080fd5b9083019060208201858111156200012057600080fd5b82516401000000008111828201881017156200013b57600080fd5b82525081516020918201929091019080838360005b838110156200016a57818101518382015260200162000150565b50505050905090810190601f168015620001985780820380516001836020036101000a031916815260200191505b5060405260209081015185519093508592508491620001bd9160039185019062000219565b508051620001d390600490602084019062000219565b5050600580546001600160a01b039390931661010090810233909102610100600160a81b031960ff199095166012178516179093169290921790915550620002c5915050565b828054600181600116156101000203166002900490600052602060002090601f0160209004810192826200025157600085556200029c565b82601f106200026c57805160ff19168380011785556200029c565b828001600101855582156200029c579182015b828111156200029c5782518255916020019190600101906200027f565b50620002aa929150620002ae565b5090565b5b80821115620002aa5760008155600101620002af565b610f1e80620002d56000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c806370a08231116100a2578063a457c2d711610071578063a457c2d714610343578063a9059cbb1461036f578063c024cd261461039b578063dd62ed3e146103c7578063f2fde38b146103f55761010b565b806370a08231146102cb57806371297784146102f1578063893d20e81461031757806395d89b411461033b5761010b565b806323b872dd116100de57806323b872dd1461021f578063313ce56714610255578063395093511461027357806342986e131461029f5761010b565b806306fdde0314610110578063095ea7b31461018d5780630fb66557146101cd57806318160ddd14610205575b600080fd5b61011861041b565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561015257818101518382015260200161013a565b50505050905090810190601f16801561017f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101b9600480360360408110156101a357600080fd5b506001600160a01b0381351690602001356104b1565b604080519115158252519081900360200190f35b610203600480360360608110156101e357600080fd5b506001600160a01b038135811691602081013590911690604001356104ce565b005b61020d6104fa565b60408051918252519081900360200190f35b6101b96004803603606081101561023557600080fd5b506001600160a01b03813581169160208101359091169060400135610500565b61025d610587565b6040805160ff9092168252519081900360200190f35b6101b96004803603604081101561028957600080fd5b506001600160a01b038135169060200135610590565b610203600480360360408110156102b557600080fd5b506001600160a01b0381351690602001356105de565b61020d600480360360208110156102e157600080fd5b50356001600160a01b0316610608565b61020d6004803603602081101561030757600080fd5b50356001600160a01b0316610623565b61031f61065f565b604080516001600160a01b039092168252519081900360200190f35b610118610673565b6101b96004803603604081101561035957600080fd5b506001600160a01b0381351690602001356106d4565b6101b96004803603604081101561038557600080fd5b506001600160a01b03813516906020013561073c565b610203600480360360408110156103b157600080fd5b506001600160a01b038135169060200135610750565b61020d600480360360408110156103dd57600080fd5b506001600160a01b0381358116916020013516610776565b6101b96004803603602081101561040b57600080fd5b50356001600160a01b03166107a1565b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156104a75780601f1061047c576101008083540402835291602001916104a7565b820191906000526020600020905b81548152906001019060200180831161048a57829003601f168201915b5050505050905090565b60006104c56104be610818565b848461081c565b50600192915050565b60055461010090046001600160a01b031633146104ea57600080fd5b6104f5838383610908565b505050565b60025490565b600061050d848484610908565b61057d84610519610818565b61057885604051806060016040528060288152602001610e32602891396001600160a01b038a16600090815260016020526040812090610557610818565b6001600160a01b031681526020810191909152604001600020549190610a63565b61081c565b5060019392505050565b60055460ff1690565b60006104c561059d610818565b8461057885600160006105ae610818565b6001600160a01b03908116825260208083019390935260409182016000908120918c168152925290205490610afa565b60055461010090046001600160a01b031633146105fa57600080fd5b6106048282610b5b565b5050565b6001600160a01b031660009081526020819052604090205490565b60055460009061010090046001600160a01b0316331461064257600080fd5b600061064d83610608565b90506106598382610b5b565b92915050565b60055461010090046001600160a01b031690565b60048054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156104a75780601f1061047c576101008083540402835291602001916104a7565b60006104c56106e1610818565b8461057885604051806060016040528060258152602001610ec4602591396001600061070b610818565b6001600160a01b03908116825260208083019390935260409182016000908120918d16815292529020549190610a63565b60006104c5610749610818565b8484610908565b60055461010090046001600160a01b0316331461076c57600080fd5b6106048282610c57565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b60055460009061010090046001600160a01b031633146107c057600080fd5b6001600160a01b0382166107d357600080fd5b6005546107ee9061010090046001600160a01b031683610604565b50600580546001600160a01b03831661010002610100600160a81b03199091161790556001919050565b3390565b6001600160a01b0383166108615760405162461bcd60e51b8152600401808060200182810382526024815260200180610ea06024913960400191505060405180910390fd5b6001600160a01b0382166108a65760405162461bcd60e51b8152600401808060200182810382526022815260200180610dea6022913960400191505060405180910390fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b03831661094d5760405162461bcd60e51b8152600401808060200182810382526025815260200180610e7b6025913960400191505060405180910390fd5b6001600160a01b0382166109925760405162461bcd60e51b8152600401808060200182810382526023815260200180610da56023913960400191505060405180910390fd5b61099d8383836104f5565b6109da81604051806060016040528060268152602001610e0c602691396001600160a01b0386166000908152602081905260409020549190610a63565b6001600160a01b038085166000908152602081905260408082209390935590841681522054610a099082610afa565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b60008184841115610af25760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610ab7578181015183820152602001610a9f565b50505050905090810190601f168015610ae45780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b600082820183811015610b54576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b6001600160a01b038216610ba05760405162461bcd60e51b8152600401808060200182810382526021815260200180610e5a6021913960400191505060405180910390fd5b610bac826000836104f5565b610be981604051806060016040528060228152602001610dc8602291396001600160a01b0385166000908152602081905260409020549190610a63565b6001600160a01b038316600090815260208190526040902055600254610c0f9082610d47565b6002556040805182815290516000916001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b6001600160a01b038216610cb2576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b610cbe600083836104f5565b600254610ccb9082610afa565b6002556001600160a01b038216600090815260208190526040902054610cf19082610afa565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b600082821115610d9e576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b5090039056fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a206275726e20616d6f756e7420657863656564732062616c616e636545524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a206275726e2066726f6d20746865207a65726f206164647265737345524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa2646970667358221220c881513fca5a75d47e02fc1c04920461b43ce001b23b37bd2a0244cb5b4737ce64736f6c63430007060033a2646970667358221220ffe4a1d9d4727d8db8c9e114723a3ea1b29d476000734b6df2696252e9fe933f64736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "transferOwnership(address)": {
        "details": "Allows the current owner to transfer control of the contract to a newOwner.",
        "params": {
          "_newOwner": "The address to transfer ownership to."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5351,
        "contract": "contracts/turbo/SportsLinkMarketFactory.sol:SportsLinkMarketFactory",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 7633,
        "contract": "contracts/turbo/SportsLinkMarketFactory.sol:SportsLinkMarketFactory",
        "label": "collateral",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20Full)5328"
      },
      {
        "astId": 7635,
        "contract": "contracts/turbo/SportsLinkMarketFactory.sol:SportsLinkMarketFactory",
        "label": "feePot",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(FeePot)8754"
      },
      {
        "astId": 7637,
        "contract": "contracts/turbo/SportsLinkMarketFactory.sol:SportsLinkMarketFactory",
        "label": "stakerFee",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 7639,
        "contract": "contracts/turbo/SportsLinkMarketFactory.sol:SportsLinkMarketFactory",
        "label": "settlementFee",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 7641,
        "contract": "contracts/turbo/SportsLinkMarketFactory.sol:SportsLinkMarketFactory",
        "label": "protocolFee",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 7643,
        "contract": "contracts/turbo/SportsLinkMarketFactory.sol:SportsLinkMarketFactory",
        "label": "protocol",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 7646,
        "contract": "contracts/turbo/SportsLinkMarketFactory.sol:SportsLinkMarketFactory",
        "label": "accumulatedProtocolFee",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 7650,
        "contract": "contracts/turbo/SportsLinkMarketFactory.sol:SportsLinkMarketFactory",
        "label": "accumulatedSettlementFees",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7652,
        "contract": "contracts/turbo/SportsLinkMarketFactory.sol:SportsLinkMarketFactory",
        "label": "shareFactor",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 7671,
        "contract": "contracts/turbo/SportsLinkMarketFactory.sol:SportsLinkMarketFactory",
        "label": "markets",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_struct(Market)7668_storage)dyn_storage"
      },
      {
        "astId": 9241,
        "contract": "contracts/turbo/SportsLinkMarketFactory.sol:SportsLinkMarketFactory",
        "label": "marketDetails",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_struct(MarketDetails)9237_storage)"
      },
      {
        "astId": 9247,
        "contract": "contracts/turbo/SportsLinkMarketFactory.sol:SportsLinkMarketFactory",
        "label": "events",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_array(t_uint256)3_storage)"
      },
      {
        "astId": 9249,
        "contract": "contracts/turbo/SportsLinkMarketFactory.sol:SportsLinkMarketFactory",
        "label": "linkNode",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_contract(OwnedERC20)8861)dyn_storage": {
        "base": "t_contract(OwnedERC20)8861",
        "encoding": "dynamic_array",
        "label": "contract OwnedERC20[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Market)7668_storage)dyn_storage": {
        "base": "t_struct(Market)7668_storage",
        "encoding": "dynamic_array",
        "label": "struct AbstractMarketFactory.Market[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)3_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[3]",
        "numberOfBytes": "96"
      },
      "t_contract(FeePot)8754": {
        "encoding": "inplace",
        "label": "contract FeePot",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20Full)5328": {
        "encoding": "inplace",
        "label": "contract IERC20Full",
        "numberOfBytes": "20"
      },
      "t_contract(OwnedERC20)8861": {
        "encoding": "inplace",
        "label": "contract OwnedERC20",
        "numberOfBytes": "20"
      },
      "t_enum(EventStatus)9222": {
        "encoding": "inplace",
        "label": "enum SportsLinkMarketFactory.EventStatus",
        "numberOfBytes": "1"
      },
      "t_enum(MarketType)9216": {
        "encoding": "inplace",
        "label": "enum SportsLinkMarketFactory.MarketType",
        "numberOfBytes": "1"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_array(t_uint256)3_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256[3])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)3_storage"
      },
      "t_mapping(t_uint256,t_struct(MarketDetails)9237_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct SportsLinkMarketFactory.MarketDetails)",
        "numberOfBytes": "32",
        "value": "t_struct(MarketDetails)9237_storage"
      },
      "t_struct(Market)7668_storage": {
        "encoding": "inplace",
        "label": "struct AbstractMarketFactory.Market",
        "members": [
          {
            "astId": 7654,
            "contract": "contracts/turbo/SportsLinkMarketFactory.sol:SportsLinkMarketFactory",
            "label": "settlementAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 7657,
            "contract": "contracts/turbo/SportsLinkMarketFactory.sol:SportsLinkMarketFactory",
            "label": "shareTokens",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_contract(OwnedERC20)8861)dyn_storage"
          },
          {
            "astId": 7659,
            "contract": "contracts/turbo/SportsLinkMarketFactory.sol:SportsLinkMarketFactory",
            "label": "endTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 7661,
            "contract": "contracts/turbo/SportsLinkMarketFactory.sol:SportsLinkMarketFactory",
            "label": "winner",
            "offset": 0,
            "slot": "3",
            "type": "t_contract(OwnedERC20)8861"
          },
          {
            "astId": 7663,
            "contract": "contracts/turbo/SportsLinkMarketFactory.sol:SportsLinkMarketFactory",
            "label": "settlementFee",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 7665,
            "contract": "contracts/turbo/SportsLinkMarketFactory.sol:SportsLinkMarketFactory",
            "label": "protocolFee",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 7667,
            "contract": "contracts/turbo/SportsLinkMarketFactory.sol:SportsLinkMarketFactory",
            "label": "stakerFee",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(MarketDetails)9237_storage": {
        "encoding": "inplace",
        "label": "struct SportsLinkMarketFactory.MarketDetails",
        "members": [
          {
            "astId": 9224,
            "contract": "contracts/turbo/SportsLinkMarketFactory.sol:SportsLinkMarketFactory",
            "label": "eventId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9226,
            "contract": "contracts/turbo/SportsLinkMarketFactory.sol:SportsLinkMarketFactory",
            "label": "homeTeamId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 9228,
            "contract": "contracts/turbo/SportsLinkMarketFactory.sol:SportsLinkMarketFactory",
            "label": "awayTeamId",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 9230,
            "contract": "contracts/turbo/SportsLinkMarketFactory.sol:SportsLinkMarketFactory",
            "label": "estimatedStartTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 9232,
            "contract": "contracts/turbo/SportsLinkMarketFactory.sol:SportsLinkMarketFactory",
            "label": "marketType",
            "offset": 0,
            "slot": "4",
            "type": "t_enum(MarketType)9216"
          },
          {
            "astId": 9234,
            "contract": "contracts/turbo/SportsLinkMarketFactory.sol:SportsLinkMarketFactory",
            "label": "eventStatus",
            "offset": 1,
            "slot": "4",
            "type": "t_enum(EventStatus)9222"
          },
          {
            "astId": 9236,
            "contract": "contracts/turbo/SportsLinkMarketFactory.sol:SportsLinkMarketFactory",
            "label": "value0",
            "offset": 0,
            "slot": "5",
            "type": "t_int256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}