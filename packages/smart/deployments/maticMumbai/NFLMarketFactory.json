{
  "address": "0x8524e46E1B0823Ba23454e211e05A4C488020ABC",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "contract IERC20Full",
          "name": "_collateral",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_shareFactor",
          "type": "uint256"
        },
        {
          "internalType": "contract FeePot",
          "name": "_feePot",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_stakerFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_settlementFee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_protocol",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_protocolFee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_linkNode",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_sportId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newLinkNode",
          "type": "address"
        }
      ],
      "name": "LinkNodeChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum NFLMarketFactory.MarketType",
          "name": "marketType",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "homeTeamName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "homeTeamId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "awayTeamName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "awayTeamId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "estimatedStartTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "score",
          "type": "int256"
        }
      ],
      "name": "MarketCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "name": "MarketResolved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "protocol",
          "type": "address"
        }
      ],
      "name": "ProtocolChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "ProtocolFeeChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "protocol",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ProtocolFeeClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "SettlementFeeChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "settlementAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "SettlementFeeClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "SharesBurned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "SharesMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "StakerFeeChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "winningOutcome",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "settlementFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "payout",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "WinningsClaimed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "accumulatedProtocolFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "accumulatedSettlementFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_sharesToBurn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "burnShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_shares",
          "type": "uint256"
        }
      ],
      "name": "calcCost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_collateralIn",
          "type": "uint256"
        }
      ],
      "name": "calcShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_ids",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "claimManyWinnings",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimProtocolFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "claimSettlementFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "claimWinnings",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateral",
      "outputs": [
        {
          "internalType": "contract IERC20Full",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_eventId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_homeTeamName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_homeTeamId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_awayTeamName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_awayTeamId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_startTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "_homeSpread",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "_totalScore",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_makeSpread",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_makeTotalScore",
          "type": "bool"
        },
        {
          "internalType": "int256[2]",
          "name": "_moneylines",
          "type": "int256[2]"
        }
      ],
      "name": "createMarket",
      "outputs": [
        {
          "internalType": "uint256[3]",
          "name": "_ids",
          "type": "uint256[3]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "events",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "homeScore",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "awayScore",
          "type": "uint256"
        },
        {
          "internalType": "enum NFLMarketFactory.EventStatus",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "resolutionTime",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "finalized",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feePot",
      "outputs": [
        {
          "internalType": "contract FeePot",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_eventId",
          "type": "uint256"
        }
      ],
      "name": "getEventMarkets",
      "outputs": [
        {
          "internalType": "uint256[3]",
          "name": "",
          "type": "uint256[3]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "getMarket",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "settlementAddress",
              "type": "address"
            },
            {
              "internalType": "contract OwnedERC20[]",
              "name": "shareTokens",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            },
            {
              "internalType": "contract OwnedERC20",
              "name": "winner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "settlementFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "protocolFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stakerFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "creationTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "initialOdds",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct AbstractMarketFactoryV2.Market",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        }
      ],
      "name": "getMarketDetails",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "eventId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "homeTeamName",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "homeTeamId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "awayTeamName",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "awayTeamId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "estimatedStartTime",
              "type": "uint256"
            },
            {
              "internalType": "enum NFLMarketFactory.MarketType",
              "name": "marketType",
              "type": "uint8"
            },
            {
              "internalType": "enum NFLMarketFactory.EventStatus",
              "name": "eventStatus",
              "type": "uint8"
            },
            {
              "internalType": "int256",
              "name": "value0",
              "type": "int256"
            }
          ],
          "internalType": "struct NFLMarketFactory.MarketDetails",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_eventId",
          "type": "uint256"
        }
      ],
      "name": "isEventRegistered",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_eventId",
          "type": "uint256"
        }
      ],
      "name": "isEventResolved",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "isMarketResolved",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "linkNode",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "listOfEvents",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "listResolvableEvents",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "listUnresolvedMarkets",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marketCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_shareToMint",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "mintShares",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocol",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "resolveMarket",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newLinkNode",
          "type": "address"
        }
      ],
      "name": "setLinkNode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newProtocol",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_claimFirst",
          "type": "bool"
        }
      ],
      "name": "setProtocol",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newFee",
          "type": "uint256"
        }
      ],
      "name": "setProtocolFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newFee",
          "type": "uint256"
        }
      ],
      "name": "setSettlementFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newFee",
          "type": "uint256"
        }
      ],
      "name": "setStakerFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "settlementFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "shareFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sportId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakerFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_eventId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_eventStatus",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_homeScore",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_awayScore",
          "type": "uint256"
        }
      ],
      "name": "trustedResolveMarkets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa593a5db10cf4a7f6b60e50378f27f929793f00b880a64651cdeadc572022073",
  "receipt": {
    "to": null,
    "from": "0x8C9c733eCd48426b9c53c38ccB60F3b307329bE1",
    "contractAddress": "0x8524e46E1B0823Ba23454e211e05A4C488020ABC",
    "transactionIndex": 1,
    "gasUsed": "5385721",
    "logsBloom": "0x
    "blockHash": "0xa63b3c661508056bd15c68a684a0f013bdfb8306613999efff5c450251833bd6",
    "transactionHash": "0xa593a5db10cf4a7f6b60e50378f27f929793f00b880a64651cdeadc572022073",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 17556926,
        "transactionHash": "0xa593a5db10cf4a7f6b60e50378f27f929793f00b880a64651cdeadc572022073",
        "address": "0x5799bFe361BEea69f808328FF4884DF92f1f66f0",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000008524e46e1b0823ba23454e211e05a4c488020abc",
          "0x00000000000000000000000059ddfe9961e050bda1ed9bf9ccd009948036dd76"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 2,
        "blockHash": "0xa63b3c661508056bd15c68a684a0f013bdfb8306613999efff5c450251833bd6"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 17556926,
        "transactionHash": "0xa593a5db10cf4a7f6b60e50378f27f929793f00b880a64651cdeadc572022073",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000008c9c733ecd48426b9c53c38ccb60f3b307329be1",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x000000000000000000000000000000000000000000000000017eadb1bd498800000000000000000000000000000000000000000000000007e9c92a71b1fc12de00000000000000000000000000000000000000000000009d47b14a5b65f7f9d8000000000000000000000000000000000000000000000007e84a7cbff4b28ade00000000000000000000000000000000000000000000009d492ff80d234181d8",
        "logIndex": 3,
        "blockHash": "0xa63b3c661508056bd15c68a684a0f013bdfb8306613999efff5c450251833bd6"
      }
    ],
    "blockNumber": 17556926,
    "cumulativeGasUsed": "5432467",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8C9c733eCd48426b9c53c38ccB60F3b307329bE1",
    "0x5799bFe361BEea69f808328FF4884DF92f1f66f0",
    "1000000000000",
    "0x59DdFE9961e050bdA1ed9bf9CCD009948036Dd76",
    0,
    "500000000000000",
    "0x8C9c733eCd48426b9c53c38ccB60F3b307329bE1",
    0,
    "0x8C9c733eCd48426b9c53c38ccB60F3b307329bE1",
    1
  ],
  "solcInputHash": "c48192189f5641f0026de55e4887a883",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Full\",\"name\":\"_collateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_shareFactor\",\"type\":\"uint256\"},{\"internalType\":\"contract FeePot\",\"name\":\"_feePot\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stakerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_settlementFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_protocol\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_protocolFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_linkNode\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_sportId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newLinkNode\",\"type\":\"address\"}],\"name\":\"LinkNodeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum NFLMarketFactory.MarketType\",\"name\":\"marketType\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"homeTeamName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"homeTeamId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"awayTeamName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"awayTeamId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"estimatedStartTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"score\",\"type\":\"int256\"}],\"name\":\"MarketCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"MarketResolved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"protocol\",\"type\":\"address\"}],\"name\":\"ProtocolChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"ProtocolFeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"protocol\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ProtocolFeeClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"SettlementFeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"settlementAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"SettlementFeeClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"SharesBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"SharesMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"StakerFeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"winningOutcome\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"settlementFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"WinningsClaimed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accumulatedProtocolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accumulatedSettlementFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sharesToBurn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"burnShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"calcCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_collateralIn\",\"type\":\"uint256\"}],\"name\":\"calcShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"claimManyWinnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimProtocolFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"claimSettlementFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"claimWinnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateral\",\"outputs\":[{\"internalType\":\"contract IERC20Full\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_eventId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_homeTeamName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_homeTeamId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_awayTeamName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_awayTeamId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"_homeSpread\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"_totalScore\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_makeSpread\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_makeTotalScore\",\"type\":\"bool\"},{\"internalType\":\"int256[2]\",\"name\":\"_moneylines\",\"type\":\"int256[2]\"}],\"name\":\"createMarket\",\"outputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"_ids\",\"type\":\"uint256[3]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"events\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"homeScore\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"awayScore\",\"type\":\"uint256\"},{\"internalType\":\"enum NFLMarketFactory.EventStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"resolutionTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"finalized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feePot\",\"outputs\":[{\"internalType\":\"contract FeePot\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_eventId\",\"type\":\"uint256\"}],\"name\":\"getEventMarkets\",\"outputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"\",\"type\":\"uint256[3]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getMarket\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"settlementAddress\",\"type\":\"address\"},{\"internalType\":\"contract OwnedERC20[]\",\"name\":\"shareTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"contract OwnedERC20\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"settlementFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"creationTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"initialOdds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct AbstractMarketFactoryV2.Market\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"}],\"name\":\"getMarketDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"homeTeamName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"homeTeamId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"awayTeamName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"awayTeamId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"estimatedStartTime\",\"type\":\"uint256\"},{\"internalType\":\"enum NFLMarketFactory.MarketType\",\"name\":\"marketType\",\"type\":\"uint8\"},{\"internalType\":\"enum NFLMarketFactory.EventStatus\",\"name\":\"eventStatus\",\"type\":\"uint8\"},{\"internalType\":\"int256\",\"name\":\"value0\",\"type\":\"int256\"}],\"internalType\":\"struct NFLMarketFactory.MarketDetails\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_eventId\",\"type\":\"uint256\"}],\"name\":\"isEventRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_eventId\",\"type\":\"uint256\"}],\"name\":\"isEventResolved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"isMarketResolved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"linkNode\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"listOfEvents\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listResolvableEvents\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listUnresolvedMarkets\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_shareToMint\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"mintShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocol\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"resolveMarket\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newLinkNode\",\"type\":\"address\"}],\"name\":\"setLinkNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newProtocol\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_claimFirst\",\"type\":\"bool\"}],\"name\":\"setProtocol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"setProtocolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"setSettlementFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"setStakerFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"settlementFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shareFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sportId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakerFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_eventId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_eventStatus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_homeScore\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_awayScore\",\"type\":\"uint256\"}],\"name\":\"trustedResolveMarkets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"transferOwnership(address)\":{\"details\":\"Allows the current owner to transfer control of the contract to a newOwner.\",\"params\":{\"_newOwner\":\"The address to transfer ownership to.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/turbo/NFLMarketFactory.sol\":\"NFLMarketFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xe22a1fc7400ae196eba2ad1562d0386462b00a6363b742d55a2fd2021a58586f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0x36b5ca4eabe888b39b10973621ca0dcc9b1508f8d06db9ddf045d7aa7c867d4a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"contracts/balancer/BColor.sol\":{\"content\":\"// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\ninterface BColor {\\n    function getColor() external view returns (bytes32);\\n}\\n\\ncontract BBronze is BColor {\\n    function getColor() external pure override returns (bytes32) {\\n        return bytes32(\\\"BRONZE\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xc716fe6583bbf6f8546c258540b2f7527dbc3b1f4b30007a0978b620c9779378\",\"license\":\"MIT\"},\"contracts/balancer/BConst.sol\":{\"content\":\"// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\nimport \\\"./BColor.sol\\\";\\n\\ncontract BConst is BBronze {\\n    uint256 public constant BONE = 10**18;\\n\\n    uint256 public constant MIN_BOUND_TOKENS = 2;\\n    uint256 public constant MAX_BOUND_TOKENS = 8;\\n\\n    uint256 public constant MIN_FEE = BONE / 10**6;\\n    uint256 public constant MAX_FEE = BONE / 10;\\n    uint256 public constant EXIT_FEE = 0;\\n\\n    uint256 public constant MIN_WEIGHT = BONE;\\n    uint256 public constant MAX_WEIGHT = BONE * 50;\\n    uint256 public constant MAX_TOTAL_WEIGHT = BONE * 50;\\n    uint256 public constant MIN_BALANCE = BONE / 10**12;\\n\\n    uint256 public constant INIT_POOL_SUPPLY = BONE * 100;\\n\\n    uint256 public constant MIN_BPOW_BASE = 1 wei;\\n    uint256 public constant MAX_BPOW_BASE = (2 * BONE) - 1 wei;\\n    uint256 public constant BPOW_PRECISION = BONE / 10**10;\\n\\n    uint256 public constant MAX_IN_RATIO = BONE / 2;\\n    uint256 public constant MAX_OUT_RATIO = (BONE / 3) + 1 wei;\\n}\\n\",\"keccak256\":\"0xb8d5d4ae9948f9be6ddb3111b38f01a15a607a155010321c4666351c9ca9afec\",\"license\":\"MIT\"},\"contracts/balancer/BMath.sol\":{\"content\":\"// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\nimport \\\"./BNum.sol\\\";\\n\\ncontract BMath is BBronze, BConst, BNum {\\n    /**********************************************************************************************\\n    // calcSpotPrice                                                                             //\\n    // sP = spotPrice                                                                            //\\n    // bI = tokenBalanceIn                ( bI / wI )         1                                  //\\n    // bO = tokenBalanceOut         sP =  -----------  *  ----------                             //\\n    // wI = tokenWeightIn                 ( bO / wO )     ( 1 - sF )                             //\\n    // wO = tokenWeightOut                                                                       //\\n    // sF = swapFee                                                                              //\\n    **********************************************************************************************/\\n    function calcSpotPrice(\\n        uint256 tokenBalanceIn,\\n        uint256 tokenWeightIn,\\n        uint256 tokenBalanceOut,\\n        uint256 tokenWeightOut,\\n        uint256 swapFee\\n    ) public pure returns (uint256 spotPrice) {\\n        uint256 numer = bdiv(tokenBalanceIn, tokenWeightIn);\\n        uint256 denom = bdiv(tokenBalanceOut, tokenWeightOut);\\n        uint256 ratio = bdiv(numer, denom);\\n        uint256 scale = bdiv(BONE, bsub(BONE, swapFee));\\n        return (spotPrice = bmul(ratio, scale));\\n    }\\n\\n    /**********************************************************************************************\\n    // calcOutGivenIn                                                                            //\\n    // aO = tokenAmountOut                                                                       //\\n    // bO = tokenBalanceOut                                                                      //\\n    // bI = tokenBalanceIn              /      /            bI             \\\\    (wI / wO) \\\\      //\\n    // aI = tokenAmountIn    aO = bO * |  1 - | --------------------------  | ^            |     //\\n    // wI = tokenWeightIn               \\\\      \\\\ ( bI + ( aI * ( 1 - sF )) /              /      //\\n    // wO = tokenWeightOut                                                                       //\\n    // sF = swapFee                                                                              //\\n    **********************************************************************************************/\\n    function calcOutGivenIn(\\n        uint256 tokenBalanceIn,\\n        uint256 tokenWeightIn,\\n        uint256 tokenBalanceOut,\\n        uint256 tokenWeightOut,\\n        uint256 tokenAmountIn,\\n        uint256 swapFee\\n    ) public pure returns (uint256 tokenAmountOut) {\\n        uint256 weightRatio = bdiv(tokenWeightIn, tokenWeightOut);\\n        uint256 adjustedIn = bsub(BONE, swapFee);\\n        adjustedIn = bmul(tokenAmountIn, adjustedIn);\\n        uint256 y = bdiv(tokenBalanceIn, badd(tokenBalanceIn, adjustedIn));\\n        uint256 foo = bpow(y, weightRatio);\\n        uint256 bar = bsub(BONE, foo);\\n        tokenAmountOut = bmul(tokenBalanceOut, bar);\\n        return tokenAmountOut;\\n    }\\n\\n    /**********************************************************************************************\\n    // calcInGivenOut                                                                            //\\n    // aI = tokenAmountIn                                                                        //\\n    // bO = tokenBalanceOut               /  /     bO      \\\\    (wO / wI)      \\\\                 //\\n    // bI = tokenBalanceIn          bI * |  | ------------  | ^            - 1  |                //\\n    // aO = tokenAmountOut    aI =        \\\\  \\\\ ( bO - aO ) /                   /                 //\\n    // wI = tokenWeightIn           --------------------------------------------                 //\\n    // wO = tokenWeightOut                          ( 1 - sF )                                   //\\n    // sF = swapFee                                                                              //\\n    **********************************************************************************************/\\n    function calcInGivenOut(\\n        uint256 tokenBalanceIn,\\n        uint256 tokenWeightIn,\\n        uint256 tokenBalanceOut,\\n        uint256 tokenWeightOut,\\n        uint256 tokenAmountOut,\\n        uint256 swapFee\\n    ) public pure returns (uint256 tokenAmountIn) {\\n        uint256 weightRatio = bdiv(tokenWeightOut, tokenWeightIn);\\n        uint256 diff = bsub(tokenBalanceOut, tokenAmountOut);\\n        uint256 y = bdiv(tokenBalanceOut, diff);\\n        uint256 foo = bpow(y, weightRatio);\\n        foo = bsub(foo, BONE);\\n        tokenAmountIn = bsub(BONE, swapFee);\\n        tokenAmountIn = bdiv(bmul(tokenBalanceIn, foo), tokenAmountIn);\\n        return tokenAmountIn;\\n    }\\n\\n    /**********************************************************************************************\\n    // calcPoolOutGivenSingleIn                                                                  //\\n    // pAo = poolAmountOut         /                                              \\\\              //\\n    // tAi = tokenAmountIn        ///      /     //    wI \\\\      \\\\\\\\       \\\\     wI \\\\             //\\n    // wI = tokenWeightIn        //| tAi *| 1 - || 1 - --  | * sF || + tBi \\\\    --  \\\\            //\\n    // tW = totalWeight     pAo=||  \\\\      \\\\     \\\\\\\\    tW /      //         | ^ tW   | * pS - pS //\\n    // tBi = tokenBalanceIn      \\\\\\\\  ------------------------------------- /        /            //\\n    // pS = poolSupply            \\\\\\\\                    tBi               /        /             //\\n    // sF = swapFee                \\\\                                              /              //\\n    **********************************************************************************************/\\n\\n    // Charge the trading fee for the proportion of tokenAi\\n    ///  which is implicitly traded to the other pool tokens.\\n    // That proportion is (1- weightTokenIn)\\n    // tokenAiAfterFee = tAi * (1 - (1-weightTi) * poolFee);\\n\\n    function calcPoolOutGivenSingleIn(\\n        uint256 tokenBalanceIn,\\n        uint256 tokenWeightIn,\\n        uint256 poolSupply,\\n        uint256 totalWeight,\\n        uint256 tokenAmountIn,\\n        uint256 swapFee\\n    ) public pure returns (uint256 poolAmountOut) {\\n        uint256 normalizedWeight = bdiv(tokenWeightIn, totalWeight);\\n        uint256 zaz = bmul(bsub(BONE, normalizedWeight), swapFee);\\n        uint256 tokenAmountInAfterFee = bmul(tokenAmountIn, bsub(BONE, zaz));\\n\\n        uint256 newTokenBalanceIn = badd(tokenBalanceIn, tokenAmountInAfterFee);\\n        uint256 tokenInRatio = bdiv(newTokenBalanceIn, tokenBalanceIn);\\n\\n        // uint newPoolSupply = (ratioTi ^ weightTi) * poolSupply;\\n        uint256 poolRatio = bpow(tokenInRatio, normalizedWeight);\\n        uint256 newPoolSupply = bmul(poolRatio, poolSupply);\\n        poolAmountOut = bsub(newPoolSupply, poolSupply);\\n        return poolAmountOut;\\n    }\\n\\n    /**********************************************************************************************\\n    // calcSingleInGivenPoolOut                                                                  //\\n    // tAi = tokenAmountIn              //(pS + pAo)\\\\     /    1    \\\\\\\\                           //\\n    // pS = poolSupply                 || ---------  | ^ | --------- || * bI - bI                //\\n    // pAo = poolAmountOut              \\\\\\\\    pS    /     \\\\(wI / tW)//                           //\\n    // bI = balanceIn          tAi =  --------------------------------------------               //\\n    // wI = weightIn                              /      wI  \\\\                                   //\\n    // tW = totalWeight                          |  1 - ----  |  * sF                            //\\n    // sF = swapFee                               \\\\      tW  /                                   //\\n    **********************************************************************************************/\\n    function calcSingleInGivenPoolOut(\\n        uint256 tokenBalanceIn,\\n        uint256 tokenWeightIn,\\n        uint256 poolSupply,\\n        uint256 totalWeight,\\n        uint256 poolAmountOut,\\n        uint256 swapFee\\n    ) public pure returns (uint256 tokenAmountIn) {\\n        uint256 normalizedWeight = bdiv(tokenWeightIn, totalWeight);\\n        uint256 newPoolSupply = badd(poolSupply, poolAmountOut);\\n        uint256 poolRatio = bdiv(newPoolSupply, poolSupply);\\n\\n        //uint newBalTi = poolRatio^(1/weightTi) * balTi;\\n        uint256 boo = bdiv(BONE, normalizedWeight);\\n        uint256 tokenInRatio = bpow(poolRatio, boo);\\n        uint256 newTokenBalanceIn = bmul(tokenInRatio, tokenBalanceIn);\\n        uint256 tokenAmountInAfterFee = bsub(newTokenBalanceIn, tokenBalanceIn);\\n        // Do reverse order of fees charged in joinswap_ExternAmountIn, this way\\n        //     ``` pAo == joinswap_ExternAmountIn(Ti, joinswap_PoolAmountOut(pAo, Ti)) ```\\n        //uint tAi = tAiAfterFee / (1 - (1-weightTi) * swapFee) ;\\n        uint256 zar = bmul(bsub(BONE, normalizedWeight), swapFee);\\n        tokenAmountIn = bdiv(tokenAmountInAfterFee, bsub(BONE, zar));\\n        return tokenAmountIn;\\n    }\\n\\n    /**********************************************************************************************\\n    // calcSingleOutGivenPoolIn                                                                  //\\n    // tAo = tokenAmountOut            /      /                                             \\\\\\\\   //\\n    // bO = tokenBalanceOut           /      // pS - (pAi * (1 - eF)) \\\\     /    1    \\\\      \\\\\\\\  //\\n    // pAi = poolAmountIn            | bO - || ----------------------- | ^ | --------- | * b0 || //\\n    // ps = poolSupply                \\\\      \\\\\\\\          pS           /     \\\\(wO / tW)/      //  //\\n    // wI = tokenWeightIn      tAo =   \\\\      \\\\                                             //   //\\n    // tW = totalWeight                    /     /      wO \\\\       \\\\                             //\\n    // sF = swapFee                    *  | 1 - |  1 - ---- | * sF  |                            //\\n    // eF = exitFee                        \\\\     \\\\      tW /       /                             //\\n    **********************************************************************************************/\\n    function calcSingleOutGivenPoolIn(\\n        uint256 tokenBalanceOut,\\n        uint256 tokenWeightOut,\\n        uint256 poolSupply,\\n        uint256 totalWeight,\\n        uint256 poolAmountIn,\\n        uint256 swapFee\\n    ) public pure returns (uint256 tokenAmountOut) {\\n        uint256 normalizedWeight = bdiv(tokenWeightOut, totalWeight);\\n        // charge exit fee on the pool token side\\n        // pAiAfterExitFee = pAi*(1-exitFee)\\n        uint256 poolAmountInAfterExitFee = bmul(poolAmountIn, bsub(BONE, EXIT_FEE));\\n        uint256 newPoolSupply = bsub(poolSupply, poolAmountInAfterExitFee);\\n        uint256 poolRatio = bdiv(newPoolSupply, poolSupply);\\n\\n        // newBalTo = poolRatio^(1/weightTo) * balTo;\\n        uint256 tokenOutRatio = bpow(poolRatio, bdiv(BONE, normalizedWeight));\\n        uint256 newTokenBalanceOut = bmul(tokenOutRatio, tokenBalanceOut);\\n\\n        uint256 tokenAmountOutBeforeSwapFee = bsub(tokenBalanceOut, newTokenBalanceOut);\\n\\n        // charge swap fee on the output token side\\n        //uint tAo = tAoBeforeSwapFee * (1 - (1-weightTo) * swapFee)\\n        uint256 zaz = bmul(bsub(BONE, normalizedWeight), swapFee);\\n        tokenAmountOut = bmul(tokenAmountOutBeforeSwapFee, bsub(BONE, zaz));\\n        return tokenAmountOut;\\n    }\\n\\n    /**********************************************************************************************\\n    // calcPoolInGivenSingleOut                                                                  //\\n    // pAi = poolAmountIn               // /               tAo             \\\\\\\\     / wO \\\\     \\\\   //\\n    // bO = tokenBalanceOut            // | bO - -------------------------- |\\\\   | ---- |     \\\\  //\\n    // tAo = tokenAmountOut      pS - ||   \\\\     1 - ((1 - (tO / tW)) * sF)/  | ^ \\\\ tW /  * pS | //\\n    // ps = poolSupply                 \\\\\\\\ -----------------------------------/                /  //\\n    // wO = tokenWeightOut  pAi =       \\\\\\\\               bO                 /                /   //\\n    // tW = totalWeight           -------------------------------------------------------------  //\\n    // sF = swapFee                                        ( 1 - eF )                            //\\n    // eF = exitFee                                                                              //\\n    **********************************************************************************************/\\n    function calcPoolInGivenSingleOut(\\n        uint256 tokenBalanceOut,\\n        uint256 tokenWeightOut,\\n        uint256 poolSupply,\\n        uint256 totalWeight,\\n        uint256 tokenAmountOut,\\n        uint256 swapFee\\n    ) public pure returns (uint256 poolAmountIn) {\\n        // charge swap fee on the output token side\\n        uint256 normalizedWeight = bdiv(tokenWeightOut, totalWeight);\\n        //uint tAoBeforeSwapFee = tAo / (1 - (1-weightTo) * swapFee) ;\\n        uint256 zoo = bsub(BONE, normalizedWeight);\\n        uint256 zar = bmul(zoo, swapFee);\\n        uint256 tokenAmountOutBeforeSwapFee = bdiv(tokenAmountOut, bsub(BONE, zar));\\n\\n        uint256 newTokenBalanceOut = bsub(tokenBalanceOut, tokenAmountOutBeforeSwapFee);\\n        uint256 tokenOutRatio = bdiv(newTokenBalanceOut, tokenBalanceOut);\\n\\n        //uint newPoolSupply = (ratioTo ^ weightTo) * poolSupply;\\n        uint256 poolRatio = bpow(tokenOutRatio, normalizedWeight);\\n        uint256 newPoolSupply = bmul(poolRatio, poolSupply);\\n        uint256 poolAmountInAfterExitFee = bsub(poolSupply, newPoolSupply);\\n\\n        // charge exit fee on the pool token side\\n        // pAi = pAiAfterExitFee/(1-exitFee)\\n        poolAmountIn = bdiv(poolAmountInAfterExitFee, bsub(BONE, EXIT_FEE));\\n        return poolAmountIn;\\n    }\\n}\\n\",\"keccak256\":\"0x0a19a262ccff90637f3d74538bc55cff57d1b9d484df33cca36f29fad8f37e2e\",\"license\":\"MIT\"},\"contracts/balancer/BNum.sol\":{\"content\":\"// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\nimport \\\"./BConst.sol\\\";\\n\\ncontract BNum is BConst {\\n    function btoi(uint256 a) internal pure returns (uint256) {\\n        return a / BONE;\\n    }\\n\\n    function bfloor(uint256 a) internal pure returns (uint256) {\\n        return btoi(a) * BONE;\\n    }\\n\\n    function badd(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"ERR_ADD_OVERFLOW\\\");\\n        return c;\\n    }\\n\\n    function bsub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (uint256 c, bool flag) = bsubSign(a, b);\\n        require(!flag, \\\"ERR_SUB_UNDERFLOW\\\");\\n        return c;\\n    }\\n\\n    function bsubSign(uint256 a, uint256 b) internal pure returns (uint256, bool) {\\n        if (a >= b) {\\n            return (a - b, false);\\n        } else {\\n            return (b - a, true);\\n        }\\n    }\\n\\n    function bmul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c0 = a * b;\\n        require(a == 0 || c0 / a == b, \\\"ERR_MUL_OVERFLOW\\\");\\n        uint256 c1 = c0 + (BONE / 2);\\n        require(c1 >= c0, \\\"ERR_MUL_OVERFLOW\\\");\\n        uint256 c2 = c1 / BONE;\\n        return c2;\\n    }\\n\\n    function bdiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, \\\"ERR_DIV_ZERO\\\");\\n        uint256 c0 = a * BONE;\\n        require(a == 0 || c0 / a == BONE, \\\"ERR_DIV_INTERNAL\\\"); // bmul overflow\\n        uint256 c1 = c0 + (b / 2);\\n        require(c1 >= c0, \\\"ERR_DIV_INTERNAL\\\"); //  badd require\\n        uint256 c2 = c1 / b;\\n        return c2;\\n    }\\n\\n    // DSMath.wpow\\n    function bpowi(uint256 a, uint256 n) internal pure returns (uint256) {\\n        uint256 z = n % 2 != 0 ? a : BONE;\\n\\n        for (n /= 2; n != 0; n /= 2) {\\n            a = bmul(a, a);\\n\\n            if (n % 2 != 0) {\\n                z = bmul(z, a);\\n            }\\n        }\\n        return z;\\n    }\\n\\n    // Compute b^(e.w) by splitting it into (b^e)*(b^0.w).\\n    // Use `bpowi` for `b^e` and `bpowK` for k iterations\\n    // of approximation of b^0.w\\n    function bpow(uint256 base, uint256 exp) internal pure returns (uint256) {\\n        require(base >= MIN_BPOW_BASE, \\\"ERR_BPOW_BASE_TOO_LOW\\\");\\n        require(base <= MAX_BPOW_BASE, \\\"ERR_BPOW_BASE_TOO_HIGH\\\");\\n\\n        uint256 whole = bfloor(exp);\\n        uint256 remain = bsub(exp, whole);\\n\\n        uint256 wholePow = bpowi(base, btoi(whole));\\n\\n        if (remain == 0) {\\n            return wholePow;\\n        }\\n\\n        uint256 partialResult = bpowApprox(base, remain, BPOW_PRECISION);\\n        return bmul(wholePow, partialResult);\\n    }\\n\\n    function bpowApprox(\\n        uint256 base,\\n        uint256 exp,\\n        uint256 precision\\n    ) internal pure returns (uint256) {\\n        // term 0:\\n        uint256 a = exp;\\n        (uint256 x, bool xneg) = bsubSign(base, BONE);\\n        uint256 term = BONE;\\n        uint256 sum = term;\\n        bool negative = false;\\n\\n        // term(k) = numer / denom\\n        //         = (product(a - i - 1, i=1-->k) * x^k) / (k!)\\n        // each iteration, multiply previous term by (a-(k-1)) * x / k\\n        // continue until term is less than precision\\n        for (uint256 i = 1; term >= precision; i++) {\\n            uint256 bigK = i * BONE;\\n            (uint256 c, bool cneg) = bsubSign(a, bsub(bigK, BONE));\\n            term = bmul(term, bmul(c, x));\\n            term = bdiv(term, bigK);\\n            if (term == 0) break;\\n\\n            if (xneg) negative = !negative;\\n            if (cneg) negative = !negative;\\n            if (negative) {\\n                sum = bsub(sum, term);\\n            } else {\\n                sum = badd(sum, term);\\n            }\\n        }\\n\\n        return sum;\\n    }\\n}\\n\",\"keccak256\":\"0x015e4af906575a6fff48089af01a4c683d8e9127179271f545b6e687d767d178\",\"license\":\"MIT\"},\"contracts/balancer/BPool.sol\":{\"content\":\"// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\nimport \\\"./BToken.sol\\\";\\nimport \\\"./BMath.sol\\\";\\n\\ncontract BPool is BBronze, BToken, BMath {\\n    struct Record {\\n        bool bound; // is token bound to pool\\n        uint256 index; // private\\n        uint256 denorm; // denormalized weight\\n        uint256 balance;\\n    }\\n\\n    event LOG_SWAP(\\n        address indexed caller,\\n        address indexed tokenIn,\\n        address indexed tokenOut,\\n        uint256 tokenAmountIn,\\n        uint256 tokenAmountOut\\n    );\\n\\n    event LOG_JOIN(address indexed caller, address indexed tokenIn, uint256 tokenAmountIn);\\n\\n    event LOG_EXIT(address indexed caller, address indexed tokenOut, uint256 tokenAmountOut);\\n\\n    event LOG_CALL(bytes4 indexed sig, address indexed caller, bytes data) anonymous;\\n\\n    modifier _logs_() {\\n        emit LOG_CALL(msg.sig, msg.sender, msg.data);\\n        _;\\n    }\\n\\n    modifier _lock_() {\\n        require(!_mutex, \\\"ERR_REENTRY\\\");\\n        _mutex = true;\\n        _;\\n        _mutex = false;\\n    }\\n\\n    modifier _viewlock_() {\\n        require(!_mutex, \\\"ERR_REENTRY\\\");\\n        _;\\n    }\\n\\n    bool private _mutex;\\n\\n    address private _factory; // BFactory address to push token exitFee to\\n    address private _controller; // has CONTROL role\\n    bool private _publicSwap; // true if PUBLIC can call SWAP functions\\n\\n    // `setSwapFee` and `finalize` require CONTROL\\n    // `finalize` sets `PUBLIC can SWAP`, `PUBLIC can JOIN`\\n    uint256 private _swapFee;\\n    bool private _finalized;\\n\\n    address[] private _tokens;\\n    mapping(address => Record) private _records;\\n    uint256 private _totalWeight;\\n\\n    constructor() {\\n        _controller = msg.sender;\\n        _factory = msg.sender;\\n        _swapFee = MIN_FEE;\\n        _publicSwap = false;\\n        _finalized = false;\\n    }\\n\\n    function isPublicSwap() external view returns (bool) {\\n        return _publicSwap;\\n    }\\n\\n    function isFinalized() external view returns (bool) {\\n        return _finalized;\\n    }\\n\\n    function isBound(address t) external view returns (bool) {\\n        return _records[t].bound;\\n    }\\n\\n    function getNumTokens() external view returns (uint256) {\\n        return _tokens.length;\\n    }\\n\\n    function getCurrentTokens() external view _viewlock_ returns (address[] memory tokens) {\\n        return _tokens;\\n    }\\n\\n    function getFinalTokens() external view _viewlock_ returns (address[] memory tokens) {\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\n        return _tokens;\\n    }\\n\\n    function getDenormalizedWeight(address token) external view _viewlock_ returns (uint256) {\\n        require(_records[token].bound, \\\"ERR_NOT_BOUND\\\");\\n        return _records[token].denorm;\\n    }\\n\\n    function getTotalDenormalizedWeight() external view _viewlock_ returns (uint256) {\\n        return _totalWeight;\\n    }\\n\\n    function getNormalizedWeight(address token) external view _viewlock_ returns (uint256) {\\n        require(_records[token].bound, \\\"ERR_NOT_BOUND\\\");\\n        uint256 denorm = _records[token].denorm;\\n        return bdiv(denorm, _totalWeight);\\n    }\\n\\n    function getBalance(address token) external view _viewlock_ returns (uint256) {\\n        require(_records[token].bound, \\\"ERR_NOT_BOUND\\\");\\n        return _records[token].balance;\\n    }\\n\\n    function getSwapFee() external view _viewlock_ returns (uint256) {\\n        return _swapFee;\\n    }\\n\\n    function getController() external view _viewlock_ returns (address) {\\n        return _controller;\\n    }\\n\\n    function setSwapFee(uint256 swapFee) external _logs_ _lock_ {\\n        require(!_finalized, \\\"ERR_IS_FINALIZED\\\");\\n        require(msg.sender == _controller, \\\"ERR_NOT_CONTROLLER\\\");\\n        require(swapFee >= MIN_FEE, \\\"ERR_MIN_FEE\\\");\\n        require(swapFee <= MAX_FEE, \\\"ERR_MAX_FEE\\\");\\n        _swapFee = swapFee;\\n    }\\n\\n    function setController(address manager) external _logs_ _lock_ {\\n        require(msg.sender == _controller, \\\"ERR_NOT_CONTROLLER\\\");\\n        _controller = manager;\\n    }\\n\\n    function setPublicSwap(bool public_) external _logs_ _lock_ {\\n        require(!_finalized, \\\"ERR_IS_FINALIZED\\\");\\n        require(msg.sender == _controller, \\\"ERR_NOT_CONTROLLER\\\");\\n        _publicSwap = public_;\\n    }\\n\\n    function finalize() external _logs_ _lock_ {\\n        require(msg.sender == _controller, \\\"ERR_NOT_CONTROLLER\\\");\\n        require(!_finalized, \\\"ERR_IS_FINALIZED\\\");\\n        require(_tokens.length >= MIN_BOUND_TOKENS, \\\"ERR_MIN_TOKENS\\\");\\n\\n        _finalized = true;\\n        _publicSwap = true;\\n\\n        _mintPoolShare(INIT_POOL_SUPPLY);\\n        _pushPoolShare(msg.sender, INIT_POOL_SUPPLY);\\n    }\\n\\n    function bind(\\n        address token,\\n        uint256 balance,\\n        uint256 denorm\\n    )\\n        external\\n        _logs_ // _lock_  Bind does not lock because it jumps to `rebind`, which does\\n    {\\n        require(msg.sender == _controller, \\\"ERR_NOT_CONTROLLER\\\");\\n        require(!_records[token].bound, \\\"ERR_IS_BOUND\\\");\\n        require(!_finalized, \\\"ERR_IS_FINALIZED\\\");\\n\\n        require(_tokens.length < MAX_BOUND_TOKENS, \\\"ERR_MAX_TOKENS\\\");\\n\\n        _records[token] = Record({\\n            bound: true,\\n            index: _tokens.length,\\n            denorm: 0, // balance and denorm will be validated\\n            balance: 0 // and set by `rebind`\\n        });\\n        _tokens.push(token);\\n        rebind(token, balance, denorm);\\n    }\\n\\n    function rebind(\\n        address token,\\n        uint256 balance,\\n        uint256 denorm\\n    ) public _logs_ _lock_ {\\n        require(msg.sender == _controller, \\\"ERR_NOT_CONTROLLER\\\");\\n        require(_records[token].bound, \\\"ERR_NOT_BOUND\\\");\\n        require(!_finalized, \\\"ERR_IS_FINALIZED\\\");\\n\\n        require(denorm >= MIN_WEIGHT, \\\"ERR_MIN_WEIGHT\\\");\\n        require(denorm <= MAX_WEIGHT, \\\"ERR_MAX_WEIGHT\\\");\\n        require(balance >= MIN_BALANCE, \\\"ERR_MIN_BALANCE\\\");\\n\\n        // Adjust the denorm and totalWeight\\n        uint256 oldWeight = _records[token].denorm;\\n        if (denorm > oldWeight) {\\n            _totalWeight = badd(_totalWeight, bsub(denorm, oldWeight));\\n            require(_totalWeight <= MAX_TOTAL_WEIGHT, \\\"ERR_MAX_TOTAL_WEIGHT\\\");\\n        } else if (denorm < oldWeight) {\\n            _totalWeight = bsub(_totalWeight, bsub(oldWeight, denorm));\\n        }\\n        _records[token].denorm = denorm;\\n\\n        // Adjust the balance record and actual token balance\\n        uint256 oldBalance = _records[token].balance;\\n        _records[token].balance = balance;\\n        if (balance > oldBalance) {\\n            _pullUnderlying(token, msg.sender, bsub(balance, oldBalance));\\n        } else if (balance < oldBalance) {\\n            // In this case liquidity is being withdrawn, so charge EXIT_FEE\\n            uint256 tokenBalanceWithdrawn = bsub(oldBalance, balance);\\n            uint256 tokenExitFee = bmul(tokenBalanceWithdrawn, EXIT_FEE);\\n            _pushUnderlying(token, msg.sender, bsub(tokenBalanceWithdrawn, tokenExitFee));\\n            _pushUnderlying(token, _factory, tokenExitFee);\\n        }\\n    }\\n\\n    function unbind(address token) external _logs_ _lock_ {\\n        require(msg.sender == _controller, \\\"ERR_NOT_CONTROLLER\\\");\\n        require(_records[token].bound, \\\"ERR_NOT_BOUND\\\");\\n        require(!_finalized, \\\"ERR_IS_FINALIZED\\\");\\n\\n        uint256 tokenBalance = _records[token].balance;\\n        uint256 tokenExitFee = bmul(tokenBalance, EXIT_FEE);\\n\\n        _totalWeight = bsub(_totalWeight, _records[token].denorm);\\n\\n        // Swap the token-to-unbind with the last token,\\n        // then delete the last token\\n        uint256 index = _records[token].index;\\n        uint256 last = _tokens.length - 1;\\n        _tokens[index] = _tokens[last];\\n        _records[_tokens[index]].index = index;\\n        _tokens.pop();\\n        _records[token] = Record({bound: false, index: 0, denorm: 0, balance: 0});\\n\\n        _pushUnderlying(token, msg.sender, bsub(tokenBalance, tokenExitFee));\\n        _pushUnderlying(token, _factory, tokenExitFee);\\n    }\\n\\n    // Absorb any tokens that have been sent to this contract into the pool\\n    function gulp(address token) external _logs_ _lock_ {\\n        require(_records[token].bound, \\\"ERR_NOT_BOUND\\\");\\n        _records[token].balance = IERC20Balancer(token).balanceOf(address(this));\\n    }\\n\\n    function getSpotPrice(address tokenIn, address tokenOut) external view _viewlock_ returns (uint256 spotPrice) {\\n        require(_records[tokenIn].bound, \\\"ERR_NOT_BOUND\\\");\\n        require(_records[tokenOut].bound, \\\"ERR_NOT_BOUND\\\");\\n        Record storage inRecord = _records[tokenIn];\\n        Record storage outRecord = _records[tokenOut];\\n        return calcSpotPrice(inRecord.balance, inRecord.denorm, outRecord.balance, outRecord.denorm, _swapFee);\\n    }\\n\\n    function getSpotPriceSansFee(address tokenIn, address tokenOut)\\n        external\\n        view\\n        _viewlock_\\n        returns (uint256 spotPrice)\\n    {\\n        require(_records[tokenIn].bound, \\\"ERR_NOT_BOUND\\\");\\n        require(_records[tokenOut].bound, \\\"ERR_NOT_BOUND\\\");\\n        Record storage inRecord = _records[tokenIn];\\n        Record storage outRecord = _records[tokenOut];\\n        return calcSpotPrice(inRecord.balance, inRecord.denorm, outRecord.balance, outRecord.denorm, 0);\\n    }\\n\\n    function joinPool(uint256 poolAmountOut, uint256[] calldata maxAmountsIn) external _logs_ _lock_ {\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\n\\n        uint256 poolTotal = totalSupply();\\n        uint256 ratio = bdiv(poolAmountOut, poolTotal);\\n        require(ratio != 0, \\\"ERR_MATH_APPROX\\\");\\n\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            address t = _tokens[i];\\n            uint256 bal = _records[t].balance;\\n            uint256 tokenAmountIn = bmul(ratio, bal);\\n            require(tokenAmountIn != 0, \\\"ERR_MATH_APPROX\\\");\\n            require(tokenAmountIn <= maxAmountsIn[i], \\\"ERR_LIMIT_IN\\\");\\n            _records[t].balance = badd(_records[t].balance, tokenAmountIn);\\n            emit LOG_JOIN(msg.sender, t, tokenAmountIn);\\n            _pullUnderlying(t, msg.sender, tokenAmountIn);\\n        }\\n        _mintPoolShare(poolAmountOut);\\n        _pushPoolShare(msg.sender, poolAmountOut);\\n    }\\n\\n    function exitPool(uint256 poolAmountIn, uint256[] calldata minAmountsOut) external _logs_ _lock_ {\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\n\\n        uint256 poolTotal = totalSupply();\\n        uint256 exitFee = bmul(poolAmountIn, EXIT_FEE);\\n        uint256 pAiAfterExitFee = bsub(poolAmountIn, exitFee);\\n        uint256 ratio = bdiv(pAiAfterExitFee, poolTotal);\\n        require(ratio != 0, \\\"ERR_MATH_APPROX\\\");\\n\\n        _pullPoolShare(msg.sender, poolAmountIn);\\n        _pushPoolShare(_factory, exitFee);\\n        _burnPoolShare(pAiAfterExitFee);\\n\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            address t = _tokens[i];\\n            uint256 bal = _records[t].balance;\\n            uint256 tokenAmountOut = bmul(ratio, bal);\\n            require(tokenAmountOut != 0, \\\"ERR_MATH_APPROX\\\");\\n            require(tokenAmountOut >= minAmountsOut[i], \\\"ERR_LIMIT_OUT\\\");\\n            _records[t].balance = bsub(_records[t].balance, tokenAmountOut);\\n            emit LOG_EXIT(msg.sender, t, tokenAmountOut);\\n            _pushUnderlying(t, msg.sender, tokenAmountOut);\\n        }\\n    }\\n\\n    function calcExitPool(uint256 poolAmountIn, uint256[] calldata minAmountsOut)\\n        external\\n        view\\n        returns (uint256[] memory)\\n    {\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\n\\n        uint256 poolTotal = totalSupply();\\n        uint256 exitFee = bmul(poolAmountIn, EXIT_FEE);\\n        uint256 pAiAfterExitFee = bsub(poolAmountIn, exitFee);\\n        uint256 ratio = bdiv(pAiAfterExitFee, poolTotal);\\n\\n        uint256[] memory _amounts = new uint256[](_tokens.length * 2);\\n\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            address t = _tokens[i];\\n            uint256 bal = _records[t].balance;\\n\\n            _amounts[i] = bmul(ratio, bal);\\n            _amounts[_tokens.length + i] = minAmountsOut[i];\\n            require(_amounts[i] >= minAmountsOut[i], \\\"ERR_LIMIT_OUT\\\");\\n        }\\n\\n        return _amounts;\\n    }\\n\\n    function swapExactAmountIn(\\n        address tokenIn,\\n        uint256 tokenAmountIn,\\n        address tokenOut,\\n        uint256 minAmountOut,\\n        uint256 maxPrice\\n    ) external _logs_ _lock_ returns (uint256 tokenAmountOut, uint256 spotPriceAfter) {\\n        require(_records[tokenIn].bound, \\\"ERR_NOT_BOUND\\\");\\n        require(_records[tokenOut].bound, \\\"ERR_NOT_BOUND\\\");\\n        require(_publicSwap, \\\"ERR_SWAP_NOT_PUBLIC\\\");\\n\\n        Record storage inRecord = _records[address(tokenIn)];\\n        Record storage outRecord = _records[address(tokenOut)];\\n\\n        require(tokenAmountIn <= bmul(inRecord.balance, MAX_IN_RATIO), \\\"ERR_MAX_IN_RATIO\\\");\\n\\n        uint256 spotPriceBefore =\\n            calcSpotPrice(inRecord.balance, inRecord.denorm, outRecord.balance, outRecord.denorm, _swapFee);\\n        require(spotPriceBefore <= maxPrice, \\\"ERR_BAD_LIMIT_PRICE\\\");\\n\\n        tokenAmountOut = calcOutGivenIn(\\n            inRecord.balance,\\n            inRecord.denorm,\\n            outRecord.balance,\\n            outRecord.denorm,\\n            tokenAmountIn,\\n            _swapFee\\n        );\\n        require(tokenAmountOut >= minAmountOut, \\\"ERR_LIMIT_OUT\\\");\\n\\n        inRecord.balance = badd(inRecord.balance, tokenAmountIn);\\n        outRecord.balance = bsub(outRecord.balance, tokenAmountOut);\\n\\n        spotPriceAfter = calcSpotPrice(\\n            inRecord.balance,\\n            inRecord.denorm,\\n            outRecord.balance,\\n            outRecord.denorm,\\n            _swapFee\\n        );\\n        require(spotPriceAfter >= spotPriceBefore, \\\"ERR_MATH_APPROX\\\");\\n        require(spotPriceAfter <= maxPrice, \\\"ERR_LIMIT_PRICE\\\");\\n        require(spotPriceBefore <= bdiv(tokenAmountIn, tokenAmountOut), \\\"ERR_MATH_APPROX\\\");\\n\\n        emit LOG_SWAP(msg.sender, tokenIn, tokenOut, tokenAmountIn, tokenAmountOut);\\n\\n        _pullUnderlying(tokenIn, msg.sender, tokenAmountIn);\\n        _pushUnderlying(tokenOut, msg.sender, tokenAmountOut);\\n\\n        return (tokenAmountOut, spotPriceAfter);\\n    }\\n\\n    function swapExactAmountOut(\\n        address tokenIn,\\n        uint256 maxAmountIn,\\n        address tokenOut,\\n        uint256 tokenAmountOut,\\n        uint256 maxPrice\\n    ) external _logs_ _lock_ returns (uint256 tokenAmountIn, uint256 spotPriceAfter) {\\n        require(_records[tokenIn].bound, \\\"ERR_NOT_BOUND\\\");\\n        require(_records[tokenOut].bound, \\\"ERR_NOT_BOUND\\\");\\n        require(_publicSwap, \\\"ERR_SWAP_NOT_PUBLIC\\\");\\n\\n        Record storage inRecord = _records[address(tokenIn)];\\n        Record storage outRecord = _records[address(tokenOut)];\\n\\n        require(tokenAmountOut <= bmul(outRecord.balance, MAX_OUT_RATIO), \\\"ERR_MAX_OUT_RATIO\\\");\\n\\n        uint256 spotPriceBefore =\\n            calcSpotPrice(inRecord.balance, inRecord.denorm, outRecord.balance, outRecord.denorm, _swapFee);\\n        require(spotPriceBefore <= maxPrice, \\\"ERR_BAD_LIMIT_PRICE\\\");\\n\\n        tokenAmountIn = calcInGivenOut(\\n            inRecord.balance,\\n            inRecord.denorm,\\n            outRecord.balance,\\n            outRecord.denorm,\\n            tokenAmountOut,\\n            _swapFee\\n        );\\n        require(tokenAmountIn <= maxAmountIn, \\\"ERR_LIMIT_IN\\\");\\n\\n        inRecord.balance = badd(inRecord.balance, tokenAmountIn);\\n        outRecord.balance = bsub(outRecord.balance, tokenAmountOut);\\n\\n        spotPriceAfter = calcSpotPrice(\\n            inRecord.balance,\\n            inRecord.denorm,\\n            outRecord.balance,\\n            outRecord.denorm,\\n            _swapFee\\n        );\\n        require(spotPriceAfter >= spotPriceBefore, \\\"ERR_MATH_APPROX\\\");\\n        require(spotPriceAfter <= maxPrice, \\\"ERR_LIMIT_PRICE\\\");\\n        require(spotPriceBefore <= bdiv(tokenAmountIn, tokenAmountOut), \\\"ERR_MATH_APPROX\\\");\\n\\n        emit LOG_SWAP(msg.sender, tokenIn, tokenOut, tokenAmountIn, tokenAmountOut);\\n\\n        _pullUnderlying(tokenIn, msg.sender, tokenAmountIn);\\n        _pushUnderlying(tokenOut, msg.sender, tokenAmountOut);\\n\\n        return (tokenAmountIn, spotPriceAfter);\\n    }\\n\\n    function joinswapExternAmountIn(\\n        address tokenIn,\\n        uint256 tokenAmountIn,\\n        uint256 minPoolAmountOut\\n    ) external _logs_ _lock_ returns (uint256 poolAmountOut) {\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\n        require(_records[tokenIn].bound, \\\"ERR_NOT_BOUND\\\");\\n        require(tokenAmountIn <= bmul(_records[tokenIn].balance, MAX_IN_RATIO), \\\"ERR_MAX_IN_RATIO\\\");\\n\\n        Record storage inRecord = _records[tokenIn];\\n\\n        poolAmountOut = calcPoolOutGivenSingleIn(\\n            inRecord.balance,\\n            inRecord.denorm,\\n            _totalSupply,\\n            _totalWeight,\\n            tokenAmountIn,\\n            _swapFee\\n        );\\n\\n        require(poolAmountOut >= minPoolAmountOut, \\\"ERR_LIMIT_OUT\\\");\\n\\n        inRecord.balance = badd(inRecord.balance, tokenAmountIn);\\n\\n        emit LOG_JOIN(msg.sender, tokenIn, tokenAmountIn);\\n\\n        _mintPoolShare(poolAmountOut);\\n        _pushPoolShare(msg.sender, poolAmountOut);\\n        _pullUnderlying(tokenIn, msg.sender, tokenAmountIn);\\n\\n        return poolAmountOut;\\n    }\\n\\n    function joinswapPoolAmountOut(\\n        address tokenIn,\\n        uint256 poolAmountOut,\\n        uint256 maxAmountIn\\n    ) external _logs_ _lock_ returns (uint256 tokenAmountIn) {\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\n        require(_records[tokenIn].bound, \\\"ERR_NOT_BOUND\\\");\\n\\n        Record storage inRecord = _records[tokenIn];\\n\\n        tokenAmountIn = calcSingleInGivenPoolOut(\\n            inRecord.balance,\\n            inRecord.denorm,\\n            _totalSupply,\\n            _totalWeight,\\n            poolAmountOut,\\n            _swapFee\\n        );\\n\\n        require(tokenAmountIn != 0, \\\"ERR_MATH_APPROX\\\");\\n        require(tokenAmountIn <= maxAmountIn, \\\"ERR_LIMIT_IN\\\");\\n\\n        require(tokenAmountIn <= bmul(_records[tokenIn].balance, MAX_IN_RATIO), \\\"ERR_MAX_IN_RATIO\\\");\\n\\n        inRecord.balance = badd(inRecord.balance, tokenAmountIn);\\n\\n        emit LOG_JOIN(msg.sender, tokenIn, tokenAmountIn);\\n\\n        _mintPoolShare(poolAmountOut);\\n        _pushPoolShare(msg.sender, poolAmountOut);\\n        _pullUnderlying(tokenIn, msg.sender, tokenAmountIn);\\n\\n        return tokenAmountIn;\\n    }\\n\\n    function exitswapPoolAmountIn(\\n        address tokenOut,\\n        uint256 poolAmountIn,\\n        uint256 minAmountOut\\n    ) external _logs_ _lock_ returns (uint256 tokenAmountOut) {\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\n        require(_records[tokenOut].bound, \\\"ERR_NOT_BOUND\\\");\\n\\n        Record storage outRecord = _records[tokenOut];\\n\\n        tokenAmountOut = calcSingleOutGivenPoolIn(\\n            outRecord.balance,\\n            outRecord.denorm,\\n            _totalSupply,\\n            _totalWeight,\\n            poolAmountIn,\\n            _swapFee\\n        );\\n\\n        require(tokenAmountOut >= minAmountOut, \\\"ERR_LIMIT_OUT\\\");\\n\\n        require(tokenAmountOut <= bmul(_records[tokenOut].balance, MAX_OUT_RATIO), \\\"ERR_MAX_OUT_RATIO\\\");\\n\\n        outRecord.balance = bsub(outRecord.balance, tokenAmountOut);\\n\\n        uint256 exitFee = bmul(poolAmountIn, EXIT_FEE);\\n\\n        emit LOG_EXIT(msg.sender, tokenOut, tokenAmountOut);\\n\\n        _pullPoolShare(msg.sender, poolAmountIn);\\n        _burnPoolShare(bsub(poolAmountIn, exitFee));\\n        _pushPoolShare(_factory, exitFee);\\n        _pushUnderlying(tokenOut, msg.sender, tokenAmountOut);\\n\\n        return tokenAmountOut;\\n    }\\n\\n    function exitswapExternAmountOut(\\n        address tokenOut,\\n        uint256 tokenAmountOut,\\n        uint256 maxPoolAmountIn\\n    ) external _logs_ _lock_ returns (uint256 poolAmountIn) {\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\n        require(_records[tokenOut].bound, \\\"ERR_NOT_BOUND\\\");\\n        require(tokenAmountOut <= bmul(_records[tokenOut].balance, MAX_OUT_RATIO), \\\"ERR_MAX_OUT_RATIO\\\");\\n\\n        Record storage outRecord = _records[tokenOut];\\n\\n        poolAmountIn = calcPoolInGivenSingleOut(\\n            outRecord.balance,\\n            outRecord.denorm,\\n            _totalSupply,\\n            _totalWeight,\\n            tokenAmountOut,\\n            _swapFee\\n        );\\n\\n        require(poolAmountIn != 0, \\\"ERR_MATH_APPROX\\\");\\n        require(poolAmountIn <= maxPoolAmountIn, \\\"ERR_LIMIT_IN\\\");\\n\\n        outRecord.balance = bsub(outRecord.balance, tokenAmountOut);\\n\\n        uint256 exitFee = bmul(poolAmountIn, EXIT_FEE);\\n\\n        emit LOG_EXIT(msg.sender, tokenOut, tokenAmountOut);\\n\\n        _pullPoolShare(msg.sender, poolAmountIn);\\n        _burnPoolShare(bsub(poolAmountIn, exitFee));\\n        _pushPoolShare(_factory, exitFee);\\n        _pushUnderlying(tokenOut, msg.sender, tokenAmountOut);\\n\\n        return poolAmountIn;\\n    }\\n\\n    // ==\\n    // 'Underlying' token-manipulation functions make external calls but are NOT locked\\n    // You must `_lock_` or otherwise ensure reentry-safety\\n\\n    function _pullUnderlying(\\n        address erc20,\\n        address from,\\n        uint256 amount\\n    ) internal {\\n        bool xfer = IERC20Balancer(erc20).transferFrom(from, address(this), amount);\\n        require(xfer, \\\"ERR_ERC20_FALSE\\\");\\n    }\\n\\n    function _pushUnderlying(\\n        address erc20,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool xfer = IERC20Balancer(erc20).transfer(to, amount);\\n        require(xfer, \\\"ERR_ERC20_FALSE\\\");\\n    }\\n\\n    function _pullPoolShare(address from, uint256 amount) internal {\\n        _pull(from, amount);\\n    }\\n\\n    function _pushPoolShare(address to, uint256 amount) internal {\\n        _push(to, amount);\\n    }\\n\\n    function _mintPoolShare(uint256 amount) internal {\\n        _mint(amount);\\n    }\\n\\n    function _burnPoolShare(uint256 amount) internal {\\n        _burn(amount);\\n    }\\n}\\n\",\"keccak256\":\"0x776103e689b42b4ab375106ed1183fd14fc7b842ff4eaff52de716cdb1689d92\",\"license\":\"MIT\"},\"contracts/balancer/BToken.sol\":{\"content\":\"// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\nimport \\\"./BNum.sol\\\";\\n\\ninterface IERC20Balancer {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address whom) external view returns (uint256);\\n\\n    function allowance(address src, address dst) external view returns (uint256);\\n\\n    function approve(address dst, uint256 amt) external returns (bool);\\n\\n    function transfer(address dst, uint256 amt) external returns (bool);\\n\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 amt\\n    ) external returns (bool);\\n}\\n\\ncontract BTokenBase is BNum {\\n    mapping(address => uint256) internal _balance;\\n    mapping(address => mapping(address => uint256)) internal _allowance;\\n    uint256 internal _totalSupply;\\n\\n    event Approval(address indexed src, address indexed dst, uint256 amt);\\n    event Transfer(address indexed src, address indexed dst, uint256 amt);\\n\\n    function _mint(uint256 amt) internal {\\n        _balance[address(this)] = badd(_balance[address(this)], amt);\\n        _totalSupply = badd(_totalSupply, amt);\\n        emit Transfer(address(0), address(this), amt);\\n    }\\n\\n    function _burn(uint256 amt) internal {\\n        require(_balance[address(this)] >= amt, \\\"ERR_INSUFFICIENT_BAL\\\");\\n        _balance[address(this)] = bsub(_balance[address(this)], amt);\\n        _totalSupply = bsub(_totalSupply, amt);\\n        emit Transfer(address(this), address(0), amt);\\n    }\\n\\n    function _move(\\n        address src,\\n        address dst,\\n        uint256 amt\\n    ) internal {\\n        require(_balance[src] >= amt, \\\"ERR_INSUFFICIENT_BAL\\\");\\n        _balance[src] = bsub(_balance[src], amt);\\n        _balance[dst] = badd(_balance[dst], amt);\\n        emit Transfer(src, dst, amt);\\n    }\\n\\n    function _push(address to, uint256 amt) internal {\\n        _move(address(this), to, amt);\\n    }\\n\\n    function _pull(address from, uint256 amt) internal {\\n        _move(from, address(this), amt);\\n    }\\n}\\n\\ncontract BToken is BTokenBase, IERC20Balancer {\\n    string private _name = \\\"Balancer Pool Token\\\";\\n    string private _symbol = \\\"BPT\\\";\\n    uint8 private _decimals = 18;\\n\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    function allowance(address src, address dst) external view override returns (uint256) {\\n        return _allowance[src][dst];\\n    }\\n\\n    function balanceOf(address whom) external view override returns (uint256) {\\n        return _balance[whom];\\n    }\\n\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function approve(address dst, uint256 amt) external override returns (bool) {\\n        _allowance[msg.sender][dst] = amt;\\n        emit Approval(msg.sender, dst, amt);\\n        return true;\\n    }\\n\\n    function increaseApproval(address dst, uint256 amt) external returns (bool) {\\n        _allowance[msg.sender][dst] = badd(_allowance[msg.sender][dst], amt);\\n        emit Approval(msg.sender, dst, _allowance[msg.sender][dst]);\\n        return true;\\n    }\\n\\n    function decreaseApproval(address dst, uint256 amt) external returns (bool) {\\n        uint256 oldValue = _allowance[msg.sender][dst];\\n        if (amt > oldValue) {\\n            _allowance[msg.sender][dst] = 0;\\n        } else {\\n            _allowance[msg.sender][dst] = bsub(oldValue, amt);\\n        }\\n        emit Approval(msg.sender, dst, _allowance[msg.sender][dst]);\\n        return true;\\n    }\\n\\n    function transfer(address dst, uint256 amt) external override returns (bool) {\\n        _move(msg.sender, dst, amt);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 amt\\n    ) external override returns (bool) {\\n        require(msg.sender == src || amt <= _allowance[src][msg.sender], \\\"ERR_BTOKEN_BAD_CALLER\\\");\\n        _move(src, dst, amt);\\n        if (msg.sender != src && _allowance[src][msg.sender] != uint256(-1)) {\\n            _allowance[src][msg.sender] = bsub(_allowance[src][msg.sender], amt);\\n            emit Approval(msg.sender, dst, _allowance[src][msg.sender]);\\n        }\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x96a133234ad4896507bb420719cd57c33b17499c87558016adc9fc1b30d78eca\",\"license\":\"MIT\"},\"contracts/libraries/CalculateLinesToBPoolOdds.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\nimport \\\"./SafeMathUint256.sol\\\";\\nimport \\\"./SafeMathInt256.sol\\\";\\n\\nabstract contract CalculateLinesToBPoolOdds {\\n    using SafeMathUint256 for uint256;\\n    using SafeMathInt256 for int256;\\n\\n    function evenOdds(bool _invalid, uint256 _outcomes) internal pure returns (uint256[] memory _odds) {\\n        uint256 _size = _outcomes + (_invalid ? 1 : 0);\\n        _odds = new uint256[](_size);\\n\\n        if (_invalid) _odds[0] = 1e18; // 2%\\n\\n        uint256 _each = (_invalid ? 49e18 : 50e18) / _outcomes;\\n        for (uint256 i = _invalid ? 1 : 0; i < _size; i++) {\\n            _odds[i] = _each;\\n        }\\n    }\\n\\n    function oddsFromLines(int256 _moneyline1, int256 _moneyline2) internal pure returns (uint256[] memory _odds) {\\n        uint256 _odds1 = __calcLineToOdds(_moneyline1);\\n        uint256 _odds2 = __calcLineToOdds(_moneyline2);\\n\\n        uint256 _total = _odds1 + _odds2;\\n\\n        _odds1 = uint256(49e18).mul(_odds1).div(_total);\\n        _odds2 = uint256(49e18).mul(_odds2).div(_total);\\n\\n        require(_odds1 >= 1e18, \\\"Moneyline odds are too skewed: would have under 2% odds\\\");\\n        require(_odds2 >= 1e18, \\\"Moneyline odds are too skewed: would have under 2% odds\\\");\\n\\n        _odds = new uint256[](3);\\n        _odds[0] = 1e18; // Invalid, 2%\\n        _odds[1] = _odds1;\\n        _odds[2] = _odds2;\\n    }\\n\\n    function __calcLineToOdds(int256 _line) internal pure returns (uint256) {\\n        if (_line < 0) {\\n            // favored\\n            uint256 _posLine = uint256(-_line);\\n            return _posLine.mul(49e18).div(_posLine.add(100)); // 49e18 * _line / (_line + 100)\\n        } else {\\n            // underdog\\n            return uint256(4900e18).div(uint256(_line).add(100)); // 49e18 * 100 / (_line + 100)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8feae60cfe4f6f85223fcf781d29a2bf161235b79da054b04f2c91f7a067f192\",\"license\":\"MIT\"},\"contracts/libraries/IERC20Full.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IERC20Full is IERC20 {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x228083482ab7326cdb12ae8cb7dcd8d3b805651e35c08c29a7b0a54e0e97fbb0\",\"license\":\"MIT\"},\"contracts/libraries/IOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\ninterface IOwnable {\\n    function getOwner() external view returns (address);\\n\\n    function transferOwnership(address _newOwner) external returns (bool);\\n}\\n\",\"keccak256\":\"0xace52430f7fd5468e14cb5a8f91f66daa9518d8393b257a3d01c5899d4828000\",\"license\":\"MIT\"},\"contracts/libraries/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\nimport \\\"./IOwnable.sol\\\";\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\\"user permissions\\\".\\n */\\nabstract contract Ownable is IOwnable {\\n    address internal owner;\\n\\n    /**\\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n     * account.\\n     */\\n    constructor() {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    function getOwner() public view override returns (address) {\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n     * @param _newOwner The address to transfer ownership to.\\n     */\\n    function transferOwnership(address _newOwner) public override onlyOwner returns (bool) {\\n        require(_newOwner != address(0));\\n        onTransferOwnership(owner, _newOwner);\\n        owner = _newOwner;\\n        return true;\\n    }\\n\\n    // Subclasses of this token may want to send additional logs through the centralized Augur log emitter contract\\n    function onTransferOwnership(address, address) internal virtual;\\n}\\n\",\"keccak256\":\"0x65f237e09612478773b06aa74b21364f4ae25b6c419793be79ab9aa0258e57ef\",\"license\":\"MIT\"},\"contracts/libraries/SafeMathInt256.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\n/**\\n * @title SafeMathInt256\\n * @dev Int256 math operations with safety checks that throw on error\\n */\\nlibrary SafeMathInt256 {\\n    // Signed ints with n bits can range from -2**(n-1) to (2**(n-1) - 1)\\n    int256 private constant INT256_MIN = -2**(255);\\n    int256 private constant INT256_MAX = (2**(255) - 1);\\n\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a * b;\\n        require(a == 0 || c / a == b);\\n        return c;\\n    }\\n\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        // No need to check for dividing by 0 -- Solidity automatically throws on division by 0\\n        int256 c = a / b;\\n        return c;\\n    }\\n\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        require(((a >= 0) && (b >= a - INT256_MAX)) || ((a < 0) && (b <= a - INT256_MIN)));\\n        return a - b;\\n    }\\n\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        require(((a >= 0) && (b <= INT256_MAX - a)) || ((a < 0) && (b >= INT256_MIN - a)));\\n        return a + b;\\n    }\\n\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        if (a <= b) {\\n            return a;\\n        } else {\\n            return b;\\n        }\\n    }\\n\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        if (a >= b) {\\n            return a;\\n        } else {\\n            return b;\\n        }\\n    }\\n\\n    function abs(int256 a) internal pure returns (int256) {\\n        if (a < 0) {\\n            return -a;\\n        }\\n        return a;\\n    }\\n\\n    function getInt256Min() internal pure returns (int256) {\\n        return INT256_MIN;\\n    }\\n\\n    function getInt256Max() internal pure returns (int256) {\\n        return INT256_MAX;\\n    }\\n\\n    // Float [fixed point] Operations\\n    function fxpMul(\\n        int256 a,\\n        int256 b,\\n        int256 base\\n    ) internal pure returns (int256) {\\n        return div(mul(a, b), base);\\n    }\\n\\n    function fxpDiv(\\n        int256 a,\\n        int256 b,\\n        int256 base\\n    ) internal pure returns (int256) {\\n        return div(mul(a, base), b);\\n    }\\n\\n    function sqrt(int256 y) internal pure returns (int256 z) {\\n        if (y > 3) {\\n            int256 x = (y + 1) / 2;\\n            z = y;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x714309025fa79f257ce215aca9bd5bd2b4c1cc5b4e14579fb815da218f8350a5\",\"license\":\"MIT\"},\"contracts/libraries/SafeMathUint256.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\n/**\\n * @title SafeMathUint256\\n * @dev Uint256 math operations with safety checks that throw on error\\n */\\nlibrary SafeMathUint256 {\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b);\\n\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a);\\n        return a - b;\\n    }\\n\\n    function subS(\\n        uint256 a,\\n        uint256 b,\\n        string memory message\\n    ) internal pure returns (uint256) {\\n        require(b <= a, message);\\n        return a - b;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a);\\n        return c;\\n    }\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a <= b) {\\n            return a;\\n        } else {\\n            return b;\\n        }\\n    }\\n\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a >= b) {\\n            return a;\\n        } else {\\n            return b;\\n        }\\n    }\\n\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        if (y > 3) {\\n            uint256 x = (y + 1) / 2;\\n            z = y;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n\\n    function getUint256Min() internal pure returns (uint256) {\\n        return 0;\\n    }\\n\\n    function getUint256Max() internal pure returns (uint256) {\\n        // 2 ** 256 - 1\\n        return 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\\n    }\\n\\n    function isMultipleOf(uint256 a, uint256 b) internal pure returns (bool) {\\n        return a % b == 0;\\n    }\\n\\n    // Float [fixed point] Operations\\n    function fxpMul(\\n        uint256 a,\\n        uint256 b,\\n        uint256 base\\n    ) internal pure returns (uint256) {\\n        return div(mul(a, b), base);\\n    }\\n\\n    function fxpDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 base\\n    ) internal pure returns (uint256) {\\n        return div(mul(a, base), b);\\n    }\\n}\\n\",\"keccak256\":\"0x96f8c0fa44dfb1d34495acebab8f6385d50a34132bd28b02a6589a976f869a87\",\"license\":\"MIT\"},\"contracts/turbo/AbstractMarketFactoryV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"../libraries/IERC20Full.sol\\\";\\nimport \\\"../balancer/BPool.sol\\\";\\nimport \\\"./TurboShareTokenFactory.sol\\\";\\nimport \\\"./FeePot.sol\\\";\\n\\nabstract contract AbstractMarketFactoryV2 is TurboShareTokenFactory, Ownable {\\n    using SafeMathUint256 for uint256;\\n\\n    // Should always have ID. Others are optional.\\n    // event MarketCreated(uint256 id, address settlementAddress, uint256 endTime, ...);\\n\\n    // Should always have ID. Others are optional.\\n    // event MarketResolved(uint256 id, ...);\\n\\n    event SharesMinted(uint256 id, uint256 amount, address receiver);\\n    event SharesBurned(uint256 id, uint256 amount, address receiver);\\n    event WinningsClaimed(\\n        uint256 id,\\n        address winningOutcome,\\n        uint256 amount,\\n        uint256 settlementFee,\\n        uint256 payout,\\n        address indexed receiver\\n    );\\n\\n    event SettlementFeeClaimed(address settlementAddress, uint256 amount, address indexed receiver);\\n    event ProtocolFeeClaimed(address protocol, uint256 amount);\\n\\n    event ProtocolChanged(address protocol);\\n    event ProtocolFeeChanged(uint256 fee);\\n    event SettlementFeeChanged(uint256 fee);\\n    event StakerFeeChanged(uint256 fee);\\n\\n    IERC20Full public collateral;\\n    FeePot public feePot;\\n\\n    // fees are out of 1e18 and only apply to new markets\\n    uint256 public stakerFee;\\n    uint256 public settlementFee;\\n    uint256 public protocolFee;\\n\\n    address public protocol; // collects protocol fees\\n\\n    uint256 public accumulatedProtocolFee = 0;\\n    // settlement address => amount of collateral\\n    mapping(address => uint256) public accumulatedSettlementFees;\\n\\n    // How many shares equals one collateral.\\n    // Necessary to account for math errors from small numbers in balancer.\\n    // shares = collateral / shareFactor\\n    // collateral = shares * shareFactor\\n    uint256 public shareFactor;\\n\\n    struct Market {\\n        address settlementAddress;\\n        OwnedERC20[] shareTokens;\\n        uint256 endTime;\\n        OwnedERC20 winner;\\n        uint256 settlementFee;\\n        uint256 protocolFee;\\n        uint256 stakerFee;\\n        uint256 creationTimestamp;\\n        uint256[] initialOdds;\\n    }\\n    Market[] internal markets;\\n\\n    uint256 private constant MAX_UINT = 2**256 - 1;\\n\\n    constructor(\\n        address _owner,\\n        IERC20Full _collateral,\\n        uint256 _shareFactor,\\n        FeePot _feePot,\\n        uint256 _stakerFee,\\n        uint256 _settlementFee,\\n        address _protocol,\\n        uint256 _protocolFee\\n    ) {\\n        owner = _owner; // controls fees for new markets\\n        collateral = _collateral;\\n        shareFactor = _shareFactor;\\n        feePot = _feePot;\\n        stakerFee = _stakerFee;\\n        settlementFee = _settlementFee;\\n        protocol = _protocol;\\n        protocolFee = _protocolFee;\\n\\n        _collateral.approve(address(_feePot), MAX_UINT);\\n\\n        // First market is always empty so that marketid zero means \\\"no market\\\"\\n        makeEmptyMarket();\\n    }\\n\\n    function makeEmptyMarket() internal {\\n        string[] memory _noStrings = new string[](0);\\n        uint256[] memory _noUint256s = new uint256[](0);\\n        markets.push(makeMarket(address(0), _noStrings, _noStrings, 0, _noUint256s));\\n    }\\n\\n    // function createMarket(address _settlementAddress, uint256 _endTime, ...) public returns (uint256);\\n\\n    function resolveMarket(uint256 _id) public virtual;\\n\\n    // Returns an empty struct if the market doesn't exist.\\n    // Can check market existence before calling this by comparing _id against markets.length.\\n    // Can check market existence of the return struct by checking that shareTokens[0] isn't the null address\\n    function getMarket(uint256 _id) public view returns (Market memory) {\\n        if (_id >= markets.length) {\\n            return Market(address(0), new OwnedERC20[](0), 0, OwnedERC20(0), 0, 0, 0, 0, new uint256[](0));\\n        } else {\\n            return markets[_id];\\n        }\\n    }\\n\\n    function marketCount() public view returns (uint256) {\\n        return markets.length;\\n    }\\n\\n    // Returns factory-specific details about a market.\\n    // function getMarketDetails(uint256 _id) public view returns (MarketDetails memory);\\n\\n    function mintShares(\\n        uint256 _id,\\n        uint256 _shareToMint,\\n        address _receiver\\n    ) public {\\n        require(markets.length > _id, \\\"No such market\\\");\\n        require(!isMarketResolved(_id), \\\"Cannot mint shares for resolved market\\\");\\n\\n        uint256 _cost = calcCost(_shareToMint);\\n        collateral.transferFrom(msg.sender, address(this), _cost);\\n\\n        Market memory _market = markets[_id];\\n        for (uint256 _i = 0; _i < _market.shareTokens.length; _i++) {\\n            _market.shareTokens[_i].trustedMint(_receiver, _shareToMint);\\n        }\\n\\n        emit SharesMinted(_id, _shareToMint, _receiver);\\n    }\\n\\n    function burnShares(\\n        uint256 _id,\\n        uint256 _sharesToBurn,\\n        address _receiver\\n    ) public returns (uint256) {\\n        require(markets.length > _id, \\\"No such market\\\");\\n        require(!isMarketResolved(_id), \\\"Cannot burn shares for resolved market\\\");\\n\\n        Market memory _market = markets[_id];\\n        for (uint256 _i = 0; _i < _market.shareTokens.length; _i++) {\\n            // errors if sender doesn't have enough shares\\n            _market.shareTokens[_i].trustedBurn(msg.sender, _sharesToBurn);\\n        }\\n\\n        uint256 _payout = calcCost(_sharesToBurn);\\n        uint256 _protocolFee = _payout.mul(_market.protocolFee).div(10**18);\\n        uint256 _stakerFee = _payout.mul(_market.stakerFee).div(10**18);\\n        _payout = _payout.sub(_protocolFee).sub(_stakerFee);\\n\\n        accumulatedProtocolFee += _protocolFee;\\n        collateral.transfer(_receiver, _payout);\\n        feePot.depositFees(_stakerFee);\\n\\n        emit SharesBurned(_id, _sharesToBurn, msg.sender);\\n        return _payout;\\n    }\\n\\n    function claimWinnings(uint256 _id, address _receiver) public returns (uint256) {\\n        if (!isMarketResolved(_id)) {\\n            // errors if market does not exist or is not resolved or resolvable\\n            resolveMarket(_id);\\n        }\\n\\n        Market memory _market = markets[_id];\\n        uint256 _winningShares = _market.winner.trustedBurnAll(msg.sender);\\n        _winningShares = (_winningShares / shareFactor) * shareFactor; // remove unusable dust\\n\\n        uint256 _payout = calcCost(_winningShares); // will fail if there are no winnings to claim\\n        uint256 _settlementFee = _payout.mul(_market.settlementFee).div(10**18);\\n        _payout = _payout.sub(_settlementFee);\\n\\n        accumulatedSettlementFees[_market.settlementAddress] += _settlementFee;\\n        collateral.transfer(_receiver, _payout);\\n\\n        emit WinningsClaimed(_id, address(_market.winner), _winningShares, _settlementFee, _payout, _receiver);\\n        return _payout;\\n    }\\n\\n    function claimManyWinnings(uint256[] memory _ids, address _receiver) public returns (uint256) {\\n        uint256 _totalWinnings = 0;\\n        for (uint256 i = 0; i < _ids.length; i++) {\\n            _totalWinnings = _totalWinnings.add(claimWinnings(_ids[i], _receiver));\\n        }\\n        return _totalWinnings;\\n    }\\n\\n    function claimSettlementFees(address _receiver) public returns (uint256) {\\n        uint256 _fees = accumulatedSettlementFees[msg.sender];\\n        if (_fees > 0) {\\n            accumulatedSettlementFees[msg.sender] = 0;\\n            collateral.transfer(_receiver, _fees);\\n            emit SettlementFeeClaimed(msg.sender, _fees, _receiver);\\n        }\\n        return _fees;\\n    }\\n\\n    function claimProtocolFees() public returns (uint256) {\\n        require(msg.sender == protocol || msg.sender == address(this), \\\"Only protocol can claim protocol fee\\\");\\n        uint256 _fees = accumulatedProtocolFee;\\n        if (_fees > 0) {\\n            accumulatedProtocolFee = 0;\\n            collateral.transfer(protocol, _fees);\\n            emit ProtocolFeeClaimed(protocol, _fees);\\n        }\\n        return _fees;\\n    }\\n\\n    function setSettlementFee(uint256 _newFee) external onlyOwner {\\n        settlementFee = _newFee;\\n        emit SettlementFeeChanged(_newFee);\\n    }\\n\\n    function setStakerFee(uint256 _newFee) external onlyOwner {\\n        stakerFee = _newFee;\\n        emit StakerFeeChanged(_newFee);\\n    }\\n\\n    function setProtocolFee(uint256 _newFee) external onlyOwner {\\n        protocolFee = _newFee;\\n        emit ProtocolFeeChanged(_newFee);\\n    }\\n\\n    function setProtocol(address _newProtocol, bool _claimFirst) external onlyOwner {\\n        if (_claimFirst) {\\n            claimProtocolFees();\\n        }\\n        protocol = _newProtocol;\\n        emit ProtocolChanged(_newProtocol);\\n    }\\n\\n    function makeMarket(\\n        address _settlementAddress,\\n        string[] memory _names,\\n        string[] memory _symbols,\\n        uint256 _endTime,\\n        uint256[] memory _initialOdds\\n    ) internal returns (Market memory _market) {\\n        _market = Market(\\n            _settlementAddress,\\n            createShareTokens(_names, _symbols, address(this)),\\n            _endTime,\\n            OwnedERC20(0),\\n            settlementFee,\\n            protocolFee,\\n            stakerFee,\\n            block.timestamp,\\n            _initialOdds\\n        );\\n    }\\n\\n    function isMarketResolved(uint256 _id) public view returns (bool) {\\n        Market memory _market = markets[_id];\\n        return _market.winner != OwnedERC20(0);\\n    }\\n\\n    // Only usable off-chain. Gas cost can easily eclipse block limit.\\n    function listUnresolvedMarkets() public view returns (uint256[] memory) {\\n        uint256 _totalUnresolved = 0;\\n        for (uint256 i = 0; i < markets.length; i++) {\\n            if (!isMarketResolved(i)) {\\n                _totalUnresolved++;\\n            }\\n        }\\n\\n        uint256[] memory _marketIds = new uint256[](_totalUnresolved);\\n\\n        uint256 n = 0;\\n        for (uint256 i = 0; i < markets.length; i++) {\\n            if (n >= _totalUnresolved) break;\\n\\n            if (!isMarketResolved(i)) {\\n                _marketIds[n] = i;\\n                n++;\\n            }\\n        }\\n\\n        return _marketIds;\\n    }\\n\\n    // shares => collateral\\n    function calcCost(uint256 _shares) public view returns (uint256) {\\n        require(\\n            _shares >= shareFactor && _shares % shareFactor == 0,\\n            \\\"Shares must be both greater than (or equal to) and divisible by shareFactor\\\"\\n        );\\n        return _shares / shareFactor;\\n    }\\n\\n    // collateral => shares\\n    function calcShares(uint256 _collateralIn) public view returns (uint256) {\\n        return _collateralIn * shareFactor;\\n    }\\n\\n    function onTransferOwnership(address, address) internal override {}\\n}\\n\",\"keccak256\":\"0xb200751d585d8e37e54ae0c0b601820660c26b28c96d3d5bc449635802163a97\",\"license\":\"MIT\"},\"contracts/turbo/FeePot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"../libraries/SafeMathUint256.sol\\\";\\nimport \\\"../libraries/IERC20Full.sol\\\";\\n\\ncontract FeePot is ERC20 {\\n    using SafeMathUint256 for uint256;\\n\\n    uint256 internal constant magnitude = 2**128;\\n\\n    IERC20Full public collateral;\\n    IERC20Full public reputationToken;\\n\\n    uint256 public magnifiedFeesPerShare;\\n\\n    mapping(address => uint256) public magnifiedFeesCorrections;\\n    mapping(address => uint256) public storedFees;\\n\\n    uint256 public feeReserve;\\n\\n    constructor(IERC20Full _collateral, IERC20Full _reputationToken)\\n        ERC20(\\n            string(abi.encodePacked(\\\"S_\\\", _reputationToken.symbol())),\\n            string(abi.encodePacked(\\\"S_\\\", _reputationToken.symbol()))\\n        )\\n    {\\n        collateral = _collateral;\\n        reputationToken = _reputationToken;\\n\\n        require(_collateral != IERC20Full(0));\\n    }\\n\\n    function depositFees(uint256 _amount) public returns (bool) {\\n        collateral.transferFrom(msg.sender, address(this), _amount);\\n        uint256 _totalSupply = totalSupply(); // after collateral.transferFrom to prevent reentrancy causing stale totalSupply\\n        if (_totalSupply == 0) {\\n            feeReserve = feeReserve.add(_amount);\\n            return true;\\n        }\\n        if (feeReserve > 0) {\\n            _amount = _amount.add(feeReserve);\\n            feeReserve = 0;\\n        }\\n        magnifiedFeesPerShare = magnifiedFeesPerShare.add((_amount).mul(magnitude) / _totalSupply);\\n        return true;\\n    }\\n\\n    function withdrawableFeesOf(address _owner) public view returns (uint256) {\\n        return earnedFeesOf(_owner).add(storedFees[_owner]);\\n    }\\n\\n    function earnedFeesOf(address _owner) public view returns (uint256) {\\n        uint256 _ownerBalance = balanceOf(_owner);\\n        uint256 _magnifiedFees = magnifiedFeesPerShare.mul(_ownerBalance);\\n        return _magnifiedFees.sub(magnifiedFeesCorrections[_owner]) / magnitude;\\n    }\\n\\n    function _transfer(\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) internal override {\\n        storedFees[_from] = storedFees[_from].add(earnedFeesOf(_from));\\n        super._transfer(_from, _to, _amount);\\n\\n        magnifiedFeesCorrections[_from] = magnifiedFeesPerShare.mul(balanceOf(_from));\\n        magnifiedFeesCorrections[_to] = magnifiedFeesCorrections[_to].add(magnifiedFeesPerShare.mul(_amount));\\n    }\\n\\n    function stake(uint256 _amount) external returns (bool) {\\n        reputationToken.transferFrom(msg.sender, address(this), _amount);\\n        _mint(msg.sender, _amount);\\n        magnifiedFeesCorrections[msg.sender] = magnifiedFeesCorrections[msg.sender].add(\\n            magnifiedFeesPerShare.mul(_amount)\\n        );\\n        return true;\\n    }\\n\\n    function exit(uint256 _amount) external returns (bool) {\\n        redeemInternal(msg.sender);\\n        _burn(msg.sender, _amount);\\n        reputationToken.transfer(msg.sender, _amount);\\n        magnifiedFeesCorrections[msg.sender] = magnifiedFeesPerShare.mul(balanceOf(msg.sender));\\n        return true;\\n    }\\n\\n    function redeem() public returns (bool) {\\n        redeemInternal(msg.sender);\\n        magnifiedFeesCorrections[msg.sender] = magnifiedFeesPerShare.mul(balanceOf(msg.sender));\\n        return true;\\n    }\\n\\n    function redeemInternal(address _account) internal {\\n        uint256 _withdrawableFees = withdrawableFeesOf(_account);\\n        if (_withdrawableFees > 0) {\\n            storedFees[_account] = 0;\\n            collateral.transfer(_account, _withdrawableFees);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4189f90e0c0d061643abdea7d166a863801cfedb488a99b018ddc52ff9bdd3b0\",\"license\":\"MIT\"},\"contracts/turbo/NFLMarketFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"../libraries/IERC20Full.sol\\\";\\nimport \\\"../balancer/BPool.sol\\\";\\nimport \\\"./AbstractMarketFactoryV2.sol\\\";\\nimport \\\"./FeePot.sol\\\";\\nimport \\\"../libraries/SafeMathInt256.sol\\\";\\nimport \\\"../libraries/CalculateLinesToBPoolOdds.sol\\\";\\n\\ncontract NFLMarketFactory is AbstractMarketFactoryV2, CalculateLinesToBPoolOdds {\\n    using SafeMathUint256 for uint256;\\n    using SafeMathInt256 for int256;\\n\\n    event MarketCreated(\\n        uint256 id,\\n        address creator,\\n        uint256 endTime,\\n        MarketType marketType,\\n        uint256 indexed eventId,\\n        string homeTeamName,\\n        uint256 homeTeamId,\\n        string awayTeamName,\\n        uint256 awayTeamId,\\n        uint256 estimatedStartTime,\\n        int256 score\\n    );\\n    event MarketResolved(uint256 id, address winner);\\n    event LinkNodeChanged(address newLinkNode);\\n\\n    enum MarketType {HeadToHead, Spread, OverUnder}\\n    enum HeadToHeadOutcome {\\n        NoContest, // 0\\n        Away, // 1\\n        Home // 2\\n    }\\n    enum SpreadOutcome {\\n        NoContest, // 0\\n        Away, // 1\\n        Home // 2\\n    }\\n    enum OverUnderOutcome {\\n        NoContest, // 0\\n        Over, // 1\\n        Under // 2\\n    }\\n    struct MarketDetails {\\n        uint256 eventId;\\n        string homeTeamName;\\n        uint256 homeTeamId;\\n        string awayTeamName;\\n        uint256 awayTeamId;\\n        uint256 estimatedStartTime;\\n        MarketType marketType;\\n        EventStatus eventStatus;\\n        // This value depends on the marketType.\\n        // HeadToHead: ignored\\n        // Spread: the home team spread\\n        // OverUnder: total score in game\\n        int256 value0;\\n    }\\n    // MarketId => MarketDetails\\n    mapping(uint256 => MarketDetails) internal marketDetails;\\n\\n    enum EventStatus {Unknown, Scheduled, Final, Postponed, Canceled}\\n    struct EventDetails {\\n        uint256[3] markets;\\n        uint256 startTime;\\n        uint256 homeScore;\\n        uint256 awayScore;\\n        EventStatus status;\\n        // If there is a resolution time then the market is resolved but not necessarily finalized.\\n        // A market is finalized when its last two score updates were identical.\\n        // Score updates must occur after a period of time specified by resolutionBuffer.\\n        // This mechanism exists to reduce the risk of bad scores being sent by the API then later corrected.\\n        // The downside is slower resolution.\\n        uint256 resolutionTime; // time since last score update\\n        bool finalized; // true after event resolves and has stable scores\\n    }\\n    // EventId => EventDetails\\n    mapping(uint256 => EventDetails) public events;\\n    uint256[] public listOfEvents;\\n\\n    address public linkNode;\\n    uint256 public sportId;\\n\\n    constructor(\\n        address _owner,\\n        IERC20Full _collateral,\\n        uint256 _shareFactor,\\n        FeePot _feePot,\\n        uint256 _stakerFee,\\n        uint256 _settlementFee,\\n        address _protocol,\\n        uint256 _protocolFee,\\n        address _linkNode,\\n        uint256 _sportId\\n    )\\n        AbstractMarketFactoryV2(\\n            _owner,\\n            _collateral,\\n            _shareFactor,\\n            _feePot,\\n            _stakerFee,\\n            _settlementFee,\\n            _protocol,\\n            _protocolFee\\n        )\\n    {\\n        linkNode = _linkNode;\\n        sportId = _sportId;\\n    }\\n\\n    function createMarket(\\n        uint256 _eventId,\\n        string memory _homeTeamName,\\n        uint256 _homeTeamId,\\n        string memory _awayTeamName,\\n        uint256 _awayTeamId,\\n        uint256 _startTimestamp,\\n        int256 _homeSpread,\\n        uint256 _totalScore,\\n        bool _makeSpread,\\n        bool _makeTotalScore,\\n        int256[2] memory _moneylines // [home,away]\\n    ) public returns (uint256[3] memory _ids) {\\n        require(msg.sender == linkNode, \\\"Only link node can create markets\\\");\\n\\n        uint256 _endTime = _startTimestamp.add(60 * 8); // 8 hours\\n\\n        _ids = events[_eventId].markets;\\n\\n        if (_ids[0] == 0 && _moneylines[0] != 0 && _moneylines[1] != 0) {\\n            _ids[0] = createHeadToHeadMarket(\\n                msg.sender,\\n                _endTime,\\n                _eventId,\\n                _homeTeamName,\\n                _homeTeamId,\\n                _awayTeamName,\\n                _awayTeamId,\\n                _startTimestamp,\\n                _moneylines\\n            );\\n        }\\n\\n        if (_ids[1] == 0 && _makeSpread) {\\n            // spread market hasn't been created and is ready to be created\\n            _ids[1] = createSpreadMarket(\\n                msg.sender,\\n                _endTime,\\n                _eventId,\\n                _homeTeamName,\\n                _homeTeamId,\\n                _awayTeamName,\\n                _awayTeamId,\\n                _startTimestamp,\\n                _homeSpread\\n            );\\n        }\\n\\n        if (_ids[2] == 0 && _makeTotalScore) {\\n            // over-under market hasn't been created and is ready to be created\\n            _ids[2] = createOverUnderMarket(\\n                msg.sender,\\n                _endTime,\\n                _eventId,\\n                _homeTeamName,\\n                _homeTeamId,\\n                _awayTeamName,\\n                _awayTeamId,\\n                _startTimestamp,\\n                _totalScore\\n            );\\n        }\\n\\n        events[_eventId].status = EventStatus.Scheduled;\\n        events[_eventId].startTime = _startTimestamp;\\n        events[_eventId].markets = _ids;\\n        listOfEvents.push(_eventId);\\n    }\\n\\n    function createHeadToHeadMarket(\\n        address _creator,\\n        uint256 _endTime,\\n        uint256 _eventId,\\n        string memory _homeTeamName,\\n        uint256 _homeTeamId,\\n        string memory _awayTeamName,\\n        uint256 _awayTeamId,\\n        uint256 _startTimestamp,\\n        int256[2] memory _moneylines // [home,away]\\n    ) internal returns (uint256) {\\n        string[] memory _outcomes = new string[](3);\\n        _outcomes[uint256(HeadToHeadOutcome.NoContest)] = \\\"No Contest / Draw\\\";\\n        _outcomes[uint256(HeadToHeadOutcome.Away)] = _awayTeamName;\\n        _outcomes[uint256(HeadToHeadOutcome.Home)] = _homeTeamName;\\n\\n        uint256 _id = markets.length;\\n        // moneylines is [home,away] but the outcomes are listed [NC,away,home] so they must be reversed\\n        markets.push(\\n            makeMarket(_creator, _outcomes, _outcomes, _endTime, oddsFromLines(_moneylines[1], _moneylines[0]))\\n        );\\n        marketDetails[_id] = MarketDetails(\\n            _eventId,\\n            _homeTeamName,\\n            _homeTeamId,\\n            _awayTeamName,\\n            _awayTeamId,\\n            _startTimestamp,\\n            MarketType.HeadToHead,\\n            EventStatus.Scheduled,\\n            0\\n        );\\n        emit MarketCreated(\\n            _id,\\n            _creator,\\n            _endTime,\\n            MarketType.HeadToHead,\\n            _eventId,\\n            _homeTeamName,\\n            _homeTeamId,\\n            _awayTeamName,\\n            _awayTeamId,\\n            _startTimestamp,\\n            0\\n        );\\n        return _id;\\n    }\\n\\n    function createSpreadMarket(\\n        address _creator,\\n        uint256 _endTime,\\n        uint256 _eventId,\\n        string memory _homeTeamName,\\n        uint256 _homeTeamId,\\n        string memory _awayTeamName,\\n        uint256 _awayTeamId,\\n        uint256 _startTimestamp,\\n        int256 _homeSpread\\n    ) internal returns (uint256) {\\n        string[] memory _outcomes = new string[](3);\\n        _outcomes[uint256(SpreadOutcome.NoContest)] = \\\"No Contest\\\";\\n        _outcomes[uint256(SpreadOutcome.Away)] = _awayTeamName;\\n        _outcomes[uint256(SpreadOutcome.Home)] = _homeTeamName;\\n\\n        // The spread is a quantity of tenths. So 55 is 5.5 and -6 is -60.\\n        // If the spread is a whole number then make it a half point more extreme, to eliminate ties.\\n        // So 50 becomes 55, -60 becomes -65, and 0 becomes 5.\\n        if (_homeSpread >= 0 && _homeSpread % 10 == 0) {\\n            _homeSpread += 5;\\n        } else if (_homeSpread < 0 && (-_homeSpread) % 10 == 0) {\\n            _homeSpread -= 5;\\n        }\\n\\n        uint256 _id = markets.length;\\n        markets.push(makeMarket(_creator, _outcomes, _outcomes, _endTime, evenOdds(true, 2)));\\n        marketDetails[_id] = MarketDetails(\\n            _eventId,\\n            _homeTeamName,\\n            _homeTeamId,\\n            _awayTeamName,\\n            _awayTeamId,\\n            _startTimestamp,\\n            MarketType.Spread,\\n            EventStatus.Scheduled,\\n            _homeSpread\\n        );\\n        emit MarketCreated(\\n            _id,\\n            _creator,\\n            _endTime,\\n            MarketType.Spread,\\n            _eventId,\\n            _homeTeamName,\\n            _homeTeamId,\\n            _awayTeamName,\\n            _awayTeamId,\\n            _startTimestamp,\\n            _homeSpread\\n        );\\n        return _id;\\n    }\\n\\n    function createOverUnderMarket(\\n        address _creator,\\n        uint256 _endTime,\\n        uint256 _eventId,\\n        string memory _homeTeamName,\\n        uint256 _homeTeamId,\\n        string memory _awayTeamName,\\n        uint256 _awayTeamId,\\n        uint256 _startTimestamp,\\n        uint256 _overUnderTotal\\n    ) internal returns (uint256) {\\n        string[] memory _outcomes = new string[](3);\\n        _outcomes[uint256(OverUnderOutcome.NoContest)] = \\\"No Contest\\\";\\n        _outcomes[uint256(OverUnderOutcome.Over)] = \\\"Over\\\";\\n        _outcomes[uint256(OverUnderOutcome.Under)] = \\\"Under\\\";\\n\\n        // The total is a quantity of tenths. So 55 is 5.5 and -6 is -60.\\n        // If the total is a whole number then make it a half point higher, to eliminate ties.\\n        // So 50 becomes 55 and 0 becomes 5.\\n        if (_overUnderTotal >= 0 && _overUnderTotal % 10 == 0) {\\n            _overUnderTotal += 5;\\n        }\\n\\n        uint256 _id = markets.length;\\n        markets.push(makeMarket(_creator, _outcomes, _outcomes, _endTime, evenOdds(true, 2)));\\n        marketDetails[_id] = MarketDetails(\\n            _eventId,\\n            _homeTeamName,\\n            _homeTeamId,\\n            _awayTeamName,\\n            _awayTeamId,\\n            _startTimestamp,\\n            MarketType.OverUnder,\\n            EventStatus.Scheduled,\\n            int256(_overUnderTotal)\\n        );\\n        emit MarketCreated(\\n            _id,\\n            _creator,\\n            _endTime,\\n            MarketType.OverUnder,\\n            _eventId,\\n            _homeTeamName,\\n            _homeTeamId,\\n            _awayTeamName,\\n            _awayTeamId,\\n            _startTimestamp,\\n            int256(_overUnderTotal)\\n        );\\n        return _id;\\n    }\\n\\n    function resolveMarket(uint256) public pure override {\\n        require(false, \\\"Only the link node can resolve the market, using trustedResolveMarkets\\\");\\n    }\\n\\n    function trustedResolveMarkets(\\n        uint256 _eventId,\\n        uint256 _eventStatus,\\n        uint256 _homeScore,\\n        uint256 _awayScore\\n    ) public {\\n        require(msg.sender == linkNode, \\\"Only link node can resolve markets\\\");\\n\\n        EventDetails storage _event = events[_eventId];\\n        uint256[3] memory _ids = _event.markets;\\n\\n        require(_ids[0] != 0 || _ids[1] != 0 || _ids[2] != 0, \\\"Cannot resolve markets that weren't created\\\");\\n\\n        require(EventStatus(_eventStatus) != EventStatus.Scheduled, \\\"cannot resolve SCHEDULED markets\\\");\\n\\n        // resolve markets as No Contest\\n        if (EventStatus(_eventStatus) != EventStatus.Final) {\\n            for (uint256 i = 0; i < _ids.length; i++) {\\n                uint256 _id = _ids[i];\\n                if (_id == 0) continue; // skip non-created markets\\n                OwnedERC20 _winner = markets[_id].shareTokens[0]; // 0th outcome is No Contest for all market types\\n                markets[_id].winner = _winner;\\n                emit MarketResolved(_id, address(_winner));\\n            }\\n            return;\\n        }\\n\\n        // only resolve markets that were created\\n        if (_ids[0] != 0) {\\n            resolveHeadToHeadMarket(_ids[0], _homeScore, _awayScore);\\n        }\\n        if (_ids[1] != 0) {\\n            resolveSpreadMarket(_ids[1], _homeScore, _awayScore);\\n        }\\n        if (_ids[2] != 0) {\\n            resolveOverUnderMarket(_ids[2], _homeScore, _awayScore);\\n        }\\n    }\\n\\n    function resolveHeadToHeadMarket(\\n        uint256 _id,\\n        uint256 _homeScore,\\n        uint256 _awayScore\\n    ) internal {\\n        OwnedERC20 _winner;\\n        if (_homeScore > _awayScore) {\\n            _winner = markets[_id].shareTokens[uint256(HeadToHeadOutcome.Home)]; // home team won\\n        } else if (_homeScore < _awayScore) {\\n            _winner = markets[_id].shareTokens[uint256(HeadToHeadOutcome.Away)]; // away team won\\n        } else {\\n            _winner = markets[_id].shareTokens[uint256(HeadToHeadOutcome.NoContest)]; // no contest\\n        }\\n\\n        markets[_id].winner = _winner;\\n        emit MarketResolved(_id, address(_winner));\\n    }\\n\\n    function resolveSpreadMarket(\\n        uint256 _id,\\n        uint256 _homeScore,\\n        uint256 _awayScore\\n    ) internal {\\n        MarketDetails memory _details = marketDetails[_id];\\n        int256 _targetSpread = _details.value0;\\n\\n        int256 _actualSpread = int256(_homeScore).sub(int256(_awayScore));\\n\\n        OwnedERC20 _winner;\\n        if (_actualSpread > _targetSpread) {\\n            _winner = markets[_id].shareTokens[uint256(SpreadOutcome.Home)]; // home spread greater\\n        } else if (_actualSpread < _targetSpread) {\\n            _winner = markets[_id].shareTokens[uint256(SpreadOutcome.Away)]; // home spread lesser\\n        } else {\\n            _winner = markets[_id].shareTokens[uint256(SpreadOutcome.NoContest)]; // no contest\\n        }\\n\\n        markets[_id].winner = _winner;\\n        emit MarketResolved(_id, address(_winner));\\n    }\\n\\n    function resolveOverUnderMarket(\\n        uint256 _id,\\n        uint256 _homeScore,\\n        uint256 _awayScore\\n    ) internal {\\n        MarketDetails memory _details = marketDetails[_id];\\n        int256 _targetTotal = _details.value0;\\n\\n        int256 _actualTotal = int256(_homeScore).add(int256(_awayScore));\\n\\n        OwnedERC20 _winner;\\n        if (_actualTotal > _targetTotal) {\\n            _winner = markets[_id].shareTokens[uint256(OverUnderOutcome.Over)]; // over\\n        } else if (_actualTotal < _targetTotal) {\\n            _winner = markets[_id].shareTokens[uint256(OverUnderOutcome.Under)]; // under\\n        } else {\\n            _winner = markets[_id].shareTokens[uint256(OverUnderOutcome.NoContest)]; // no contest\\n        }\\n\\n        markets[_id].winner = _winner;\\n        emit MarketResolved(_id, address(_winner));\\n    }\\n\\n    function getMarketDetails(uint256 _marketId) public view returns (MarketDetails memory) {\\n        return marketDetails[_marketId];\\n    }\\n\\n    function setLinkNode(address _newLinkNode) external onlyOwner {\\n        linkNode = _newLinkNode;\\n        emit LinkNodeChanged(_newLinkNode);\\n    }\\n\\n    function getEventMarkets(uint256 _eventId) external view returns (uint256[3] memory) {\\n        uint256[3] memory _event = events[_eventId].markets;\\n        return _event;\\n    }\\n\\n    // Events can be partially registered, by only creating some markets.\\n    // This returns true only if an event is fully registered.\\n    function isEventRegistered(uint256 _eventId) public view returns (bool) {\\n        uint256[3] memory _event = events[_eventId].markets;\\n        return _event[0] != 0 && _event[1] != 0 && _event[2] != 0;\\n    }\\n\\n    function isEventResolved(uint256 _eventId) public view returns (bool) {\\n        // check the event's head-to-head market since it will always exist if the event's markets exist\\n        uint256 _marketId = events[_eventId].markets[0];\\n        return isMarketResolved(_marketId);\\n    }\\n\\n    // Only usable off-chain. Gas cost can easily eclipse block limit.\\n    // Lists all events that could be resolved with a call to resolveEvent.\\n    // Not all will be resolvable because this does not ensure the game ended.\\n    function listResolvableEvents() external view returns (uint256[] memory) {\\n        uint256 _totalResolvable = countResolvableEvents();\\n        uint256[] memory _resolvableEvents = new uint256[](_totalResolvable);\\n\\n        uint256 n = 0;\\n        for (uint256 i = 0; i < listOfEvents.length; i++) {\\n            if (n > _totalResolvable) break;\\n            uint256 _eventId = listOfEvents[i];\\n            if (isEventResolvable(_eventId)) {\\n                _resolvableEvents[n] = _eventId;\\n                n++;\\n            }\\n        }\\n\\n        return _resolvableEvents;\\n    }\\n\\n    function countResolvableEvents() internal view returns (uint256) {\\n        uint256 _totalResolvable = 0;\\n        for (uint256 i = 0; i < listOfEvents.length; i++) {\\n            uint256 _eventId = listOfEvents[i];\\n            if (isEventResolvable(_eventId)) {\\n                _totalResolvable++;\\n            }\\n        }\\n        return _totalResolvable;\\n    }\\n\\n    // Returns true if a call to resolveEvent is potentially useful.\\n    function isEventResolvable(uint256 _eventId) internal view returns (bool) {\\n        EventDetails memory _event = events[_eventId];\\n\\n        bool _unresolved = false; // default because non-existing markets aren't resolvable\\n        for (uint256 i = 0; i < _event.markets.length; i++) {\\n            uint256 _marketId = _event.markets[i];\\n            if (_marketId != 0 && !isMarketResolved(_marketId)) {\\n                _unresolved = true;\\n                break;\\n            }\\n        }\\n\\n        return _unresolved;\\n    }\\n}\\n\",\"keccak256\":\"0x93c3d5e0a313c30f8df4557ac5b17b1839506b020af9b615a47e2a83bb4ae15c\",\"license\":\"MIT\"},\"contracts/turbo/OwnedShareToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"../libraries/Ownable.sol\\\";\\n\\ncontract OwnedERC20 is ERC20, Ownable {\\n    constructor(\\n        string memory name_,\\n        string memory symbol_,\\n        address _owner\\n    ) ERC20(name_, symbol_) {\\n        owner = _owner;\\n    }\\n\\n    function trustedTransfer(\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) external onlyOwner {\\n        _transfer(_from, _to, _amount);\\n    }\\n\\n    function trustedMint(address _target, uint256 _amount) external onlyOwner {\\n        _mint(_target, _amount);\\n    }\\n\\n    function trustedBurn(address _target, uint256 _amount) external onlyOwner {\\n        _burn(_target, _amount);\\n    }\\n\\n    function trustedBurnAll(address _target) external onlyOwner returns (uint256) {\\n        uint256 _balance = balanceOf(_target);\\n        _burn(_target, _balance);\\n        return _balance;\\n    }\\n\\n    function onTransferOwnership(address, address) internal override {}\\n}\\n\",\"keccak256\":\"0x1a60d8f5bb07018b446bf34cdc626ab309c5d2db2eaf75575622090af92c0086\",\"license\":\"MIT\"},\"contracts/turbo/TurboShareTokenFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"./OwnedShareToken.sol\\\";\\n\\nabstract contract TurboShareTokenFactory {\\n    function createShareTokens(\\n        string[] memory _names,\\n        string[] memory _symbols,\\n        address _owner\\n    ) internal returns (OwnedERC20[] memory) {\\n        uint256 _numOutcomes = _names.length;\\n        OwnedERC20[] memory _tokens = new OwnedERC20[](_numOutcomes);\\n\\n        for (uint256 _i = 0; _i < _numOutcomes; _i++) {\\n            _tokens[_i] = new OwnedERC20(_names[_i], _symbols[_i], _owner);\\n        }\\n        return _tokens;\\n    }\\n}\\n\",\"keccak256\":\"0x31865ce6e401897696c2716d76e2882ff105283603556f61814b5874cd7d32a9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405260006007553480156200001657600080fd5b506040516200724d3803806200724d833981016040819052620000399162000534565b600080546001600160a01b03808d166001600160a01b0319928316331783161790925560018054838d16908316811790915560098b905560028054848c1690841617905560038990556004888155600680549489169490931693909317909155600585905560405163095ea7b360e01b81528c928c928c928c928c928c928c928c929163095ea7b391620000d491899160001991016200065d565b602060405180830381600087803b158015620000ef57600080fd5b505af115801562000104573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200012a9190620005e6565b506200013562000173565b5050600e80546001600160a01b0319166001600160a01b039990991698909817909755505050600f9290925550620006d19950505050505050505050565b6040805160008082526020820190925281620001a0565b60608152602001906001900390816200018a5790505b506040805160008082526020820190925291925050600a620001c76000848082866200029c565b8154600180820184556000938452602093849020835160099093020180546001600160a01b0319166001600160a01b03909316929092178255828401518051939492936200021e9392850192919091019062000409565b506040820151600282015560608201516003820180546001600160a01b0319166001600160a01b039092169190911790556080820151600482015560a0820151600582015560c0820151600682015560e0820151600782015561010082015180516200029591600884019160209091019062000473565b5050505050565b620002a6620004b1565b604051806101200160405280876001600160a01b03168152602001620002d48787306200031460201b60201c565b81526020810194909452600060408501526004546060850152600554608085015260035460a08501524260c085015260e090930191909152509392505050565b82516060906000816001600160401b03811180156200033257600080fd5b506040519080825280602002602001820160405280156200035d578160200160208202803683370190505b50905060005b82811015620003ff578681815181106200037957fe5b60200260200101518682815181106200038e57fe5b602002602001015186604051620003a5906200050f565b620003b39392919062000676565b604051809103906000f080158015620003d0573d6000803e3d6000fd5b50828281518110620003de57fe5b6001600160a01b039092166020928302919091019091015260010162000363565b5095945050505050565b82805482825590600052602060002090810192821562000461579160200282015b828111156200046157825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906200042a565b506200046f9291506200051d565b5090565b82805482825590600052602060002090810192821562000461579160200282015b828111156200046157825182559160200191906001019062000494565b60405180610120016040528060006001600160a01b03168152602001606081526020016000815260200160006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001606081525090565b6111f3806200605a83390190565b5b808211156200046f57600081556001016200051e565b6000806000806000806000806000806101408b8d03121562000554578586fd5b8a516200056181620006b8565b60208c0151909a506200057481620006b8565b60408c015160608d0151919a5098506200058e81620006b8565b8097505060808b0151955060a08b0151945060c08b0151620005b081620006b8565b60e08c01516101008d01519195509350620005cb81620006b8565b809250506101208b015190509295989b9194979a5092959850565b600060208284031215620005f8578081fd5b8151801515811462000608578182fd5b9392505050565b60008151808452815b81811015620006365760208185018101518683018201520162000618565b81811115620006485782602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b03929092168252602082015260400190565b6000606082526200068b60608301866200060f565b82810360208401526200069f81866200060f565b91505060018060a01b0383166040830152949350505050565b6001600160a01b0381168114620006ce57600080fd5b50565b61597980620006e16000396000f3fe60806040523480156200001157600080fd5b5060043610620002805760003560e01c80638e0ed1931162000159578063d4b6838e11620000c9578063e2c30b151162000087578063e2c30b15146200056d578063e5678dfa1462000584578063eb44fdd3146200059b578063ec97908214620005c1578063f2fde38b14620005cb5762000280565b8063d4b6838e146200052e578063d5da4f1d1462000538578063d5db3efb146200054f578063d8dfeb451462000559578063d9113f0d14620005635762000280565b8063b06c1ba31162000117578063b06c1ba314620004b9578063b0e21e8a14620004df578063b65ad5fd14620004e9578063cc87adea1462000500578063cdaac86214620005175762000280565b80638e0ed193146200045357806397eef187146200046a578063992c90791462000481578063a17944961462000498578063a544a62c14620004af5762000280565b80634c9f66c711620001f55780637641ab0111620001b35780637641ab011462000414578063787dce3d146200041e5780637d1d7fb81462000435578063893d20e8146200043f5780638ce7442614620004495762000280565b80634c9f66c714620003815780634fba6a70146200039a57806353ac55f514620003c05780636399d03d14620003e657806371ba269614620003fd5762000280565b8063473a6d521162000243578063473a6d52146200032657806349a4d934146200033d5780634a7d036914620003545780634a875e0b146200035e5780634b2d9ffc14620003775762000280565b80630b7914301462000285578063221fff8114620002b957806332ecabe914620002d257806335a9cdad14620002e9578063399b6b3f146200030f575b600080fd5b6200029c6200029636600462003e22565b620005e2565b604051620002b096959493929190620046a8565b60405180910390f35b620002d0620002ca36600462003f63565b62000621565b005b620002d0620002e336600462003d0a565b6200094d565b62000300620002fa36600462003f63565b620009d1565b604051620002b09190620045bb565b620002d06200032036600462003f9a565b62000e00565b620003006200033736600462003e22565b62001082565b620003006200034e36600462003ced565b620010d5565b62000300620010e7565b620003686200120f565b604051620002b0919062004132565b62000300620012e6565b6200038b620012ec565b604051620002b09190620040b7565b620003b1620003ab36600462003e82565b620012fb565b604051620002b0919062004108565b620003d7620003d136600462003e22565b620014a6565b604051620002b0919062004147565b620002d0620003f736600462003e22565b62001616565b620003006200040e36600462003e22565b62001633565b6200030062001655565b620002d06200042f36600462003e22565b6200165b565b62000300620016b5565b6200038b620016bb565b6200038b620016ca565b620003006200046436600462003ced565b620016d9565b620002d06200047b36600462003e22565b620017da565b620003006200049236600462003e54565b62001829565b620003d7620004a936600462003e22565b62001b83565b6200030062001ba4565b620004d0620004ca36600462003e22565b62001baa565b604051620002b091906200446c565b6200030062001da3565b620003d7620004fa36600462003e22565b62001da9565b620003006200051136600462003e22565b62001e21565b620003b16200052836600462003e22565b62001e28565b6200038b62001e73565b620002d06200054936600462003e22565b62001e82565b6200030062001ed1565b6200038b62001ed7565b6200036862001ee6565b620002d06200057e36600462003ced565b62001fb6565b620003006200059536600462003d45565b6200201b565b620005b2620005ac36600462003e22565b62002069565b604051620002b0919062004513565b6200030062002241565b620003d7620005dc36600462003ced565b62002247565b600c6020526000908152604090206003810154600482015460058301546006840154600785015460089095015493949293919260ff9182169290911686565b600a5483106200064e5760405162461bcd60e51b8152600401620006459062004376565b60405180910390fd5b6200065983620014a6565b15620006795760405162461bcd60e51b81526004016200064590620043e0565b6000620006868362001082565b6001546040516323b872dd60e01b81529192506001600160a01b0316906323b872dd90620006bd90339030908690600401620040cb565b602060405180830381600087803b158015620006d857600080fd5b505af1158015620006ed573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000713919062003e03565b506000600a85815481106200072457fe5b60009182526020918290206040805161012081018252600990930290910180546001600160a01b03168352600181018054835181870281018701909452808452939491938583019392830182828015620007a857602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831162000789575b50505050508152602001600282015481526020016003820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b0316815260200160048201548152602001600582015481526020016006820154815260200160078201548152602001600882018054806020026020016040519081016040528092919081815260200182805480156200086357602002820191906000526020600020905b8154815260200190600101908083116200084e575b505050505081525050905060005b8160200151518110156200090857816020015181815181106200089057fe5b60200260200101516001600160a01b031663c024cd2685876040518363ffffffff1660e01b8152600401620008c7929190620040ef565b600060405180830381600087803b158015620008e257600080fd5b505af1158015620008f7573d6000803e3d6000fd5b505060019092019150620008719050565b507fd81c0442e10068a9818f3aa093c9ccb804584690df572d7df3da2d892a6973f28585856040516200093e9392919062004689565b60405180910390a15050505050565b6000546001600160a01b031633146200096557600080fd5b8015620009785762000976620010e7565b505b600680546001600160a01b0319166001600160a01b0384161790556040517f15b84596b3c567ae2998116949ae5f2d47f3055c12d9053db4d6e50f4c794dd990620009c5908490620040b7565b60405180910390a15050565b600a546000908410620009f85760405162461bcd60e51b8152600401620006459062004376565b62000a0384620014a6565b1562000a235760405162461bcd60e51b8152600401620006459062004426565b6000600a858154811062000a3357fe5b60009182526020918290206040805161012081018252600990930290910180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801562000ab757602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831162000a98575b50505050508152602001600282015481526020016003820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b03168152602001600482015481526020016005820154815260200160068201548152602001600782015481526020016008820180548060200260200160405190810160405280929190818152602001828054801562000b7257602002820191906000526020600020905b81548152602001906001019080831162000b5d575b505050505081525050905060005b81602001515181101562000c17578160200151818151811062000b9f57fe5b60200260200101516001600160a01b03166342986e1333876040518363ffffffff1660e01b815260040162000bd6929190620040ef565b600060405180830381600087803b15801562000bf157600080fd5b505af115801562000c06573d6000803e3d6000fd5b50506001909201915062000b809050565b50600062000c258562001082565b9050600062000c56670de0b6b3a764000062000c4f8560a0015185620022b190919063ffffffff16565b90620022dc565b9050600062000c80670de0b6b3a764000062000c4f8660c0015186620022b190919063ffffffff16565b905062000c9a8162000c938585620022f2565b90620022f2565b600780548401905560015460405163a9059cbb60e01b81529194506001600160a01b03169063a9059cbb9062000cd79089908790600401620040ef565b602060405180830381600087803b15801562000cf257600080fd5b505af115801562000d07573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000d2d919062003e03565b50600254604051630ebdac0960e41b81526001600160a01b039091169063ebdac0909062000d60908490600401620045bb565b602060405180830381600087803b15801562000d7b57600080fd5b505af115801562000d90573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000db6919062003e03565b507fb6fdb729b2ed801daf629f0ab713e4a7a73619505790f6f27fd92d6f2c9688d788883360405162000dec9392919062004689565b60405180910390a150909695505050505050565b600e546001600160a01b0316331462000e2d5760405162461bcd60e51b815260040162000645906200439e565b6000848152600c602052604080822081516060810192839052909291839060039082845b81548152602001906001019080831162000e5157505050505090508060006003811062000e7a57fe5b602002015115158062000e905750602081015115155b8062000e9f5750604081015115155b62000ebe5760405162461bcd60e51b8152600401620006459062004194565b600185600481111562000ecd57fe5b600481111562000ed957fe5b141562000efa5760405162461bcd60e51b81526004016200064590620041df565b600285600481111562000f0957fe5b600481111562000f1557fe5b14620010285760005b60038110156200101f57600082826003811062000f3757fe5b602002015190508062000f4b575062001016565b6000600a828154811062000f5b57fe5b906000526020600020906009020160010160008154811062000f7957fe5b600091825260209091200154600a80546001600160a01b03909216925082918490811062000fa357fe5b906000526020600020906009020160030160006101000a8154816001600160a01b0302191690836001600160a01b031602179055507fc68d106ea6e4bec784925cfd91767212c71ced92adbac107dc364435321113f682826040516200100b929190620045c4565b60405180910390a150505b60010162000f1e565b5050506200107c565b8051156200103f5780516200103f90858562002308565b6020810151156200105c5760208101516200105c9085856200245e565b6040810151156200107957604081015162001079908585620027a2565b50505b50505050565b60006009548210158015620010a1575060095482816200109e57fe5b06155b620010c05760405162461bcd60e51b81526004016200064590620042c4565b6009548281620010cc57fe5b0490505b919050565b60086020526000908152604090205481565b6006546000906001600160a01b03163314806200110357503330145b620011225760405162461bcd60e51b8152600401620006459062004214565b60075480156200120a57600060075560015460065460405163a9059cbb60e01b81526001600160a01b039283169263a9059cbb9262001169929116908590600401620040ef565b602060405180830381600087803b1580156200118457600080fd5b505af115801562001199573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620011bf919062003e03565b506006546040517f0f7f5b155b0b0ac6890709a2c7bf1b8bb3f675fff1e7840b4dd3c9acde59048b9162001201916001600160a01b03909116908490620040ef565b60405180910390a15b905090565b606060006200121d620029bd565b905060008167ffffffffffffffff811180156200123957600080fd5b5060405190808252806020026020018201604052801562001264578160200160208202803683370190505b5090506000805b600d54811015620012dd57838211156200128557620012dd565b6000600d82815481106200129557fe5b90600052602060002001549050620012ad8162002a12565b15620012d35780848481518110620012c157fe5b60209081029190910101526001909201915b506001016200126b565b50909250505090565b60035481565b6002546001600160a01b031681565b6200130562003997565b600e546001600160a01b03163314620013325760405162461bcd60e51b8152600401620006459062004335565b600062001342886101e062002b18565b60008e8152600c602052604090819020815160608101928390529293509060039082845b815481526020019060010190808311620013665750505050509150816000600381106200138f57fe5b6020020151158015620013a25750825115155b8015620013b25750602083015115155b15620013ce57620013cb33828f8f8f8f8f8f8b62002b2b565b82525b6020820151158015620013de5750845b15620013fd57620013f733828f8f8f8f8f8f8f62002e3e565b60208301525b60408201511580156200140d5750835b156200142c576200142633828f8f8f8f8f8f8e6200316f565b60408301525b60008d8152600c6020526040902060068101805460ff1916600117905560038082018a90556200145f91908490620039b5565b5050600d80546001810182556000919091527fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb5019b909b5550989998505050505050505050565b600080600a8381548110620014b757fe5b60009182526020918290206040805161012081018252600990930290910180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156200153b57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116200151c575b50505050508152602001600282015481526020016003820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016004820154815260200160058201548152602001600682015481526020016007820154815260200160088201805480602002602001604051908101604052809291908181526020018280548015620015f657602002820191906000526020600020905b815481526020019060010190808311620015e1575b50505091909252505050606001516001600160a01b031615159392505050565b60405162461bcd60e51b8152600401620006459062004258565b50565b600d81815481106200164457600080fd5b600091825260209091200154905081565b60095481565b6000546001600160a01b031633146200167357600080fd5b60058190556040517fada2cde3c4a561f5c23e2fdbfb223e1f0d1ec7109b9811b32644e6e974d6631f90620016aa908390620045bb565b60405180910390a150565b60045481565b6000546001600160a01b031690565b6006546001600160a01b031681565b336000908152600860205260408120548015620017d4573360009081526008602052604080822091909155600154905163a9059cbb60e01b81526001600160a01b039091169063a9059cbb90620017379086908590600401620040ef565b602060405180830381600087803b1580156200175257600080fd5b505af115801562001767573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200178d919062003e03565b50826001600160a01b03167fc9985ad824d943d66367ce5feea26e18979b3e1c9273742926d87e2b0d7473873383604051620017cb929190620040ef565b60405180910390a25b92915050565b6000546001600160a01b03163314620017f257600080fd5b60038190556040517fcc4df50442ac32f0142ba4853f617661e0823be0e92148e7e5f36ce56c13982590620016aa908390620045bb565b60006200183683620014a6565b6200184657620018468362001616565b6000600a84815481106200185657fe5b60009182526020918290206040805161012081018252600990930290910180546001600160a01b03168352600181018054835181870281018701909452808452939491938583019392830182828015620018da57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311620018bb575b50505050508152602001600282015481526020016003820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b0316815260200160048201548152602001600582015481526020016006820154815260200160078201548152602001600882018054806020026020016040519081016040528092919081815260200182805480156200199557602002820191906000526020600020905b81548152602001906001019080831162001980575b5050505050815250509050600081606001516001600160a01b03166371297784336040518263ffffffff1660e01b8152600401620019d49190620040b7565b602060405180830381600087803b158015620019ef57600080fd5b505af115801562001a04573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001a2a919062003e3b565b9050600954600954828162001a3b57fe5b04029050600062001a4c8262001082565b9050600062001a76670de0b6b3a764000062000c4f866080015185620022b190919063ffffffff16565b905062001a848282620022f2565b84516001600160a01b0390811660009081526008602052604090819020805485019055600154905163a9059cbb60e01b8152929450169063a9059cbb9062001ad39089908690600401620040ef565b602060405180830381600087803b15801562001aee57600080fd5b505af115801562001b03573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001b29919062003e03565b50856001600160a01b03167fe67bd0100cd3289557430d36098901ba18161e6279c9711d8650b8af1055210488866060015186858760405162001b719594939291906200465d565b60405180910390a25095945050505050565b6000818152600c602052604081205462001b9d81620014a6565b9392505050565b60075481565b62001bb4620039f8565b600b60008381526020019081526020016000206040518061012001604052908160008201548152602001600182018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801562001c7a5780601f1062001c4e5761010080835404028352916020019162001c7a565b820191906000526020600020905b81548152906001019060200180831162001c5c57829003601f168201915b505050918352505060028281015460208084019190915260038401805460408051601f6000196101006001861615020190931695909504918201849004840285018401815281855290940193909183018282801562001d1d5780601f1062001cf15761010080835404028352916020019162001d1d565b820191906000526020600020905b81548152906001019060200180831162001cff57829003601f168201915b50505091835250506004820154602082015260058201546040820152600682015460609091019060ff16600281111562001d5357fe5b600281111562001d5f57fe5b81526020016006820160019054906101000a900460ff16600481111562001d8257fe5b600481111562001d8e57fe5b81526020016007820154815250509050919050565b60055481565b6000818152600c602052604080822081516060810192839052839290919060039082845b81548152602001906001019080831162001dcd57505050505090508060006003811062001df657fe5b60200201511580159062001e0d5750602081015115155b801562001b9d575060400151151592915050565b6009540290565b62001e3262003997565b6000828152600c6020526040808220815160608101928390529160039082845b81548152602001906001019080831162001e52575093979650505050505050565b600e546001600160a01b031681565b6000546001600160a01b0316331462001e9a57600080fd5b60048190556040517f92d395c429898992f8532ee7145901513e524c2085fd7fd1da39b8badcd6df3190620016aa908390620045bb565b600f5481565b6001546001600160a01b031681565b60606000805b600a5481101562001f175762001f0281620014a6565b62001f0e576001909101905b60010162001eec565b5060008167ffffffffffffffff8111801562001f3257600080fd5b5060405190808252806020026020018201604052801562001f5d578160200160208202803683370190505b5090506000805b600a54811015620012dd5783821062001f7d57620012dd565b62001f8881620014a6565b62001fad578083838151811062001f9b57fe5b60209081029190910101526001909101905b60010162001f64565b6000546001600160a01b0316331462001fce57600080fd5b600e80546001600160a01b0319166001600160a01b0383161790556040517f6b7517523482c8d89ffbc530829d5decd506cf6dc60874b11fa26c8a53bb9fa990620016aa908390620040b7565b600080805b84518110156200206157620020566200204e8683815181106200203f57fe5b60200260200101518662001829565b839062002b18565b915060010162002020565b509392505050565b6200207362003a50565b600a548210620020e357506040805161012081018252600080825282518181526020808201855280840191909152828401829052606083018290526080830182905260a0830182905260c0830182905260e0830182905283519182528101909252610100810191909152620010d0565b600a8281548110620020f157fe5b60009182526020918290206040805161012081018252600990930290910180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156200217557602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831162002156575b50505050508152602001600282015481526020016003820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b0316815260200160048201548152602001600582015481526020016006820154815260200160078201548152602001600882018054806020026020016040519081016040528092919081815260200182805480156200223057602002820191906000526020600020905b8154815260200190600101908083116200221b575b5050505050815250509050620010d0565b600a5490565b600080546001600160a01b031633146200226057600080fd5b6001600160a01b0382166200227457600080fd5b6000546200228c906001600160a01b031683620034b0565b50600080546001600160a01b0383166001600160a01b03199091161790556001919050565b600082620022c257506000620017d4565b82820282848281620022d057fe5b041462001b9d57600080fd5b600080828481620022e957fe5b04949350505050565b6000828211156200230257600080fd5b50900390565b6000818311156200235f57600a84815481106200232157fe5b6000918252602090912060016009909202010160025b815481106200234257fe5b6000918252602090912001546001600160a01b03169050620023d9565b818310156200239557600a84815481106200237657fe5b9060005260206000209060090201600101600160028111156200233757fe5b600a8481548110620023a357fe5b6000918252602082206001600990920201019081548110620023c157fe5b6000918252602090912001546001600160a01b031690505b80600a8581548110620023e857fe5b906000526020600020906009020160030160006101000a8154816001600160a01b0302191690836001600160a01b031602179055507fc68d106ea6e4bec784925cfd91767212c71ced92adbac107dc364435321113f6848260405162002450929190620045c4565b60405180910390a150505050565b6000838152600b6020908152604080832081516101208101835281548152600180830180548551600293821615610100026000190190911692909204601f810187900487028301870190955284825291949293858401939192918301828280156200250d5780601f10620024e1576101008083540402835291602001916200250d565b820191906000526020600020905b815481529060010190602001808311620024ef57829003601f168201915b505050918352505060028281015460208084019190915260038401805460408051601f60001961010060018616150201909316959095049182018490048402850184018152818552909401939091830182828015620025b05780601f106200258457610100808354040283529160200191620025b0565b820191906000526020600020905b8154815290600101906020018083116200259257829003601f168201915b50505091835250506004820154602082015260058201546040820152600682015460609091019060ff166002811115620025e657fe5b6002811115620025f257fe5b81526020016006820160019054906101000a900460ff1660048111156200261557fe5b60048111156200262157fe5b8152600791909101546020909101526101008101519091506000620026478585620034b4565b9050600082821315620026a057600a87815481106200266257fe5b6000918252602090912060016009909202010160025b815481106200268357fe5b6000918252602090912001546001600160a01b031690506200271a565b82821215620026d657600a8781548110620026b757fe5b9060005260206000209060090201600101600160028111156200267857fe5b600a8781548110620026e457fe5b60009182526020822060016009909202010190815481106200270257fe5b6000918252602090912001546001600160a01b031690505b80600a88815481106200272957fe5b906000526020600020906009020160030160006101000a8154816001600160a01b0302191690836001600160a01b031602179055507fc68d106ea6e4bec784925cfd91767212c71ced92adbac107dc364435321113f6878260405162002791929190620045c4565b60405180910390a150505050505050565b6000838152600b6020908152604080832081516101208101835281548152600180830180548551600293821615610100026000190190911692909204601f81018790048702830187019095528482529194929385840193919291830182828015620028515780601f10620028255761010080835404028352916020019162002851565b820191906000526020600020905b8154815290600101906020018083116200283357829003601f168201915b505050918352505060028281015460208084019190915260038401805460408051601f60001961010060018616150201909316959095049182018490048402850184018152818552909401939091830182828015620028f45780601f10620028c857610100808354040283529160200191620028f4565b820191906000526020600020905b815481529060010190602001808311620028d657829003601f168201915b50505091835250506004820154602082015260058201546040820152600682015460609091019060ff1660028111156200292a57fe5b60028111156200293657fe5b81526020016006820160019054906101000a900460ff1660048111156200295957fe5b60048111156200296557fe5b81526007919091015460209091015261010081015190915060006200298b8585620034f8565b9050600082821315620029a657600a8781548110620026b757fe5b82821215620026d657600a87815481106200266257fe5b600080805b600d5481101562002a0c576000600d8281548110620029dd57fe5b90600052602060002001549050620029f58162002a12565b1562002a02576001909201915b50600101620029c2565b50905090565b6000818152600c6020526040808220815161014081019092528291908160e081018260038282826020028201915b81548152602001906001019080831162002a4057505050918352505060038201546020820152600480830154604083015260058301546060830152600683015460809092019160ff169081111562002a9457fe5b600481111562002aa057fe5b81526007820154602082015260089091015460ff16151560409091015290506000805b600381101562002061578251600090826003811062002ade57fe5b60200201519050801580159062002afd575062002afb81620014a6565b155b1562002b0e57600192505062002061565b5060010162002ac3565b60008282018381101562001b9d57600080fd5b60408051600380825260808201909252600091829190816020015b606081526020019060019003908162002b46579050506040805180820190915260118152704e6f20436f6e74657374202f204472617760781b60208201529091508160008151811062002b9557fe5b6020908102919091010152858160018151811062002baf57fe5b6020908102919091010152878160028151811062002bc957fe5b6020908102919091010152600a80549062002c018d84808f62002bfb8a600160200201518b6000602002015162003541565b620036b1565b8154600180820184556000938452602093849020835160099093020180546001600160a01b0319166001600160a01b039093169290921782558284015180519394929362002c589392850192919091019062003aae565b506040820151600282015560608201516003820180546001600160a01b0319166001600160a01b039092169190911790556080820151600482015560a0820151600582015560c0820151600682015560e08201516007820155610100820151805162002ccf91600884019160209091019062003b06565b5050506040518061012001604052808b81526020018a81526020018981526020018881526020018781526020018681526020016000600281111562002d1057fe5b81526020016001815260006020918201819052838152600b82526040902082518155828201518051919262002d4e9260018501929091019062003b43565b50604082015160028201556060820151805162002d7691600384019160209091019062003b43565b506080820151600482015560a0820151600582015560c082015160068201805460ff1916600183600281111562002da957fe5b021790555060e082015160068201805461ff00191661010083600481111562002dce57fe5b02179055506101008201518160070155905050897f5dce86ee7934408b0b922d495f434ee5e225a84bd00b327dc6d6816cbc562b7b828e8e60008e8e8e8e8e600060405162002e279a99989796959493929190620045db565b60405180910390a29b9a5050505050505050505050565b60408051600380825260808201909252600091829190816020015b606081526020019060019003908162002e595790505060408051808201909152600a815269139bc810dbdb9d195cdd60b21b60208201529091508160008151811062002ea157fe5b6020908102919091010152858160018151811062002ebb57fe5b6020908102919091010152878160028151811062002ed557fe5b60200260200101819052506000831215801562002ef35750600a8307155b1562002f055760058301925062002f2f565b60008312801562002f225750600a836000038162002f1f57fe5b07155b1562002f2f576005830392505b600a80549062002f4a8d84808f62002bfb6001600262003723565b8154600180820184556000938452602093849020835160099093020180546001600160a01b0319166001600160a01b039093169290921782558284015180519394929362002fa19392850192919091019062003aae565b506040820151600282015560608201516003820180546001600160a01b0319166001600160a01b039092169190911790556080820151600482015560a0820151600582015560c0820151600682015560e0820151600782015561010082015180516200301891600884019160209091019062003b06565b5050506040518061012001604052808b81526020018a8152602001898152602001888152602001878152602001868152602001600160028111156200305957fe5b81526020016001815260209081018690526000838152600b825260409020825181558282015180519192620030979260018501929091019062003b43565b506040820151600282015560608201518051620030bf91600384019160209091019062003b43565b506080820151600482015560a0820151600582015560c082015160068201805460ff19166001836002811115620030f257fe5b021790555060e082015160068201805461ff0019166101008360048111156200311757fe5b02179055506101008201518160070155905050897f5dce86ee7934408b0b922d495f434ee5e225a84bd00b327dc6d6816cbc562b7b828e8e60018e8e8e8e8e8e60405162002e279a99989796959493929190620045db565b60408051600380825260808201909252600091829190816020015b60608152602001906001900390816200318a5790505060408051808201909152600a815269139bc810dbdb9d195cdd60b21b602082015290915081600081518110620031d257fe5b60200260200101819052506040518060400160405280600481526020016327bb32b960e11b81525081600160028111156200320957fe5b815181106200321457fe5b6020026020010181905250604051806040016040528060058152602001642ab73232b960d91b815250816002808111156200324b57fe5b815181106200325657fe5b6020908102919091010152600a830662003271576005830192505b600a8054906200328c8d84808f62002bfb6001600262003723565b8154600180820184556000938452602093849020835160099093020180546001600160a01b0319166001600160a01b0390931692909217825582840151805193949293620032e39392850192919091019062003aae565b506040820151600282015560608201516003820180546001600160a01b0319166001600160a01b039092169190911790556080820151600482015560a0820151600582015560c0820151600682015560e0820151600782015561010082015180516200335a91600884019160209091019062003b06565b5050506040518061012001604052808b81526020018a81526020018981526020018881526020018781526020018681526020016002808111156200339a57fe5b81526020016001815260209081018690526000838152600b825260409020825181558282015180519192620033d89260018501929091019062003b43565b5060408201516002820155606082015180516200340091600384019160209091019062003b43565b506080820151600482015560a0820151600582015560c082015160068201805460ff191660018360028111156200343357fe5b021790555060e082015160068201805461ff0019166101008360048111156200345857fe5b02179055506101008201518160070155905050897f5dce86ee7934408b0b922d495f434ee5e225a84bd00b327dc6d6816cbc562b7b828e8e60028e8e8e8e8e8e60405162002e279a99989796959493929190620045db565b5050565b6000808312158015620034d057506001600160ff1b0383038212155b80620034ee5750600083128015620034ee5750600160ff1b83038213155b6200230257600080fd5b6000808312158015620035145750826001600160ff1b03038213155b8062003532575060008312801562003532575082600160ff1b038212155b6200353c57600080fd5b500190565b60606000620035508462003837565b905060006200355f8462003837565b90508181016200357e8162000c4f6802a802f8630a24000086620022b1565b92506200359a8162000c4f6802a802f8630a24000085620022b1565b9150670de0b6b3a7640000831015620035e55760405162461bcd60e51b81526004018080602001828103825260378152602001806200590d6037913960400191505060405180910390fd5b670de0b6b3a76400008210156200362e5760405162461bcd60e51b81526004018080602001828103825260378152602001806200590d6037913960400191505060405180910390fd5b604080516003808252608082019092529060208201606080368337019050509350670de0b6b3a7640000846000815181106200366657fe5b60200260200101818152505082846001815181106200368157fe5b60200260200101818152505081846002815181106200369c57fe5b60200260200101818152505050505092915050565b620036bb62003a50565b604051806101200160405280876001600160a01b03168152602001620036e3878730620038a1565b81526020810194909452600060408501526004546060850152600554608085015260035460a08501524260c085015260e090930191909152509392505050565b60606000836200373557600062003738565b60015b60ff16830190508067ffffffffffffffff811180156200375757600080fd5b5060405190808252806020026020018201604052801562003782578160200160208202803683370190505b5091508315620037b057670de0b6b3a764000082600081518110620037a357fe5b6020026020010181815250505b60008385620037c9576802b5e3af16b1880000620037d4565b6802a802f8630a2400005b68ffffffffffffffffff1681620037e757fe5b049050600085620037fa576000620037fd565b60015b60ff1690505b828110156200382e57818482815181106200381a57fe5b602090810291909101015260010162003803565b50505092915050565b600080821215620038765760008290036200386d6200385882606462002b18565b62000c4f836802a802f8630a240000620022b1565b915050620010d0565b620038996200388783606462002b18565b690109a12906aff610000090620022dc565b9050620010d0565b825160609060008167ffffffffffffffff81118015620038c057600080fd5b50604051908082528060200260200182016040528015620038eb578160200160208202803683370190505b50905060005b828110156200398d578681815181106200390757fe5b60200260200101518682815181106200391c57fe5b602002602001015186604051620039339062003bc5565b620039419392919062004152565b604051809103906000f0801580156200395e573d6000803e3d6000fd5b508282815181106200396c57fe5b6001600160a01b0390921660209283029190910190910152600101620038f1565b5095945050505050565b60405180606001604052806003906020820280368337509192915050565b8260038101928215620039e6579160200282015b82811115620039e6578251825591602001919060010190620039c9565b50620039f492915062003bd3565b5090565b6040518061012001604052806000815260200160608152602001600081526020016060815260200160008152602001600081526020016000600281111562003a3c57fe5b815260200160008152602001600081525090565b60405180610120016040528060006001600160a01b03168152602001606081526020016000815260200160006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001606081525090565b828054828255906000526020600020908101928215620039e6579160200282015b82811115620039e657825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019062003acf565b828054828255906000526020600020908101928215620039e65791602002820182811115620039e6578251825591602001919060010190620039c9565b828054600181600116156101000203166002900490600052602060002090601f01602090048101928262003b7b5760008555620039e6565b82601f1062003b9657805160ff1916838001178555620039e6565b82800160010185558215620039e65791820182811115620039e6578251825591602001919060010190620039c9565b6111f3806200471a83390190565b5b80821115620039f4576000815560010162003bd4565b80356001600160a01b0381168114620010d057600080fd5b600082601f83011262003c13578081fd5b6040516040810181811067ffffffffffffffff8211171562003c3157fe5b806040525080838560408601111562003c48578384fd5b835b600281101562003c6b57813583526020928301929091019060010162003c4a565b509195945050505050565b8035620010d0816200470a565b600082601f83011262003c94578081fd5b813567ffffffffffffffff81111562003ca957fe5b62003cbe601f8201601f1916602001620046e5565b81815284602083860101111562003cd3578283fd5b816020850160208301379081016020019190915292915050565b60006020828403121562003cff578081fd5b62001b9d8262003bea565b6000806040838503121562003d1d578081fd5b62003d288362003bea565b9150602083013562003d3a816200470a565b809150509250929050565b6000806040838503121562003d58578182fd5b823567ffffffffffffffff8082111562003d70578384fd5b818501915085601f83011262003d84578384fd5b813560208282111562003d9357fe5b808202925062003da5818401620046e5565b8281528181019085830185870184018b101562003dc0578889fd5b8896505b8487101562003de457803583526001969096019591830191830162003dc4565b50965062003df6905087820162003bea565b9450505050509250929050565b60006020828403121562003e15578081fd5b815162001b9d816200470a565b60006020828403121562003e34578081fd5b5035919050565b60006020828403121562003e4d578081fd5b5051919050565b6000806040838503121562003e67578182fd5b8235915062003e796020840162003bea565b90509250929050565b60008060008060008060008060008060006101808c8e03121562003ea4578687fd5b8b359a5067ffffffffffffffff8060208e0135111562003ec2578788fd5b62003ed48e60208f01358f0162003c83565b9a5060408d013599508060608e0135111562003eee578788fd5b5062003f018d60608e01358e0162003c83565b975060808c0135965060a08c0135955060c08c0135945060e08c0135935062003f2e6101008d0162003c76565b925062003f3f6101208d0162003c76565b915062003f518d6101408e0162003c02565b90509295989b509295989b9093969950565b60008060006060848603121562003f78578283fd5b833592506020840135915062003f916040850162003bea565b90509250925092565b6000806000806080858703121562003fb0578182fd5b5050823594602084013594506040840135936060013592509050565b6001600160a01b03169052565b6000815180845260208085019450808401835b83811015620040135781516001600160a01b03168752958201959082019060010162003fec565b509495945050505050565b6000815180845260208085019450808401835b83811015620040135781518752958201959082019060010162004031565b600581106200405a57fe5b9052565b600381106200405a57fe5b60008151808452815b81811015620040905760208185018101518683018201520162004072565b81811115620040a25782602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b60608101818360005b60038110156200382e57815183526020928301929091019060010162004111565b60006020825262001b9d60208301846200401e565b901515815260200190565b60006060825262004167606083018662004069565b82810360208401526200417b818662004069565b91505060018060a01b0383166040830152949350505050565b6020808252602b908201527f43616e6e6f74207265736f6c7665206d61726b6574732074686174207765726560408201526a1b89dd0818dc99585d195960aa1b606082015260800190565b6020808252818101527f63616e6e6f74207265736f6c7665205343484544554c4544206d61726b657473604082015260600190565b60208082526024908201527f4f6e6c792070726f746f636f6c2063616e20636c61696d2070726f746f636f6c6040820152632066656560e01b606082015260800190565b60208082526046908201527f4f6e6c7920746865206c696e6b206e6f64652063616e207265736f6c7665207460408201527f6865206d61726b65742c207573696e6720747275737465645265736f6c76654d60608201526561726b65747360d01b608082015260a00190565b6020808252604b908201527f536861726573206d75737420626520626f74682067726561746572207468616e60408201527f20286f7220657175616c20746f2920616e6420646976697369626c652062792060608201526a39b430b932a330b1ba37b960a91b608082015260a00190565b60208082526021908201527f4f6e6c79206c696e6b206e6f64652063616e20637265617465206d61726b65746040820152607360f81b606082015260800190565b6020808252600e908201526d139bc81cdd58da081b585c9ad95d60921b604082015260600190565b60208082526022908201527f4f6e6c79206c696e6b206e6f64652063616e207265736f6c7665206d61726b65604082015261747360f01b606082015260800190565b60208082526026908201527f43616e6e6f74206d696e742073686172657320666f72207265736f6c766564206040820152651b585c9ad95d60d21b606082015260800190565b60208082526026908201527f43616e6e6f74206275726e2073686172657320666f72207265736f6c766564206040820152651b585c9ad95d60d21b606082015260800190565b6000602082528251602083015260208301516101208060408501526200449761014085018362004069565b9150604085015160608501526060850151601f19858403016080860152620044c0838262004069565b925050608085015160a085015260a085015160c085015260c0850151620044eb60e08601826200405e565b5060e085015161010062004502818701836200404f565b959095015193019290925250919050565b6000602082526200452960208301845162003fcc565b60208301516101208060408501526200454761014085018362003fd9565b915060408501516060850152606085015162004567608086018262003fcc565b50608085015160a085015260a085015160c085015260c085015160e085015260e0850151610100818187015280870151915050601f198584030182860152620045b183826200401e565b9695505050505050565b90815260200190565b9182526001600160a01b0316602082015260400190565b8a81526001600160a01b038a16602082015260408101899052600061014062004608606084018b6200405e565b8060808401526200461c8184018a62004069565b90508760a084015282810360c084015262004638818862004069565b60e0840196909652505061010081019290925261012090910152979650505050505050565b9485526001600160a01b0393909316602085015260408401919091526060830152608082015260a00190565b92835260208301919091526001600160a01b0316604082015260600190565b868152602081018690526040810185905260c08101620046cc60608301866200404f565b83608083015282151560a0830152979650505050505050565b60405181810167ffffffffffffffff811182821017156200470257fe5b604052919050565b80151581146200163057600080fdfe60806040523480156200001157600080fd5b50604051620011f3380380620011f3833981810160405260608110156200003757600080fd5b81019080805160405193929190846401000000008211156200005857600080fd5b9083019060208201858111156200006e57600080fd5b82516401000000008111828201881017156200008957600080fd5b82525081516020918201929091019080838360005b83811015620000b85781810151838201526020016200009e565b50505050905090810190601f168015620000e65780820380516001836020036101000a031916815260200191505b50604052602001805160405193929190846401000000008211156200010a57600080fd5b9083019060208201858111156200012057600080fd5b82516401000000008111828201881017156200013b57600080fd5b82525081516020918201929091019080838360005b838110156200016a57818101518382015260200162000150565b50505050905090810190601f168015620001985780820380516001836020036101000a031916815260200191505b5060405260209081015185519093508592508491620001bd9160039185019062000219565b508051620001d390600490602084019062000219565b5050600580546001600160a01b039390931661010090810233909102610100600160a81b031960ff199095166012178516179093169290921790915550620002c5915050565b828054600181600116156101000203166002900490600052602060002090601f0160209004810192826200025157600085556200029c565b82601f106200026c57805160ff19168380011785556200029c565b828001600101855582156200029c579182015b828111156200029c5782518255916020019190600101906200027f565b50620002aa929150620002ae565b5090565b5b80821115620002aa5760008155600101620002af565b610f1e80620002d56000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c806370a08231116100a2578063a457c2d711610071578063a457c2d714610343578063a9059cbb1461036f578063c024cd261461039b578063dd62ed3e146103c7578063f2fde38b146103f55761010b565b806370a08231146102cb57806371297784146102f1578063893d20e81461031757806395d89b411461033b5761010b565b806323b872dd116100de57806323b872dd1461021f578063313ce56714610255578063395093511461027357806342986e131461029f5761010b565b806306fdde0314610110578063095ea7b31461018d5780630fb66557146101cd57806318160ddd14610205575b600080fd5b61011861041b565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561015257818101518382015260200161013a565b50505050905090810190601f16801561017f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101b9600480360360408110156101a357600080fd5b506001600160a01b0381351690602001356104b1565b604080519115158252519081900360200190f35b610203600480360360608110156101e357600080fd5b506001600160a01b038135811691602081013590911690604001356104ce565b005b61020d6104fa565b60408051918252519081900360200190f35b6101b96004803603606081101561023557600080fd5b506001600160a01b03813581169160208101359091169060400135610500565b61025d610587565b6040805160ff9092168252519081900360200190f35b6101b96004803603604081101561028957600080fd5b506001600160a01b038135169060200135610590565b610203600480360360408110156102b557600080fd5b506001600160a01b0381351690602001356105de565b61020d600480360360208110156102e157600080fd5b50356001600160a01b0316610608565b61020d6004803603602081101561030757600080fd5b50356001600160a01b0316610623565b61031f61065f565b604080516001600160a01b039092168252519081900360200190f35b610118610673565b6101b96004803603604081101561035957600080fd5b506001600160a01b0381351690602001356106d4565b6101b96004803603604081101561038557600080fd5b506001600160a01b03813516906020013561073c565b610203600480360360408110156103b157600080fd5b506001600160a01b038135169060200135610750565b61020d600480360360408110156103dd57600080fd5b506001600160a01b0381358116916020013516610776565b6101b96004803603602081101561040b57600080fd5b50356001600160a01b03166107a1565b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156104a75780601f1061047c576101008083540402835291602001916104a7565b820191906000526020600020905b81548152906001019060200180831161048a57829003601f168201915b5050505050905090565b60006104c56104be610818565b848461081c565b50600192915050565b60055461010090046001600160a01b031633146104ea57600080fd5b6104f5838383610908565b505050565b60025490565b600061050d848484610908565b61057d84610519610818565b61057885604051806060016040528060288152602001610e32602891396001600160a01b038a16600090815260016020526040812090610557610818565b6001600160a01b031681526020810191909152604001600020549190610a63565b61081c565b5060019392505050565b60055460ff1690565b60006104c561059d610818565b8461057885600160006105ae610818565b6001600160a01b03908116825260208083019390935260409182016000908120918c168152925290205490610afa565b60055461010090046001600160a01b031633146105fa57600080fd5b6106048282610b5b565b5050565b6001600160a01b031660009081526020819052604090205490565b60055460009061010090046001600160a01b0316331461064257600080fd5b600061064d83610608565b90506106598382610b5b565b92915050565b60055461010090046001600160a01b031690565b60048054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156104a75780601f1061047c576101008083540402835291602001916104a7565b60006104c56106e1610818565b8461057885604051806060016040528060258152602001610ec4602591396001600061070b610818565b6001600160a01b03908116825260208083019390935260409182016000908120918d16815292529020549190610a63565b60006104c5610749610818565b8484610908565b60055461010090046001600160a01b0316331461076c57600080fd5b6106048282610c57565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b60055460009061010090046001600160a01b031633146107c057600080fd5b6001600160a01b0382166107d357600080fd5b6005546107ee9061010090046001600160a01b031683610604565b50600580546001600160a01b03831661010002610100600160a81b03199091161790556001919050565b3390565b6001600160a01b0383166108615760405162461bcd60e51b8152600401808060200182810382526024815260200180610ea06024913960400191505060405180910390fd5b6001600160a01b0382166108a65760405162461bcd60e51b8152600401808060200182810382526022815260200180610dea6022913960400191505060405180910390fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b03831661094d5760405162461bcd60e51b8152600401808060200182810382526025815260200180610e7b6025913960400191505060405180910390fd5b6001600160a01b0382166109925760405162461bcd60e51b8152600401808060200182810382526023815260200180610da56023913960400191505060405180910390fd5b61099d8383836104f5565b6109da81604051806060016040528060268152602001610e0c602691396001600160a01b0386166000908152602081905260409020549190610a63565b6001600160a01b038085166000908152602081905260408082209390935590841681522054610a099082610afa565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b60008184841115610af25760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610ab7578181015183820152602001610a9f565b50505050905090810190601f168015610ae45780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b600082820183811015610b54576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b6001600160a01b038216610ba05760405162461bcd60e51b8152600401808060200182810382526021815260200180610e5a6021913960400191505060405180910390fd5b610bac826000836104f5565b610be981604051806060016040528060228152602001610dc8602291396001600160a01b0385166000908152602081905260409020549190610a63565b6001600160a01b038316600090815260208190526040902055600254610c0f9082610d47565b6002556040805182815290516000916001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b6001600160a01b038216610cb2576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b610cbe600083836104f5565b600254610ccb9082610afa565b6002556001600160a01b038216600090815260208190526040902054610cf19082610afa565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b600082821115610d9e576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b5090039056fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a206275726e20616d6f756e7420657863656564732062616c616e636545524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a206275726e2066726f6d20746865207a65726f206164647265737345524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa2646970667358221220c881513fca5a75d47e02fc1c04920461b43ce001b23b37bd2a0244cb5b4737ce64736f6c634300070600334d6f6e65796c696e65206f6464732061726520746f6f20736b657765643a20776f756c64206861766520756e646572203225206f646473a26469706673582212205a289f2c1ec6d622dba7ddce5ada8c0d1982c668c185ba5a479b3f26ed75848e64736f6c6343000706003360806040523480156200001157600080fd5b50604051620011f3380380620011f3833981810160405260608110156200003757600080fd5b81019080805160405193929190846401000000008211156200005857600080fd5b9083019060208201858111156200006e57600080fd5b82516401000000008111828201881017156200008957600080fd5b82525081516020918201929091019080838360005b83811015620000b85781810151838201526020016200009e565b50505050905090810190601f168015620000e65780820380516001836020036101000a031916815260200191505b50604052602001805160405193929190846401000000008211156200010a57600080fd5b9083019060208201858111156200012057600080fd5b82516401000000008111828201881017156200013b57600080fd5b82525081516020918201929091019080838360005b838110156200016a57818101518382015260200162000150565b50505050905090810190601f168015620001985780820380516001836020036101000a031916815260200191505b5060405260209081015185519093508592508491620001bd9160039185019062000219565b508051620001d390600490602084019062000219565b5050600580546001600160a01b039390931661010090810233909102610100600160a81b031960ff199095166012178516179093169290921790915550620002c5915050565b828054600181600116156101000203166002900490600052602060002090601f0160209004810192826200025157600085556200029c565b82601f106200026c57805160ff19168380011785556200029c565b828001600101855582156200029c579182015b828111156200029c5782518255916020019190600101906200027f565b50620002aa929150620002ae565b5090565b5b80821115620002aa5760008155600101620002af565b610f1e80620002d56000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c806370a08231116100a2578063a457c2d711610071578063a457c2d714610343578063a9059cbb1461036f578063c024cd261461039b578063dd62ed3e146103c7578063f2fde38b146103f55761010b565b806370a08231146102cb57806371297784146102f1578063893d20e81461031757806395d89b411461033b5761010b565b806323b872dd116100de57806323b872dd1461021f578063313ce56714610255578063395093511461027357806342986e131461029f5761010b565b806306fdde0314610110578063095ea7b31461018d5780630fb66557146101cd57806318160ddd14610205575b600080fd5b61011861041b565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561015257818101518382015260200161013a565b50505050905090810190601f16801561017f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101b9600480360360408110156101a357600080fd5b506001600160a01b0381351690602001356104b1565b604080519115158252519081900360200190f35b610203600480360360608110156101e357600080fd5b506001600160a01b038135811691602081013590911690604001356104ce565b005b61020d6104fa565b60408051918252519081900360200190f35b6101b96004803603606081101561023557600080fd5b506001600160a01b03813581169160208101359091169060400135610500565b61025d610587565b6040805160ff9092168252519081900360200190f35b6101b96004803603604081101561028957600080fd5b506001600160a01b038135169060200135610590565b610203600480360360408110156102b557600080fd5b506001600160a01b0381351690602001356105de565b61020d600480360360208110156102e157600080fd5b50356001600160a01b0316610608565b61020d6004803603602081101561030757600080fd5b50356001600160a01b0316610623565b61031f61065f565b604080516001600160a01b039092168252519081900360200190f35b610118610673565b6101b96004803603604081101561035957600080fd5b506001600160a01b0381351690602001356106d4565b6101b96004803603604081101561038557600080fd5b506001600160a01b03813516906020013561073c565b610203600480360360408110156103b157600080fd5b506001600160a01b038135169060200135610750565b61020d600480360360408110156103dd57600080fd5b506001600160a01b0381358116916020013516610776565b6101b96004803603602081101561040b57600080fd5b50356001600160a01b03166107a1565b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156104a75780601f1061047c576101008083540402835291602001916104a7565b820191906000526020600020905b81548152906001019060200180831161048a57829003601f168201915b5050505050905090565b60006104c56104be610818565b848461081c565b50600192915050565b60055461010090046001600160a01b031633146104ea57600080fd5b6104f5838383610908565b505050565b60025490565b600061050d848484610908565b61057d84610519610818565b61057885604051806060016040528060288152602001610e32602891396001600160a01b038a16600090815260016020526040812090610557610818565b6001600160a01b031681526020810191909152604001600020549190610a63565b61081c565b5060019392505050565b60055460ff1690565b60006104c561059d610818565b8461057885600160006105ae610818565b6001600160a01b03908116825260208083019390935260409182016000908120918c168152925290205490610afa565b60055461010090046001600160a01b031633146105fa57600080fd5b6106048282610b5b565b5050565b6001600160a01b031660009081526020819052604090205490565b60055460009061010090046001600160a01b0316331461064257600080fd5b600061064d83610608565b90506106598382610b5b565b92915050565b60055461010090046001600160a01b031690565b60048054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156104a75780601f1061047c576101008083540402835291602001916104a7565b60006104c56106e1610818565b8461057885604051806060016040528060258152602001610ec4602591396001600061070b610818565b6001600160a01b03908116825260208083019390935260409182016000908120918d16815292529020549190610a63565b60006104c5610749610818565b8484610908565b60055461010090046001600160a01b0316331461076c57600080fd5b6106048282610c57565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b60055460009061010090046001600160a01b031633146107c057600080fd5b6001600160a01b0382166107d357600080fd5b6005546107ee9061010090046001600160a01b031683610604565b50600580546001600160a01b03831661010002610100600160a81b03199091161790556001919050565b3390565b6001600160a01b0383166108615760405162461bcd60e51b8152600401808060200182810382526024815260200180610ea06024913960400191505060405180910390fd5b6001600160a01b0382166108a65760405162461bcd60e51b8152600401808060200182810382526022815260200180610dea6022913960400191505060405180910390fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b03831661094d5760405162461bcd60e51b8152600401808060200182810382526025815260200180610e7b6025913960400191505060405180910390fd5b6001600160a01b0382166109925760405162461bcd60e51b8152600401808060200182810382526023815260200180610da56023913960400191505060405180910390fd5b61099d8383836104f5565b6109da81604051806060016040528060268152602001610e0c602691396001600160a01b0386166000908152602081905260409020549190610a63565b6001600160a01b038085166000908152602081905260408082209390935590841681522054610a099082610afa565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b60008184841115610af25760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610ab7578181015183820152602001610a9f565b50505050905090810190601f168015610ae45780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b600082820183811015610b54576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b6001600160a01b038216610ba05760405162461bcd60e51b8152600401808060200182810382526021815260200180610e5a6021913960400191505060405180910390fd5b610bac826000836104f5565b610be981604051806060016040528060228152602001610dc8602291396001600160a01b0385166000908152602081905260409020549190610a63565b6001600160a01b038316600090815260208190526040902055600254610c0f9082610d47565b6002556040805182815290516000916001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b6001600160a01b038216610cb2576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b610cbe600083836104f5565b600254610ccb9082610afa565b6002556001600160a01b038216600090815260208190526040902054610cf19082610afa565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b600082821115610d9e576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b5090039056fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a206275726e20616d6f756e7420657863656564732062616c616e636545524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a206275726e2066726f6d20746865207a65726f206164647265737345524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa2646970667358221220c881513fca5a75d47e02fc1c04920461b43ce001b23b37bd2a0244cb5b4737ce64736f6c63430007060033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "transferOwnership(address)": {
        "details": "Allows the current owner to transfer control of the contract to a newOwner.",
        "params": {
          "_newOwner": "The address to transfer ownership to."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5793,
        "contract": "contracts/turbo/NFLMarketFactory.sol:NFLMarketFactory",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 9268,
        "contract": "contracts/turbo/NFLMarketFactory.sol:NFLMarketFactory",
        "label": "collateral",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20Full)5770"
      },
      {
        "astId": 9270,
        "contract": "contracts/turbo/NFLMarketFactory.sol:NFLMarketFactory",
        "label": "feePot",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(FeePot)11372"
      },
      {
        "astId": 9272,
        "contract": "contracts/turbo/NFLMarketFactory.sol:NFLMarketFactory",
        "label": "stakerFee",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 9274,
        "contract": "contracts/turbo/NFLMarketFactory.sol:NFLMarketFactory",
        "label": "settlementFee",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 9276,
        "contract": "contracts/turbo/NFLMarketFactory.sol:NFLMarketFactory",
        "label": "protocolFee",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 9278,
        "contract": "contracts/turbo/NFLMarketFactory.sol:NFLMarketFactory",
        "label": "protocol",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 9281,
        "contract": "contracts/turbo/NFLMarketFactory.sol:NFLMarketFactory",
        "label": "accumulatedProtocolFee",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 9285,
        "contract": "contracts/turbo/NFLMarketFactory.sol:NFLMarketFactory",
        "label": "accumulatedSettlementFees",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 9287,
        "contract": "contracts/turbo/NFLMarketFactory.sol:NFLMarketFactory",
        "label": "shareFactor",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 9311,
        "contract": "contracts/turbo/NFLMarketFactory.sol:NFLMarketFactory",
        "label": "markets",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_struct(Market)9308_storage)dyn_storage"
      },
      {
        "astId": 13847,
        "contract": "contracts/turbo/NFLMarketFactory.sol:NFLMarketFactory",
        "label": "marketDetails",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_struct(MarketDetails)13843_storage)"
      },
      {
        "astId": 13874,
        "contract": "contracts/turbo/NFLMarketFactory.sol:NFLMarketFactory",
        "label": "events",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_struct(EventDetails)13870_storage)"
      },
      {
        "astId": 13877,
        "contract": "contracts/turbo/NFLMarketFactory.sol:NFLMarketFactory",
        "label": "listOfEvents",
        "offset": 0,
        "slot": "13",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 13879,
        "contract": "contracts/turbo/NFLMarketFactory.sol:NFLMarketFactory",
        "label": "linkNode",
        "offset": 0,
        "slot": "14",
        "type": "t_address"
      },
      {
        "astId": 13881,
        "contract": "contracts/turbo/NFLMarketFactory.sol:NFLMarketFactory",
        "label": "sportId",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_contract(OwnedERC20)15355)dyn_storage": {
        "base": "t_contract(OwnedERC20)15355",
        "encoding": "dynamic_array",
        "label": "contract OwnedERC20[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Market)9308_storage)dyn_storage": {
        "base": "t_struct(Market)9308_storage",
        "encoding": "dynamic_array",
        "label": "struct AbstractMarketFactoryV2.Market[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)3_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[3]",
        "numberOfBytes": "96"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(FeePot)11372": {
        "encoding": "inplace",
        "label": "contract FeePot",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20Full)5770": {
        "encoding": "inplace",
        "label": "contract IERC20Full",
        "numberOfBytes": "20"
      },
      "t_contract(OwnedERC20)15355": {
        "encoding": "inplace",
        "label": "contract OwnedERC20",
        "numberOfBytes": "20"
      },
      "t_enum(EventStatus)13853": {
        "encoding": "inplace",
        "label": "enum NFLMarketFactory.EventStatus",
        "numberOfBytes": "1"
      },
      "t_enum(MarketType)13812": {
        "encoding": "inplace",
        "label": "enum NFLMarketFactory.MarketType",
        "numberOfBytes": "1"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(EventDetails)13870_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct NFLMarketFactory.EventDetails)",
        "numberOfBytes": "32",
        "value": "t_struct(EventDetails)13870_storage"
      },
      "t_mapping(t_uint256,t_struct(MarketDetails)13843_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct NFLMarketFactory.MarketDetails)",
        "numberOfBytes": "32",
        "value": "t_struct(MarketDetails)13843_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(EventDetails)13870_storage": {
        "encoding": "inplace",
        "label": "struct NFLMarketFactory.EventDetails",
        "members": [
          {
            "astId": 13857,
            "contract": "contracts/turbo/NFLMarketFactory.sol:NFLMarketFactory",
            "label": "markets",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_uint256)3_storage"
          },
          {
            "astId": 13859,
            "contract": "contracts/turbo/NFLMarketFactory.sol:NFLMarketFactory",
            "label": "startTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 13861,
            "contract": "contracts/turbo/NFLMarketFactory.sol:NFLMarketFactory",
            "label": "homeScore",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 13863,
            "contract": "contracts/turbo/NFLMarketFactory.sol:NFLMarketFactory",
            "label": "awayScore",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 13865,
            "contract": "contracts/turbo/NFLMarketFactory.sol:NFLMarketFactory",
            "label": "status",
            "offset": 0,
            "slot": "6",
            "type": "t_enum(EventStatus)13853"
          },
          {
            "astId": 13867,
            "contract": "contracts/turbo/NFLMarketFactory.sol:NFLMarketFactory",
            "label": "resolutionTime",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 13869,
            "contract": "contracts/turbo/NFLMarketFactory.sol:NFLMarketFactory",
            "label": "finalized",
            "offset": 0,
            "slot": "8",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_struct(Market)9308_storage": {
        "encoding": "inplace",
        "label": "struct AbstractMarketFactoryV2.Market",
        "members": [
          {
            "astId": 9289,
            "contract": "contracts/turbo/NFLMarketFactory.sol:NFLMarketFactory",
            "label": "settlementAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 9292,
            "contract": "contracts/turbo/NFLMarketFactory.sol:NFLMarketFactory",
            "label": "shareTokens",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_contract(OwnedERC20)15355)dyn_storage"
          },
          {
            "astId": 9294,
            "contract": "contracts/turbo/NFLMarketFactory.sol:NFLMarketFactory",
            "label": "endTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 9296,
            "contract": "contracts/turbo/NFLMarketFactory.sol:NFLMarketFactory",
            "label": "winner",
            "offset": 0,
            "slot": "3",
            "type": "t_contract(OwnedERC20)15355"
          },
          {
            "astId": 9298,
            "contract": "contracts/turbo/NFLMarketFactory.sol:NFLMarketFactory",
            "label": "settlementFee",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 9300,
            "contract": "contracts/turbo/NFLMarketFactory.sol:NFLMarketFactory",
            "label": "protocolFee",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 9302,
            "contract": "contracts/turbo/NFLMarketFactory.sol:NFLMarketFactory",
            "label": "stakerFee",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 9304,
            "contract": "contracts/turbo/NFLMarketFactory.sol:NFLMarketFactory",
            "label": "creationTimestamp",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 9307,
            "contract": "contracts/turbo/NFLMarketFactory.sol:NFLMarketFactory",
            "label": "initialOdds",
            "offset": 0,
            "slot": "8",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_struct(MarketDetails)13843_storage": {
        "encoding": "inplace",
        "label": "struct NFLMarketFactory.MarketDetails",
        "members": [
          {
            "astId": 13826,
            "contract": "contracts/turbo/NFLMarketFactory.sol:NFLMarketFactory",
            "label": "eventId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 13828,
            "contract": "contracts/turbo/NFLMarketFactory.sol:NFLMarketFactory",
            "label": "homeTeamName",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 13830,
            "contract": "contracts/turbo/NFLMarketFactory.sol:NFLMarketFactory",
            "label": "homeTeamId",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 13832,
            "contract": "contracts/turbo/NFLMarketFactory.sol:NFLMarketFactory",
            "label": "awayTeamName",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 13834,
            "contract": "contracts/turbo/NFLMarketFactory.sol:NFLMarketFactory",
            "label": "awayTeamId",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 13836,
            "contract": "contracts/turbo/NFLMarketFactory.sol:NFLMarketFactory",
            "label": "estimatedStartTime",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 13838,
            "contract": "contracts/turbo/NFLMarketFactory.sol:NFLMarketFactory",
            "label": "marketType",
            "offset": 0,
            "slot": "6",
            "type": "t_enum(MarketType)13812"
          },
          {
            "astId": 13840,
            "contract": "contracts/turbo/NFLMarketFactory.sol:NFLMarketFactory",
            "label": "eventStatus",
            "offset": 1,
            "slot": "6",
            "type": "t_enum(EventStatus)13853"
          },
          {
            "astId": 13842,
            "contract": "contracts/turbo/NFLMarketFactory.sol:NFLMarketFactory",
            "label": "value0",
            "offset": 0,
            "slot": "7",
            "type": "t_int256"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}