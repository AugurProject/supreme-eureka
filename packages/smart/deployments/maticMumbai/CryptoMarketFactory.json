{
<<<<<<< HEAD
  "address": "0xd2DfFD1a74b8Ec9350B3138BB8b14fC5819c0544",
=======
  "address": "0x9894aC8e14b44b81B08d5d84CFE5b93B8114F25b",
>>>>>>> robert/nfl-ncaa
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "contract IERC20Full",
          "name": "_collateral",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_shareFactor",
          "type": "uint256"
        },
        {
          "internalType": "contract FeePot",
          "name": "_feePot",
          "type": "address"
        },
        {
          "internalType": "uint256[3]",
          "name": "_fees",
          "type": "uint256[3]"
        },
        {
          "internalType": "address",
          "name": "_protocol",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_linkNode",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "CoinAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "MarketActivated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string[]",
          "name": "names",
          "type": "string[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "initialOdds",
          "type": "uint256[]"
        }
      ],
      "name": "MarketCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "winnerIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "winnerName",
          "type": "string"
        }
      ],
      "name": "MarketResolved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "nextResolutionTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "markets",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "prices",
          "type": "uint256[]"
        }
      ],
      "name": "NewPrices",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "SharesBurned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "SharesMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "winningOutcome",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "winningIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "winningName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "settlementFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "payout",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "WinningsClaimed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "accumulatedProtocolFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "accumulatedSettlementFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "_priceFeed",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "_imprecision",
          "type": "uint8"
        }
      ],
      "name": "addCoin",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_coinIndex",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_sharesToBurn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "burnShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_shares",
          "type": "uint256"
        }
      ],
      "name": "calcCost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_collateralIn",
          "type": "uint256"
        }
      ],
      "name": "calcShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_ids",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "claimManyWinnings",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimProtocolFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "claimSettlementFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "claimWinnings",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "coins",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "priceFeed",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "imprecision",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateral",
      "outputs": [
        {
          "internalType": "contract IERC20Full",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint80[]",
          "name": "_roundIds",
          "type": "uint80[]"
        },
        {
          "internalType": "uint256",
          "name": "_nextResolutionTime",
          "type": "uint256"
        }
      ],
      "name": "createAndResolveMarkets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feePot",
      "outputs": [
        {
          "internalType": "contract FeePot",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_coinIndex",
          "type": "uint256"
        }
      ],
      "name": "getCoin",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "contract AggregatorV3Interface",
              "name": "priceFeed",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "imprecision",
              "type": "uint8"
            },
            {
              "internalType": "uint256[1]",
              "name": "currentMarkets",
              "type": "uint256[1]"
            }
          ],
          "internalType": "struct CryptoMarketFactory.Coin",
          "name": "_coin",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCoins",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "contract AggregatorV3Interface",
              "name": "priceFeed",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "imprecision",
              "type": "uint8"
            },
            {
              "internalType": "uint256[1]",
              "name": "currentMarkets",
              "type": "uint256[1]"
            }
          ],
          "internalType": "struct CryptoMarketFactory.Coin[]",
          "name": "_coins",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "getMarket",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "settlementAddress",
              "type": "address"
            },
            {
              "internalType": "contract OwnedERC20[]",
              "name": "shareTokens",
              "type": "address[]"
            },
            {
              "internalType": "contract OwnedERC20",
              "name": "winner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "winnerIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "settlementFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "protocolFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stakerFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "creationTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "initialOdds",
              "type": "uint256[]"
            },
            {
              "internalType": "bool",
              "name": "active",
              "type": "bool"
            }
          ],
          "internalType": "struct AbstractMarketFactoryV3.Market",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        }
      ],
      "name": "getMarketDetails",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum CryptoMarketFactory.MarketType",
              "name": "marketType",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "coinIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "creationPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "resolutionPrice",
              "type": "uint256"
            }
          ],
          "internalType": "struct CryptoMarketFactory.MarketDetails",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVersion",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "isMarketResolved",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "linkNode",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marketCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_shareToMint",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "mintShares",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextResolutionTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocol",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newProtocol",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_claimFirst",
          "type": "bool"
        }
      ],
      "name": "setProtocol",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newFee",
          "type": "uint256"
        }
      ],
      "name": "setProtocolFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newFee",
          "type": "uint256"
        }
      ],
      "name": "setSettlementFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newFee",
          "type": "uint256"
        }
      ],
      "name": "setStakerFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "settlementFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "shareFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakerFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
<<<<<<< HEAD
  "transactionHash": "0x161f436aca205a50aa0a494a463037d8e9b50eb9838d8f4d5167a28fad240d71",
  "receipt": {
    "to": null,
    "from": "0x8C9c733eCd48426b9c53c38ccB60F3b307329bE1",
    "contractAddress": "0xd2DfFD1a74b8Ec9350B3138BB8b14fC5819c0544",
    "transactionIndex": 0,
    "gasUsed": "4640507",
    "logsBloom": "0x
    "blockHash": "0x2f357080aa5145c3d1e6c679891ef7e6cf89e90d5eceb2cf112df4bc4216f218",
    "transactionHash": "0x161f436aca205a50aa0a494a463037d8e9b50eb9838d8f4d5167a28fad240d71",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 17766213,
        "transactionHash": "0x161f436aca205a50aa0a494a463037d8e9b50eb9838d8f4d5167a28fad240d71",
        "address": "0x5799bFe361BEea69f808328FF4884DF92f1f66f0",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000d2dffd1a74b8ec9350b3138bb8b14fc5819c0544",
=======
  "transactionHash": "0x8ac7bc7caa85a2ecc92f69d1fcdedac571cb22ac6896dc62ed8bbf6f0706d618",
  "receipt": {
    "to": null,
    "from": "0x8C9c733eCd48426b9c53c38ccB60F3b307329bE1",
    "contractAddress": "0x9894aC8e14b44b81B08d5d84CFE5b93B8114F25b",
    "transactionIndex": 0,
    "gasUsed": "4640507",
    "logsBloom": "0x
    "blockHash": "0xf23aea620d979066eb10d197a2224036c584ee00a4345c026d0de682b46e21d7",
    "transactionHash": "0x8ac7bc7caa85a2ecc92f69d1fcdedac571cb22ac6896dc62ed8bbf6f0706d618",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 17858751,
        "transactionHash": "0x8ac7bc7caa85a2ecc92f69d1fcdedac571cb22ac6896dc62ed8bbf6f0706d618",
        "address": "0x5799bFe361BEea69f808328FF4884DF92f1f66f0",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000009894ac8e14b44b81b08d5d84cfe5b93b8114f25b",
>>>>>>> robert/nfl-ncaa
          "0x00000000000000000000000059ddfe9961e050bda1ed9bf9ccd009948036dd76"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 0,
<<<<<<< HEAD
        "blockHash": "0x2f357080aa5145c3d1e6c679891ef7e6cf89e90d5eceb2cf112df4bc4216f218"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 17766213,
        "transactionHash": "0x161f436aca205a50aa0a494a463037d8e9b50eb9838d8f4d5167a28fad240d71",
=======
        "blockHash": "0xf23aea620d979066eb10d197a2224036c584ee00a4345c026d0de682b46e21d7"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 17858751,
        "transactionHash": "0x8ac7bc7caa85a2ecc92f69d1fcdedac571cb22ac6896dc62ed8bbf6f0706d618",
>>>>>>> robert/nfl-ncaa
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000008c9c733ecd48426b9c53c38ccb60f3b307329be1",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
<<<<<<< HEAD
        "data": "0x00000000000000000000000000000000000000000000000000107c843b500e00000000000000000000000000000000000000000000000006e180e2c5f946f2de00000000000000000000000000000000000000000000012feba5075a70748fd2000000000000000000000000000000000000000000000006e1706641bdf6e4de00000000000000000000000000000000000000000000012febb583deabc49dd2",
        "logIndex": 1,
        "blockHash": "0x2f357080aa5145c3d1e6c679891ef7e6cf89e90d5eceb2cf112df4bc4216f218"
      }
    ],
    "blockNumber": 17766213,
=======
        "data": "0x00000000000000000000000000000000000000000000000001ee977ef361a40000000000000000000000000000000000000000000000000679f29ba92dad2ade0000000000000000000000000000000000000000000001384ed29469ab23b6430000000000000000000000000000000000000000000000067804042a3a4b86de00000000000000000000000000000000000000000000013850c12be89e855a43",
        "logIndex": 1,
        "blockHash": "0xf23aea620d979066eb10d197a2224036c584ee00a4345c026d0de682b46e21d7"
      }
    ],
    "blockNumber": 17858751,
>>>>>>> robert/nfl-ncaa
    "cumulativeGasUsed": "4640507",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8C9c733eCd48426b9c53c38ccB60F3b307329bE1",
    "0x5799bFe361BEea69f808328FF4884DF92f1f66f0",
    "1000000000000",
    "0x59DdFE9961e050bdA1ed9bf9CCD009948036Dd76",
    [
      0,
      "500000000000000",
      0
    ],
    "0x8C9c733eCd48426b9c53c38ccB60F3b307329bE1",
    "0x8C9c733eCd48426b9c53c38ccB60F3b307329bE1"
  ],
<<<<<<< HEAD
  "solcInputHash": "ef4569a9e26c885e36540c83ded2885d",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Full\",\"name\":\"_collateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_shareFactor\",\"type\":\"uint256\"},{\"internalType\":\"contract FeePot\",\"name\":\"_feePot\",\"type\":\"address\"},{\"internalType\":\"uint256[3]\",\"name\":\"_fees\",\"type\":\"uint256[3]\"},{\"internalType\":\"address\",\"name\":\"_protocol\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_linkNode\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"CoinAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"MarketActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"names\",\"type\":\"string[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"initialOdds\",\"type\":\"uint256[]\"}],\"name\":\"MarketCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"winnerIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"winnerName\",\"type\":\"string\"}],\"name\":\"MarketResolved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nextResolutionTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"markets\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"prices\",\"type\":\"uint256[]\"}],\"name\":\"NewPrices\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"SharesBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"SharesMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"winningOutcome\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"winningIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"winningName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"settlementFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"WinningsClaimed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accumulatedProtocolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accumulatedSettlementFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"_priceFeed\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_imprecision\",\"type\":\"uint8\"}],\"name\":\"addCoin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_coinIndex\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sharesToBurn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"burnShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"calcCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_collateralIn\",\"type\":\"uint256\"}],\"name\":\"calcShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"claimManyWinnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimProtocolFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"claimSettlementFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"claimWinnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"coins\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"priceFeed\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"imprecision\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateral\",\"outputs\":[{\"internalType\":\"contract IERC20Full\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint80[]\",\"name\":\"_roundIds\",\"type\":\"uint80[]\"},{\"internalType\":\"uint256\",\"name\":\"_nextResolutionTime\",\"type\":\"uint256\"}],\"name\":\"createAndResolveMarkets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feePot\",\"outputs\":[{\"internalType\":\"contract FeePot\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_coinIndex\",\"type\":\"uint256\"}],\"name\":\"getCoin\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"priceFeed\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"imprecision\",\"type\":\"uint8\"},{\"internalType\":\"uint256[1]\",\"name\":\"currentMarkets\",\"type\":\"uint256[1]\"}],\"internalType\":\"struct CryptoMarketFactory.Coin\",\"name\":\"_coin\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCoins\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"priceFeed\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"imprecision\",\"type\":\"uint8\"},{\"internalType\":\"uint256[1]\",\"name\":\"currentMarkets\",\"type\":\"uint256[1]\"}],\"internalType\":\"struct CryptoMarketFactory.Coin[]\",\"name\":\"_coins\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getMarket\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"settlementAddress\",\"type\":\"address\"},{\"internalType\":\"contract OwnedERC20[]\",\"name\":\"shareTokens\",\"type\":\"address[]\"},{\"internalType\":\"contract OwnedERC20\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"winnerIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"settlementFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"creationTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"initialOdds\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"internalType\":\"struct AbstractMarketFactoryV3.Market\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"}],\"name\":\"getMarketDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"enum CryptoMarketFactory.MarketType\",\"name\":\"marketType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"coinIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"creationPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resolutionPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct CryptoMarketFactory.MarketDetails\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"isMarketResolved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"linkNode\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_shareToMint\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"mintShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextResolutionTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocol\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newProtocol\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_claimFirst\",\"type\":\"bool\"}],\"name\":\"setProtocol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"setProtocolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"setSettlementFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"setStakerFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"settlementFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shareFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakerFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"transferOwnership(address)\":{\"details\":\"Allows the current owner to transfer control of the contract to a newOwner.\",\"params\":{\"_newOwner\":\"The address to transfer ownership to.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/turbo/CryptoMarketFactory.sol\":\"CryptoMarketFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.7/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals() external view returns (uint8);\\n  function description() external view returns (string memory);\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\",\"keccak256\":\"0x78af5c13ec137bdbb22ec9d65c730fb6f138d3a61a3fdbb63be4838ce7faf2a6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xe22a1fc7400ae196eba2ad1562d0386462b00a6363b742d55a2fd2021a58586f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0x36b5ca4eabe888b39b10973621ca0dcc9b1508f8d06db9ddf045d7aa7c867d4a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"contracts/balancer/BColor.sol\":{\"content\":\"// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\ninterface BColor {\\n    function getColor() external view returns (bytes32);\\n}\\n\\ncontract BBronze is BColor {\\n    function getColor() external pure override returns (bytes32) {\\n        return bytes32(\\\"BRONZE\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xc716fe6583bbf6f8546c258540b2f7527dbc3b1f4b30007a0978b620c9779378\",\"license\":\"MIT\"},\"contracts/balancer/BConst.sol\":{\"content\":\"// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\nimport \\\"./BColor.sol\\\";\\n\\ncontract BConst is BBronze {\\n    uint256 public constant BONE = 10**18;\\n\\n    uint256 public constant MIN_BOUND_TOKENS = 2;\\n    uint256 public constant MAX_BOUND_TOKENS = 8;\\n\\n    uint256 public constant MIN_FEE = BONE / 10**6;\\n    uint256 public constant MAX_FEE = BONE / 10;\\n    uint256 public constant EXIT_FEE = 0;\\n\\n    uint256 public constant MIN_WEIGHT = BONE;\\n    uint256 public constant MAX_WEIGHT = BONE * 50;\\n    uint256 public constant MAX_TOTAL_WEIGHT = BONE * 50;\\n    uint256 public constant MIN_BALANCE = BONE / 10**12;\\n\\n    uint256 public constant INIT_POOL_SUPPLY = BONE * 100;\\n\\n    uint256 public constant MIN_BPOW_BASE = 1 wei;\\n    uint256 public constant MAX_BPOW_BASE = (2 * BONE) - 1 wei;\\n    uint256 public constant BPOW_PRECISION = BONE / 10**10;\\n\\n    uint256 public constant MAX_IN_RATIO = BONE / 2;\\n    uint256 public constant MAX_OUT_RATIO = (BONE / 3) + 1 wei;\\n}\\n\",\"keccak256\":\"0xb8d5d4ae9948f9be6ddb3111b38f01a15a607a155010321c4666351c9ca9afec\",\"license\":\"MIT\"},\"contracts/balancer/BMath.sol\":{\"content\":\"// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\nimport \\\"./BNum.sol\\\";\\n\\ncontract BMath is BBronze, BConst, BNum {\\n    /**********************************************************************************************\\n    // calcSpotPrice                                                                             //\\n    // sP = spotPrice                                                                            //\\n    // bI = tokenBalanceIn                ( bI / wI )         1                                  //\\n    // bO = tokenBalanceOut         sP =  -----------  *  ----------                             //\\n    // wI = tokenWeightIn                 ( bO / wO )     ( 1 - sF )                             //\\n    // wO = tokenWeightOut                                                                       //\\n    // sF = swapFee                                                                              //\\n    **********************************************************************************************/\\n    function calcSpotPrice(\\n        uint256 tokenBalanceIn,\\n        uint256 tokenWeightIn,\\n        uint256 tokenBalanceOut,\\n        uint256 tokenWeightOut,\\n        uint256 swapFee\\n    ) public pure returns (uint256 spotPrice) {\\n        uint256 numer = bdiv(tokenBalanceIn, tokenWeightIn);\\n        uint256 denom = bdiv(tokenBalanceOut, tokenWeightOut);\\n        uint256 ratio = bdiv(numer, denom);\\n        uint256 scale = bdiv(BONE, bsub(BONE, swapFee));\\n        return (spotPrice = bmul(ratio, scale));\\n    }\\n\\n    /**********************************************************************************************\\n    // calcOutGivenIn                                                                            //\\n    // aO = tokenAmountOut                                                                       //\\n    // bO = tokenBalanceOut                                                                      //\\n    // bI = tokenBalanceIn              /      /            bI             \\\\    (wI / wO) \\\\      //\\n    // aI = tokenAmountIn    aO = bO * |  1 - | --------------------------  | ^            |     //\\n    // wI = tokenWeightIn               \\\\      \\\\ ( bI + ( aI * ( 1 - sF )) /              /      //\\n    // wO = tokenWeightOut                                                                       //\\n    // sF = swapFee                                                                              //\\n    **********************************************************************************************/\\n    function calcOutGivenIn(\\n        uint256 tokenBalanceIn,\\n        uint256 tokenWeightIn,\\n        uint256 tokenBalanceOut,\\n        uint256 tokenWeightOut,\\n        uint256 tokenAmountIn,\\n        uint256 swapFee\\n    ) public pure returns (uint256 tokenAmountOut) {\\n        uint256 weightRatio = bdiv(tokenWeightIn, tokenWeightOut);\\n        uint256 adjustedIn = bsub(BONE, swapFee);\\n        adjustedIn = bmul(tokenAmountIn, adjustedIn);\\n        uint256 y = bdiv(tokenBalanceIn, badd(tokenBalanceIn, adjustedIn));\\n        uint256 foo = bpow(y, weightRatio);\\n        uint256 bar = bsub(BONE, foo);\\n        tokenAmountOut = bmul(tokenBalanceOut, bar);\\n        return tokenAmountOut;\\n    }\\n\\n    /**********************************************************************************************\\n    // calcInGivenOut                                                                            //\\n    // aI = tokenAmountIn                                                                        //\\n    // bO = tokenBalanceOut               /  /     bO      \\\\    (wO / wI)      \\\\                 //\\n    // bI = tokenBalanceIn          bI * |  | ------------  | ^            - 1  |                //\\n    // aO = tokenAmountOut    aI =        \\\\  \\\\ ( bO - aO ) /                   /                 //\\n    // wI = tokenWeightIn           --------------------------------------------                 //\\n    // wO = tokenWeightOut                          ( 1 - sF )                                   //\\n    // sF = swapFee                                                                              //\\n    **********************************************************************************************/\\n    function calcInGivenOut(\\n        uint256 tokenBalanceIn,\\n        uint256 tokenWeightIn,\\n        uint256 tokenBalanceOut,\\n        uint256 tokenWeightOut,\\n        uint256 tokenAmountOut,\\n        uint256 swapFee\\n    ) public pure returns (uint256 tokenAmountIn) {\\n        uint256 weightRatio = bdiv(tokenWeightOut, tokenWeightIn);\\n        uint256 diff = bsub(tokenBalanceOut, tokenAmountOut);\\n        uint256 y = bdiv(tokenBalanceOut, diff);\\n        uint256 foo = bpow(y, weightRatio);\\n        foo = bsub(foo, BONE);\\n        tokenAmountIn = bsub(BONE, swapFee);\\n        tokenAmountIn = bdiv(bmul(tokenBalanceIn, foo), tokenAmountIn);\\n        return tokenAmountIn;\\n    }\\n\\n    /**********************************************************************************************\\n    // calcPoolOutGivenSingleIn                                                                  //\\n    // pAo = poolAmountOut         /                                              \\\\              //\\n    // tAi = tokenAmountIn        ///      /     //    wI \\\\      \\\\\\\\       \\\\     wI \\\\             //\\n    // wI = tokenWeightIn        //| tAi *| 1 - || 1 - --  | * sF || + tBi \\\\    --  \\\\            //\\n    // tW = totalWeight     pAo=||  \\\\      \\\\     \\\\\\\\    tW /      //         | ^ tW   | * pS - pS //\\n    // tBi = tokenBalanceIn      \\\\\\\\  ------------------------------------- /        /            //\\n    // pS = poolSupply            \\\\\\\\                    tBi               /        /             //\\n    // sF = swapFee                \\\\                                              /              //\\n    **********************************************************************************************/\\n\\n    // Charge the trading fee for the proportion of tokenAi\\n    ///  which is implicitly traded to the other pool tokens.\\n    // That proportion is (1- weightTokenIn)\\n    // tokenAiAfterFee = tAi * (1 - (1-weightTi) * poolFee);\\n\\n    function calcPoolOutGivenSingleIn(\\n        uint256 tokenBalanceIn,\\n        uint256 tokenWeightIn,\\n        uint256 poolSupply,\\n        uint256 totalWeight,\\n        uint256 tokenAmountIn,\\n        uint256 swapFee\\n    ) public pure returns (uint256 poolAmountOut) {\\n        uint256 normalizedWeight = bdiv(tokenWeightIn, totalWeight);\\n        uint256 zaz = bmul(bsub(BONE, normalizedWeight), swapFee);\\n        uint256 tokenAmountInAfterFee = bmul(tokenAmountIn, bsub(BONE, zaz));\\n\\n        uint256 newTokenBalanceIn = badd(tokenBalanceIn, tokenAmountInAfterFee);\\n        uint256 tokenInRatio = bdiv(newTokenBalanceIn, tokenBalanceIn);\\n\\n        // uint newPoolSupply = (ratioTi ^ weightTi) * poolSupply;\\n        uint256 poolRatio = bpow(tokenInRatio, normalizedWeight);\\n        uint256 newPoolSupply = bmul(poolRatio, poolSupply);\\n        poolAmountOut = bsub(newPoolSupply, poolSupply);\\n        return poolAmountOut;\\n    }\\n\\n    /**********************************************************************************************\\n    // calcSingleInGivenPoolOut                                                                  //\\n    // tAi = tokenAmountIn              //(pS + pAo)\\\\     /    1    \\\\\\\\                           //\\n    // pS = poolSupply                 || ---------  | ^ | --------- || * bI - bI                //\\n    // pAo = poolAmountOut              \\\\\\\\    pS    /     \\\\(wI / tW)//                           //\\n    // bI = balanceIn          tAi =  --------------------------------------------               //\\n    // wI = weightIn                              /      wI  \\\\                                   //\\n    // tW = totalWeight                          |  1 - ----  |  * sF                            //\\n    // sF = swapFee                               \\\\      tW  /                                   //\\n    **********************************************************************************************/\\n    function calcSingleInGivenPoolOut(\\n        uint256 tokenBalanceIn,\\n        uint256 tokenWeightIn,\\n        uint256 poolSupply,\\n        uint256 totalWeight,\\n        uint256 poolAmountOut,\\n        uint256 swapFee\\n    ) public pure returns (uint256 tokenAmountIn) {\\n        uint256 normalizedWeight = bdiv(tokenWeightIn, totalWeight);\\n        uint256 newPoolSupply = badd(poolSupply, poolAmountOut);\\n        uint256 poolRatio = bdiv(newPoolSupply, poolSupply);\\n\\n        //uint newBalTi = poolRatio^(1/weightTi) * balTi;\\n        uint256 boo = bdiv(BONE, normalizedWeight);\\n        uint256 tokenInRatio = bpow(poolRatio, boo);\\n        uint256 newTokenBalanceIn = bmul(tokenInRatio, tokenBalanceIn);\\n        uint256 tokenAmountInAfterFee = bsub(newTokenBalanceIn, tokenBalanceIn);\\n        // Do reverse order of fees charged in joinswap_ExternAmountIn, this way\\n        //     ``` pAo == joinswap_ExternAmountIn(Ti, joinswap_PoolAmountOut(pAo, Ti)) ```\\n        //uint tAi = tAiAfterFee / (1 - (1-weightTi) * swapFee) ;\\n        uint256 zar = bmul(bsub(BONE, normalizedWeight), swapFee);\\n        tokenAmountIn = bdiv(tokenAmountInAfterFee, bsub(BONE, zar));\\n        return tokenAmountIn;\\n    }\\n\\n    /**********************************************************************************************\\n    // calcSingleOutGivenPoolIn                                                                  //\\n    // tAo = tokenAmountOut            /      /                                             \\\\\\\\   //\\n    // bO = tokenBalanceOut           /      // pS - (pAi * (1 - eF)) \\\\     /    1    \\\\      \\\\\\\\  //\\n    // pAi = poolAmountIn            | bO - || ----------------------- | ^ | --------- | * b0 || //\\n    // ps = poolSupply                \\\\      \\\\\\\\          pS           /     \\\\(wO / tW)/      //  //\\n    // wI = tokenWeightIn      tAo =   \\\\      \\\\                                             //   //\\n    // tW = totalWeight                    /     /      wO \\\\       \\\\                             //\\n    // sF = swapFee                    *  | 1 - |  1 - ---- | * sF  |                            //\\n    // eF = exitFee                        \\\\     \\\\      tW /       /                             //\\n    **********************************************************************************************/\\n    function calcSingleOutGivenPoolIn(\\n        uint256 tokenBalanceOut,\\n        uint256 tokenWeightOut,\\n        uint256 poolSupply,\\n        uint256 totalWeight,\\n        uint256 poolAmountIn,\\n        uint256 swapFee\\n    ) public pure returns (uint256 tokenAmountOut) {\\n        uint256 normalizedWeight = bdiv(tokenWeightOut, totalWeight);\\n        // charge exit fee on the pool token side\\n        // pAiAfterExitFee = pAi*(1-exitFee)\\n        uint256 poolAmountInAfterExitFee = bmul(poolAmountIn, bsub(BONE, EXIT_FEE));\\n        uint256 newPoolSupply = bsub(poolSupply, poolAmountInAfterExitFee);\\n        uint256 poolRatio = bdiv(newPoolSupply, poolSupply);\\n\\n        // newBalTo = poolRatio^(1/weightTo) * balTo;\\n        uint256 tokenOutRatio = bpow(poolRatio, bdiv(BONE, normalizedWeight));\\n        uint256 newTokenBalanceOut = bmul(tokenOutRatio, tokenBalanceOut);\\n\\n        uint256 tokenAmountOutBeforeSwapFee = bsub(tokenBalanceOut, newTokenBalanceOut);\\n\\n        // charge swap fee on the output token side\\n        //uint tAo = tAoBeforeSwapFee * (1 - (1-weightTo) * swapFee)\\n        uint256 zaz = bmul(bsub(BONE, normalizedWeight), swapFee);\\n        tokenAmountOut = bmul(tokenAmountOutBeforeSwapFee, bsub(BONE, zaz));\\n        return tokenAmountOut;\\n    }\\n\\n    /**********************************************************************************************\\n    // calcPoolInGivenSingleOut                                                                  //\\n    // pAi = poolAmountIn               // /               tAo             \\\\\\\\     / wO \\\\     \\\\   //\\n    // bO = tokenBalanceOut            // | bO - -------------------------- |\\\\   | ---- |     \\\\  //\\n    // tAo = tokenAmountOut      pS - ||   \\\\     1 - ((1 - (tO / tW)) * sF)/  | ^ \\\\ tW /  * pS | //\\n    // ps = poolSupply                 \\\\\\\\ -----------------------------------/                /  //\\n    // wO = tokenWeightOut  pAi =       \\\\\\\\               bO                 /                /   //\\n    // tW = totalWeight           -------------------------------------------------------------  //\\n    // sF = swapFee                                        ( 1 - eF )                            //\\n    // eF = exitFee                                                                              //\\n    **********************************************************************************************/\\n    function calcPoolInGivenSingleOut(\\n        uint256 tokenBalanceOut,\\n        uint256 tokenWeightOut,\\n        uint256 poolSupply,\\n        uint256 totalWeight,\\n        uint256 tokenAmountOut,\\n        uint256 swapFee\\n    ) public pure returns (uint256 poolAmountIn) {\\n        // charge swap fee on the output token side\\n        uint256 normalizedWeight = bdiv(tokenWeightOut, totalWeight);\\n        //uint tAoBeforeSwapFee = tAo / (1 - (1-weightTo) * swapFee) ;\\n        uint256 zoo = bsub(BONE, normalizedWeight);\\n        uint256 zar = bmul(zoo, swapFee);\\n        uint256 tokenAmountOutBeforeSwapFee = bdiv(tokenAmountOut, bsub(BONE, zar));\\n\\n        uint256 newTokenBalanceOut = bsub(tokenBalanceOut, tokenAmountOutBeforeSwapFee);\\n        uint256 tokenOutRatio = bdiv(newTokenBalanceOut, tokenBalanceOut);\\n\\n        //uint newPoolSupply = (ratioTo ^ weightTo) * poolSupply;\\n        uint256 poolRatio = bpow(tokenOutRatio, normalizedWeight);\\n        uint256 newPoolSupply = bmul(poolRatio, poolSupply);\\n        uint256 poolAmountInAfterExitFee = bsub(poolSupply, newPoolSupply);\\n\\n        // charge exit fee on the pool token side\\n        // pAi = pAiAfterExitFee/(1-exitFee)\\n        poolAmountIn = bdiv(poolAmountInAfterExitFee, bsub(BONE, EXIT_FEE));\\n        return poolAmountIn;\\n    }\\n}\\n\",\"keccak256\":\"0x0a19a262ccff90637f3d74538bc55cff57d1b9d484df33cca36f29fad8f37e2e\",\"license\":\"MIT\"},\"contracts/balancer/BNum.sol\":{\"content\":\"// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\nimport \\\"./BConst.sol\\\";\\n\\ncontract BNum is BConst {\\n    function btoi(uint256 a) internal pure returns (uint256) {\\n        return a / BONE;\\n    }\\n\\n    function bfloor(uint256 a) internal pure returns (uint256) {\\n        return btoi(a) * BONE;\\n    }\\n\\n    function badd(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"ERR_ADD_OVERFLOW\\\");\\n        return c;\\n    }\\n\\n    function bsub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (uint256 c, bool flag) = bsubSign(a, b);\\n        require(!flag, \\\"ERR_SUB_UNDERFLOW\\\");\\n        return c;\\n    }\\n\\n    function bsubSign(uint256 a, uint256 b) internal pure returns (uint256, bool) {\\n        if (a >= b) {\\n            return (a - b, false);\\n        } else {\\n            return (b - a, true);\\n        }\\n    }\\n\\n    function bmul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c0 = a * b;\\n        require(a == 0 || c0 / a == b, \\\"ERR_MUL_OVERFLOW\\\");\\n        uint256 c1 = c0 + (BONE / 2);\\n        require(c1 >= c0, \\\"ERR_MUL_OVERFLOW\\\");\\n        uint256 c2 = c1 / BONE;\\n        return c2;\\n    }\\n\\n    function bdiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, \\\"ERR_DIV_ZERO\\\");\\n        uint256 c0 = a * BONE;\\n        require(a == 0 || c0 / a == BONE, \\\"ERR_DIV_INTERNAL\\\"); // bmul overflow\\n        uint256 c1 = c0 + (b / 2);\\n        require(c1 >= c0, \\\"ERR_DIV_INTERNAL\\\"); //  badd require\\n        uint256 c2 = c1 / b;\\n        return c2;\\n    }\\n\\n    // DSMath.wpow\\n    function bpowi(uint256 a, uint256 n) internal pure returns (uint256) {\\n        uint256 z = n % 2 != 0 ? a : BONE;\\n\\n        for (n /= 2; n != 0; n /= 2) {\\n            a = bmul(a, a);\\n\\n            if (n % 2 != 0) {\\n                z = bmul(z, a);\\n            }\\n        }\\n        return z;\\n    }\\n\\n    // Compute b^(e.w) by splitting it into (b^e)*(b^0.w).\\n    // Use `bpowi` for `b^e` and `bpowK` for k iterations\\n    // of approximation of b^0.w\\n    function bpow(uint256 base, uint256 exp) internal pure returns (uint256) {\\n        require(base >= MIN_BPOW_BASE, \\\"ERR_BPOW_BASE_TOO_LOW\\\");\\n        require(base <= MAX_BPOW_BASE, \\\"ERR_BPOW_BASE_TOO_HIGH\\\");\\n\\n        uint256 whole = bfloor(exp);\\n        uint256 remain = bsub(exp, whole);\\n\\n        uint256 wholePow = bpowi(base, btoi(whole));\\n\\n        if (remain == 0) {\\n            return wholePow;\\n        }\\n\\n        uint256 partialResult = bpowApprox(base, remain, BPOW_PRECISION);\\n        return bmul(wholePow, partialResult);\\n    }\\n\\n    function bpowApprox(\\n        uint256 base,\\n        uint256 exp,\\n        uint256 precision\\n    ) internal pure returns (uint256) {\\n        // term 0:\\n        uint256 a = exp;\\n        (uint256 x, bool xneg) = bsubSign(base, BONE);\\n        uint256 term = BONE;\\n        uint256 sum = term;\\n        bool negative = false;\\n\\n        // term(k) = numer / denom\\n        //         = (product(a - i - 1, i=1-->k) * x^k) / (k!)\\n        // each iteration, multiply previous term by (a-(k-1)) * x / k\\n        // continue until term is less than precision\\n        for (uint256 i = 1; term >= precision; i++) {\\n            uint256 bigK = i * BONE;\\n            (uint256 c, bool cneg) = bsubSign(a, bsub(bigK, BONE));\\n            term = bmul(term, bmul(c, x));\\n            term = bdiv(term, bigK);\\n            if (term == 0) break;\\n\\n            if (xneg) negative = !negative;\\n            if (cneg) negative = !negative;\\n            if (negative) {\\n                sum = bsub(sum, term);\\n            } else {\\n                sum = badd(sum, term);\\n            }\\n        }\\n\\n        return sum;\\n    }\\n}\\n\",\"keccak256\":\"0x015e4af906575a6fff48089af01a4c683d8e9127179271f545b6e687d767d178\",\"license\":\"MIT\"},\"contracts/balancer/BPool.sol\":{\"content\":\"// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\nimport \\\"./BToken.sol\\\";\\nimport \\\"./BMath.sol\\\";\\n\\ncontract BPool is BBronze, BToken, BMath {\\n    struct Record {\\n        bool bound; // is token bound to pool\\n        uint256 index; // private\\n        uint256 denorm; // denormalized weight\\n        uint256 balance;\\n    }\\n\\n    event LOG_SWAP(\\n        address indexed caller,\\n        address indexed tokenIn,\\n        address indexed tokenOut,\\n        uint256 tokenAmountIn,\\n        uint256 tokenAmountOut\\n    );\\n\\n    event LOG_JOIN(address indexed caller, address indexed tokenIn, uint256 tokenAmountIn);\\n\\n    event LOG_EXIT(address indexed caller, address indexed tokenOut, uint256 tokenAmountOut);\\n\\n    event LOG_CALL(bytes4 indexed sig, address indexed caller, bytes data) anonymous;\\n\\n    modifier _logs_() {\\n        emit LOG_CALL(msg.sig, msg.sender, msg.data);\\n        _;\\n    }\\n\\n    modifier _lock_() {\\n        require(!_mutex, \\\"ERR_REENTRY\\\");\\n        _mutex = true;\\n        _;\\n        _mutex = false;\\n    }\\n\\n    modifier _viewlock_() {\\n        require(!_mutex, \\\"ERR_REENTRY\\\");\\n        _;\\n    }\\n\\n    bool private _mutex;\\n\\n    address private _factory; // BFactory address to push token exitFee to\\n    address private _controller; // has CONTROL role\\n    bool private _publicSwap; // true if PUBLIC can call SWAP functions\\n\\n    // `setSwapFee` and `finalize` require CONTROL\\n    // `finalize` sets `PUBLIC can SWAP`, `PUBLIC can JOIN`\\n    uint256 private _swapFee;\\n    bool private _finalized;\\n\\n    address[] private _tokens;\\n    mapping(address => Record) private _records;\\n    uint256 private _totalWeight;\\n\\n    constructor() {\\n        _controller = msg.sender;\\n        _factory = msg.sender;\\n        _swapFee = MIN_FEE;\\n        _publicSwap = false;\\n        _finalized = false;\\n    }\\n\\n    function isPublicSwap() external view returns (bool) {\\n        return _publicSwap;\\n    }\\n\\n    function isFinalized() external view returns (bool) {\\n        return _finalized;\\n    }\\n\\n    function isBound(address t) external view returns (bool) {\\n        return _records[t].bound;\\n    }\\n\\n    function getNumTokens() external view returns (uint256) {\\n        return _tokens.length;\\n    }\\n\\n    function getCurrentTokens() external view _viewlock_ returns (address[] memory tokens) {\\n        return _tokens;\\n    }\\n\\n    function getFinalTokens() external view _viewlock_ returns (address[] memory tokens) {\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\n        return _tokens;\\n    }\\n\\n    function getDenormalizedWeight(address token) external view _viewlock_ returns (uint256) {\\n        require(_records[token].bound, \\\"ERR_NOT_BOUND\\\");\\n        return _records[token].denorm;\\n    }\\n\\n    function getTotalDenormalizedWeight() external view _viewlock_ returns (uint256) {\\n        return _totalWeight;\\n    }\\n\\n    function getNormalizedWeight(address token) external view _viewlock_ returns (uint256) {\\n        require(_records[token].bound, \\\"ERR_NOT_BOUND\\\");\\n        uint256 denorm = _records[token].denorm;\\n        return bdiv(denorm, _totalWeight);\\n    }\\n\\n    function getBalance(address token) external view _viewlock_ returns (uint256) {\\n        require(_records[token].bound, \\\"ERR_NOT_BOUND\\\");\\n        return _records[token].balance;\\n    }\\n\\n    function getSwapFee() external view _viewlock_ returns (uint256) {\\n        return _swapFee;\\n    }\\n\\n    function getController() external view _viewlock_ returns (address) {\\n        return _controller;\\n    }\\n\\n    function setSwapFee(uint256 swapFee) external _logs_ _lock_ {\\n        require(!_finalized, \\\"ERR_IS_FINALIZED\\\");\\n        require(msg.sender == _controller, \\\"ERR_NOT_CONTROLLER\\\");\\n        require(swapFee >= MIN_FEE, \\\"ERR_MIN_FEE\\\");\\n        require(swapFee <= MAX_FEE, \\\"ERR_MAX_FEE\\\");\\n        _swapFee = swapFee;\\n    }\\n\\n    function setController(address manager) external _logs_ _lock_ {\\n        require(msg.sender == _controller, \\\"ERR_NOT_CONTROLLER\\\");\\n        _controller = manager;\\n    }\\n\\n    function setPublicSwap(bool public_) external _logs_ _lock_ {\\n        require(!_finalized, \\\"ERR_IS_FINALIZED\\\");\\n        require(msg.sender == _controller, \\\"ERR_NOT_CONTROLLER\\\");\\n        _publicSwap = public_;\\n    }\\n\\n    function finalize() external _logs_ _lock_ {\\n        require(msg.sender == _controller, \\\"ERR_NOT_CONTROLLER\\\");\\n        require(!_finalized, \\\"ERR_IS_FINALIZED\\\");\\n        require(_tokens.length >= MIN_BOUND_TOKENS, \\\"ERR_MIN_TOKENS\\\");\\n\\n        _finalized = true;\\n        _publicSwap = true;\\n\\n        _mintPoolShare(INIT_POOL_SUPPLY);\\n        _pushPoolShare(msg.sender, INIT_POOL_SUPPLY);\\n    }\\n\\n    function bind(\\n        address token,\\n        uint256 balance,\\n        uint256 denorm\\n    )\\n        external\\n        _logs_ // _lock_  Bind does not lock because it jumps to `rebind`, which does\\n    {\\n        require(msg.sender == _controller, \\\"ERR_NOT_CONTROLLER\\\");\\n        require(!_records[token].bound, \\\"ERR_IS_BOUND\\\");\\n        require(!_finalized, \\\"ERR_IS_FINALIZED\\\");\\n\\n        require(_tokens.length < MAX_BOUND_TOKENS, \\\"ERR_MAX_TOKENS\\\");\\n\\n        _records[token] = Record({\\n            bound: true,\\n            index: _tokens.length,\\n            denorm: 0, // balance and denorm will be validated\\n            balance: 0 // and set by `rebind`\\n        });\\n        _tokens.push(token);\\n        rebind(token, balance, denorm);\\n    }\\n\\n    function rebind(\\n        address token,\\n        uint256 balance,\\n        uint256 denorm\\n    ) public _logs_ _lock_ {\\n        require(msg.sender == _controller, \\\"ERR_NOT_CONTROLLER\\\");\\n        require(_records[token].bound, \\\"ERR_NOT_BOUND\\\");\\n        require(!_finalized, \\\"ERR_IS_FINALIZED\\\");\\n\\n        require(denorm >= MIN_WEIGHT, \\\"ERR_MIN_WEIGHT\\\");\\n        require(denorm <= MAX_WEIGHT, \\\"ERR_MAX_WEIGHT\\\");\\n        require(balance >= MIN_BALANCE, \\\"ERR_MIN_BALANCE\\\");\\n\\n        // Adjust the denorm and totalWeight\\n        uint256 oldWeight = _records[token].denorm;\\n        if (denorm > oldWeight) {\\n            _totalWeight = badd(_totalWeight, bsub(denorm, oldWeight));\\n            require(_totalWeight <= MAX_TOTAL_WEIGHT, \\\"ERR_MAX_TOTAL_WEIGHT\\\");\\n        } else if (denorm < oldWeight) {\\n            _totalWeight = bsub(_totalWeight, bsub(oldWeight, denorm));\\n        }\\n        _records[token].denorm = denorm;\\n\\n        // Adjust the balance record and actual token balance\\n        uint256 oldBalance = _records[token].balance;\\n        _records[token].balance = balance;\\n        if (balance > oldBalance) {\\n            _pullUnderlying(token, msg.sender, bsub(balance, oldBalance));\\n        } else if (balance < oldBalance) {\\n            // In this case liquidity is being withdrawn, so charge EXIT_FEE\\n            uint256 tokenBalanceWithdrawn = bsub(oldBalance, balance);\\n            uint256 tokenExitFee = bmul(tokenBalanceWithdrawn, EXIT_FEE);\\n            _pushUnderlying(token, msg.sender, bsub(tokenBalanceWithdrawn, tokenExitFee));\\n            _pushUnderlying(token, _factory, tokenExitFee);\\n        }\\n    }\\n\\n    function unbind(address token) external _logs_ _lock_ {\\n        require(msg.sender == _controller, \\\"ERR_NOT_CONTROLLER\\\");\\n        require(_records[token].bound, \\\"ERR_NOT_BOUND\\\");\\n        require(!_finalized, \\\"ERR_IS_FINALIZED\\\");\\n\\n        uint256 tokenBalance = _records[token].balance;\\n        uint256 tokenExitFee = bmul(tokenBalance, EXIT_FEE);\\n\\n        _totalWeight = bsub(_totalWeight, _records[token].denorm);\\n\\n        // Swap the token-to-unbind with the last token,\\n        // then delete the last token\\n        uint256 index = _records[token].index;\\n        uint256 last = _tokens.length - 1;\\n        _tokens[index] = _tokens[last];\\n        _records[_tokens[index]].index = index;\\n        _tokens.pop();\\n        _records[token] = Record({bound: false, index: 0, denorm: 0, balance: 0});\\n\\n        _pushUnderlying(token, msg.sender, bsub(tokenBalance, tokenExitFee));\\n        _pushUnderlying(token, _factory, tokenExitFee);\\n    }\\n\\n    // Absorb any tokens that have been sent to this contract into the pool\\n    function gulp(address token) external _logs_ _lock_ {\\n        require(_records[token].bound, \\\"ERR_NOT_BOUND\\\");\\n        _records[token].balance = IERC20Balancer(token).balanceOf(address(this));\\n    }\\n\\n    function getSpotPrice(address tokenIn, address tokenOut) external view _viewlock_ returns (uint256 spotPrice) {\\n        require(_records[tokenIn].bound, \\\"ERR_NOT_BOUND\\\");\\n        require(_records[tokenOut].bound, \\\"ERR_NOT_BOUND\\\");\\n        Record storage inRecord = _records[tokenIn];\\n        Record storage outRecord = _records[tokenOut];\\n        return calcSpotPrice(inRecord.balance, inRecord.denorm, outRecord.balance, outRecord.denorm, _swapFee);\\n    }\\n\\n    function getSpotPriceSansFee(address tokenIn, address tokenOut)\\n        external\\n        view\\n        _viewlock_\\n        returns (uint256 spotPrice)\\n    {\\n        require(_records[tokenIn].bound, \\\"ERR_NOT_BOUND\\\");\\n        require(_records[tokenOut].bound, \\\"ERR_NOT_BOUND\\\");\\n        Record storage inRecord = _records[tokenIn];\\n        Record storage outRecord = _records[tokenOut];\\n        return calcSpotPrice(inRecord.balance, inRecord.denorm, outRecord.balance, outRecord.denorm, 0);\\n    }\\n\\n    function joinPool(uint256 poolAmountOut, uint256[] calldata maxAmountsIn) external _logs_ _lock_ {\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\n\\n        uint256 poolTotal = totalSupply();\\n        uint256 ratio = bdiv(poolAmountOut, poolTotal);\\n        require(ratio != 0, \\\"ERR_MATH_APPROX\\\");\\n\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            address t = _tokens[i];\\n            uint256 bal = _records[t].balance;\\n            uint256 tokenAmountIn = bmul(ratio, bal);\\n            require(tokenAmountIn != 0, \\\"ERR_MATH_APPROX\\\");\\n            require(tokenAmountIn <= maxAmountsIn[i], \\\"ERR_LIMIT_IN\\\");\\n            _records[t].balance = badd(_records[t].balance, tokenAmountIn);\\n            emit LOG_JOIN(msg.sender, t, tokenAmountIn);\\n            _pullUnderlying(t, msg.sender, tokenAmountIn);\\n        }\\n        _mintPoolShare(poolAmountOut);\\n        _pushPoolShare(msg.sender, poolAmountOut);\\n    }\\n\\n    function exitPool(uint256 poolAmountIn, uint256[] calldata minAmountsOut) external _logs_ _lock_ {\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\n\\n        uint256 poolTotal = totalSupply();\\n        uint256 exitFee = bmul(poolAmountIn, EXIT_FEE);\\n        uint256 pAiAfterExitFee = bsub(poolAmountIn, exitFee);\\n        uint256 ratio = bdiv(pAiAfterExitFee, poolTotal);\\n        require(ratio != 0, \\\"ERR_MATH_APPROX\\\");\\n\\n        _pullPoolShare(msg.sender, poolAmountIn);\\n        _pushPoolShare(_factory, exitFee);\\n        _burnPoolShare(pAiAfterExitFee);\\n\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            address t = _tokens[i];\\n            uint256 bal = _records[t].balance;\\n            uint256 tokenAmountOut = bmul(ratio, bal);\\n            require(tokenAmountOut != 0, \\\"ERR_MATH_APPROX\\\");\\n            require(tokenAmountOut >= minAmountsOut[i], \\\"ERR_LIMIT_OUT\\\");\\n            _records[t].balance = bsub(_records[t].balance, tokenAmountOut);\\n            emit LOG_EXIT(msg.sender, t, tokenAmountOut);\\n            _pushUnderlying(t, msg.sender, tokenAmountOut);\\n        }\\n    }\\n\\n    function calcExitPool(uint256 poolAmountIn, uint256[] calldata minAmountsOut)\\n        external\\n        view\\n        returns (uint256[] memory)\\n    {\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\n\\n        uint256 poolTotal = totalSupply();\\n        uint256 exitFee = bmul(poolAmountIn, EXIT_FEE);\\n        uint256 pAiAfterExitFee = bsub(poolAmountIn, exitFee);\\n        uint256 ratio = bdiv(pAiAfterExitFee, poolTotal);\\n\\n        uint256[] memory _amounts = new uint256[](_tokens.length * 2);\\n\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            address t = _tokens[i];\\n            uint256 bal = _records[t].balance;\\n\\n            _amounts[i] = bmul(ratio, bal);\\n            _amounts[_tokens.length + i] = minAmountsOut[i];\\n            require(_amounts[i] >= minAmountsOut[i], \\\"ERR_LIMIT_OUT\\\");\\n        }\\n\\n        return _amounts;\\n    }\\n\\n    function swapExactAmountIn(\\n        address tokenIn,\\n        uint256 tokenAmountIn,\\n        address tokenOut,\\n        uint256 minAmountOut,\\n        uint256 maxPrice\\n    ) external _logs_ _lock_ returns (uint256 tokenAmountOut, uint256 spotPriceAfter) {\\n        require(_records[tokenIn].bound, \\\"ERR_NOT_BOUND\\\");\\n        require(_records[tokenOut].bound, \\\"ERR_NOT_BOUND\\\");\\n        require(_publicSwap, \\\"ERR_SWAP_NOT_PUBLIC\\\");\\n\\n        Record storage inRecord = _records[address(tokenIn)];\\n        Record storage outRecord = _records[address(tokenOut)];\\n\\n        require(tokenAmountIn <= bmul(inRecord.balance, MAX_IN_RATIO), \\\"ERR_MAX_IN_RATIO\\\");\\n\\n        uint256 spotPriceBefore =\\n            calcSpotPrice(inRecord.balance, inRecord.denorm, outRecord.balance, outRecord.denorm, _swapFee);\\n        require(spotPriceBefore <= maxPrice, \\\"ERR_BAD_LIMIT_PRICE\\\");\\n\\n        tokenAmountOut = calcOutGivenIn(\\n            inRecord.balance,\\n            inRecord.denorm,\\n            outRecord.balance,\\n            outRecord.denorm,\\n            tokenAmountIn,\\n            _swapFee\\n        );\\n        require(tokenAmountOut >= minAmountOut, \\\"ERR_LIMIT_OUT\\\");\\n\\n        inRecord.balance = badd(inRecord.balance, tokenAmountIn);\\n        outRecord.balance = bsub(outRecord.balance, tokenAmountOut);\\n\\n        spotPriceAfter = calcSpotPrice(\\n            inRecord.balance,\\n            inRecord.denorm,\\n            outRecord.balance,\\n            outRecord.denorm,\\n            _swapFee\\n        );\\n        require(spotPriceAfter >= spotPriceBefore, \\\"ERR_MATH_APPROX\\\");\\n        require(spotPriceAfter <= maxPrice, \\\"ERR_LIMIT_PRICE\\\");\\n        require(spotPriceBefore <= bdiv(tokenAmountIn, tokenAmountOut), \\\"ERR_MATH_APPROX\\\");\\n\\n        emit LOG_SWAP(msg.sender, tokenIn, tokenOut, tokenAmountIn, tokenAmountOut);\\n\\n        _pullUnderlying(tokenIn, msg.sender, tokenAmountIn);\\n        _pushUnderlying(tokenOut, msg.sender, tokenAmountOut);\\n\\n        return (tokenAmountOut, spotPriceAfter);\\n    }\\n\\n    function swapExactAmountOut(\\n        address tokenIn,\\n        uint256 maxAmountIn,\\n        address tokenOut,\\n        uint256 tokenAmountOut,\\n        uint256 maxPrice\\n    ) external _logs_ _lock_ returns (uint256 tokenAmountIn, uint256 spotPriceAfter) {\\n        require(_records[tokenIn].bound, \\\"ERR_NOT_BOUND\\\");\\n        require(_records[tokenOut].bound, \\\"ERR_NOT_BOUND\\\");\\n        require(_publicSwap, \\\"ERR_SWAP_NOT_PUBLIC\\\");\\n\\n        Record storage inRecord = _records[address(tokenIn)];\\n        Record storage outRecord = _records[address(tokenOut)];\\n\\n        require(tokenAmountOut <= bmul(outRecord.balance, MAX_OUT_RATIO), \\\"ERR_MAX_OUT_RATIO\\\");\\n\\n        uint256 spotPriceBefore =\\n            calcSpotPrice(inRecord.balance, inRecord.denorm, outRecord.balance, outRecord.denorm, _swapFee);\\n        require(spotPriceBefore <= maxPrice, \\\"ERR_BAD_LIMIT_PRICE\\\");\\n\\n        tokenAmountIn = calcInGivenOut(\\n            inRecord.balance,\\n            inRecord.denorm,\\n            outRecord.balance,\\n            outRecord.denorm,\\n            tokenAmountOut,\\n            _swapFee\\n        );\\n        require(tokenAmountIn <= maxAmountIn, \\\"ERR_LIMIT_IN\\\");\\n\\n        inRecord.balance = badd(inRecord.balance, tokenAmountIn);\\n        outRecord.balance = bsub(outRecord.balance, tokenAmountOut);\\n\\n        spotPriceAfter = calcSpotPrice(\\n            inRecord.balance,\\n            inRecord.denorm,\\n            outRecord.balance,\\n            outRecord.denorm,\\n            _swapFee\\n        );\\n        require(spotPriceAfter >= spotPriceBefore, \\\"ERR_MATH_APPROX\\\");\\n        require(spotPriceAfter <= maxPrice, \\\"ERR_LIMIT_PRICE\\\");\\n        require(spotPriceBefore <= bdiv(tokenAmountIn, tokenAmountOut), \\\"ERR_MATH_APPROX\\\");\\n\\n        emit LOG_SWAP(msg.sender, tokenIn, tokenOut, tokenAmountIn, tokenAmountOut);\\n\\n        _pullUnderlying(tokenIn, msg.sender, tokenAmountIn);\\n        _pushUnderlying(tokenOut, msg.sender, tokenAmountOut);\\n\\n        return (tokenAmountIn, spotPriceAfter);\\n    }\\n\\n    function joinswapExternAmountIn(\\n        address tokenIn,\\n        uint256 tokenAmountIn,\\n        uint256 minPoolAmountOut\\n    ) external _logs_ _lock_ returns (uint256 poolAmountOut) {\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\n        require(_records[tokenIn].bound, \\\"ERR_NOT_BOUND\\\");\\n        require(tokenAmountIn <= bmul(_records[tokenIn].balance, MAX_IN_RATIO), \\\"ERR_MAX_IN_RATIO\\\");\\n\\n        Record storage inRecord = _records[tokenIn];\\n\\n        poolAmountOut = calcPoolOutGivenSingleIn(\\n            inRecord.balance,\\n            inRecord.denorm,\\n            _totalSupply,\\n            _totalWeight,\\n            tokenAmountIn,\\n            _swapFee\\n        );\\n\\n        require(poolAmountOut >= minPoolAmountOut, \\\"ERR_LIMIT_OUT\\\");\\n\\n        inRecord.balance = badd(inRecord.balance, tokenAmountIn);\\n\\n        emit LOG_JOIN(msg.sender, tokenIn, tokenAmountIn);\\n\\n        _mintPoolShare(poolAmountOut);\\n        _pushPoolShare(msg.sender, poolAmountOut);\\n        _pullUnderlying(tokenIn, msg.sender, tokenAmountIn);\\n\\n        return poolAmountOut;\\n    }\\n\\n    function joinswapPoolAmountOut(\\n        address tokenIn,\\n        uint256 poolAmountOut,\\n        uint256 maxAmountIn\\n    ) external _logs_ _lock_ returns (uint256 tokenAmountIn) {\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\n        require(_records[tokenIn].bound, \\\"ERR_NOT_BOUND\\\");\\n\\n        Record storage inRecord = _records[tokenIn];\\n\\n        tokenAmountIn = calcSingleInGivenPoolOut(\\n            inRecord.balance,\\n            inRecord.denorm,\\n            _totalSupply,\\n            _totalWeight,\\n            poolAmountOut,\\n            _swapFee\\n        );\\n\\n        require(tokenAmountIn != 0, \\\"ERR_MATH_APPROX\\\");\\n        require(tokenAmountIn <= maxAmountIn, \\\"ERR_LIMIT_IN\\\");\\n\\n        require(tokenAmountIn <= bmul(_records[tokenIn].balance, MAX_IN_RATIO), \\\"ERR_MAX_IN_RATIO\\\");\\n\\n        inRecord.balance = badd(inRecord.balance, tokenAmountIn);\\n\\n        emit LOG_JOIN(msg.sender, tokenIn, tokenAmountIn);\\n\\n        _mintPoolShare(poolAmountOut);\\n        _pushPoolShare(msg.sender, poolAmountOut);\\n        _pullUnderlying(tokenIn, msg.sender, tokenAmountIn);\\n\\n        return tokenAmountIn;\\n    }\\n\\n    function exitswapPoolAmountIn(\\n        address tokenOut,\\n        uint256 poolAmountIn,\\n        uint256 minAmountOut\\n    ) external _logs_ _lock_ returns (uint256 tokenAmountOut) {\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\n        require(_records[tokenOut].bound, \\\"ERR_NOT_BOUND\\\");\\n\\n        Record storage outRecord = _records[tokenOut];\\n\\n        tokenAmountOut = calcSingleOutGivenPoolIn(\\n            outRecord.balance,\\n            outRecord.denorm,\\n            _totalSupply,\\n            _totalWeight,\\n            poolAmountIn,\\n            _swapFee\\n        );\\n\\n        require(tokenAmountOut >= minAmountOut, \\\"ERR_LIMIT_OUT\\\");\\n\\n        require(tokenAmountOut <= bmul(_records[tokenOut].balance, MAX_OUT_RATIO), \\\"ERR_MAX_OUT_RATIO\\\");\\n\\n        outRecord.balance = bsub(outRecord.balance, tokenAmountOut);\\n\\n        uint256 exitFee = bmul(poolAmountIn, EXIT_FEE);\\n\\n        emit LOG_EXIT(msg.sender, tokenOut, tokenAmountOut);\\n\\n        _pullPoolShare(msg.sender, poolAmountIn);\\n        _burnPoolShare(bsub(poolAmountIn, exitFee));\\n        _pushPoolShare(_factory, exitFee);\\n        _pushUnderlying(tokenOut, msg.sender, tokenAmountOut);\\n\\n        return tokenAmountOut;\\n    }\\n\\n    function exitswapExternAmountOut(\\n        address tokenOut,\\n        uint256 tokenAmountOut,\\n        uint256 maxPoolAmountIn\\n    ) external _logs_ _lock_ returns (uint256 poolAmountIn) {\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\n        require(_records[tokenOut].bound, \\\"ERR_NOT_BOUND\\\");\\n        require(tokenAmountOut <= bmul(_records[tokenOut].balance, MAX_OUT_RATIO), \\\"ERR_MAX_OUT_RATIO\\\");\\n\\n        Record storage outRecord = _records[tokenOut];\\n\\n        poolAmountIn = calcPoolInGivenSingleOut(\\n            outRecord.balance,\\n            outRecord.denorm,\\n            _totalSupply,\\n            _totalWeight,\\n            tokenAmountOut,\\n            _swapFee\\n        );\\n\\n        require(poolAmountIn != 0, \\\"ERR_MATH_APPROX\\\");\\n        require(poolAmountIn <= maxPoolAmountIn, \\\"ERR_LIMIT_IN\\\");\\n\\n        outRecord.balance = bsub(outRecord.balance, tokenAmountOut);\\n\\n        uint256 exitFee = bmul(poolAmountIn, EXIT_FEE);\\n\\n        emit LOG_EXIT(msg.sender, tokenOut, tokenAmountOut);\\n\\n        _pullPoolShare(msg.sender, poolAmountIn);\\n        _burnPoolShare(bsub(poolAmountIn, exitFee));\\n        _pushPoolShare(_factory, exitFee);\\n        _pushUnderlying(tokenOut, msg.sender, tokenAmountOut);\\n\\n        return poolAmountIn;\\n    }\\n\\n    // ==\\n    // 'Underlying' token-manipulation functions make external calls but are NOT locked\\n    // You must `_lock_` or otherwise ensure reentry-safety\\n\\n    function _pullUnderlying(\\n        address erc20,\\n        address from,\\n        uint256 amount\\n    ) internal {\\n        bool xfer = IERC20Balancer(erc20).transferFrom(from, address(this), amount);\\n        require(xfer, \\\"ERR_ERC20_FALSE\\\");\\n    }\\n\\n    function _pushUnderlying(\\n        address erc20,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool xfer = IERC20Balancer(erc20).transfer(to, amount);\\n        require(xfer, \\\"ERR_ERC20_FALSE\\\");\\n    }\\n\\n    function _pullPoolShare(address from, uint256 amount) internal {\\n        _pull(from, amount);\\n    }\\n\\n    function _pushPoolShare(address to, uint256 amount) internal {\\n        _push(to, amount);\\n    }\\n\\n    function _mintPoolShare(uint256 amount) internal {\\n        _mint(amount);\\n    }\\n\\n    function _burnPoolShare(uint256 amount) internal {\\n        _burn(amount);\\n    }\\n}\\n\",\"keccak256\":\"0x776103e689b42b4ab375106ed1183fd14fc7b842ff4eaff52de716cdb1689d92\",\"license\":\"MIT\"},\"contracts/balancer/BToken.sol\":{\"content\":\"// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\nimport \\\"./BNum.sol\\\";\\n\\ninterface IERC20Balancer {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address whom) external view returns (uint256);\\n\\n    function allowance(address src, address dst) external view returns (uint256);\\n\\n    function approve(address dst, uint256 amt) external returns (bool);\\n\\n    function transfer(address dst, uint256 amt) external returns (bool);\\n\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 amt\\n    ) external returns (bool);\\n}\\n\\ncontract BTokenBase is BNum {\\n    mapping(address => uint256) internal _balance;\\n    mapping(address => mapping(address => uint256)) internal _allowance;\\n    uint256 internal _totalSupply;\\n\\n    event Approval(address indexed src, address indexed dst, uint256 amt);\\n    event Transfer(address indexed src, address indexed dst, uint256 amt);\\n\\n    function _mint(uint256 amt) internal {\\n        _balance[address(this)] = badd(_balance[address(this)], amt);\\n        _totalSupply = badd(_totalSupply, amt);\\n        emit Transfer(address(0), address(this), amt);\\n    }\\n\\n    function _burn(uint256 amt) internal {\\n        require(_balance[address(this)] >= amt, \\\"ERR_INSUFFICIENT_BAL\\\");\\n        _balance[address(this)] = bsub(_balance[address(this)], amt);\\n        _totalSupply = bsub(_totalSupply, amt);\\n        emit Transfer(address(this), address(0), amt);\\n    }\\n\\n    function _move(\\n        address src,\\n        address dst,\\n        uint256 amt\\n    ) internal {\\n        require(_balance[src] >= amt, \\\"ERR_INSUFFICIENT_BAL\\\");\\n        _balance[src] = bsub(_balance[src], amt);\\n        _balance[dst] = badd(_balance[dst], amt);\\n        emit Transfer(src, dst, amt);\\n    }\\n\\n    function _push(address to, uint256 amt) internal {\\n        _move(address(this), to, amt);\\n    }\\n\\n    function _pull(address from, uint256 amt) internal {\\n        _move(from, address(this), amt);\\n    }\\n}\\n\\ncontract BToken is BTokenBase, IERC20Balancer {\\n    string private _name = \\\"Balancer Pool Token\\\";\\n    string private _symbol = \\\"BPT\\\";\\n    uint8 private _decimals = 18;\\n\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    function allowance(address src, address dst) external view override returns (uint256) {\\n        return _allowance[src][dst];\\n    }\\n\\n    function balanceOf(address whom) external view override returns (uint256) {\\n        return _balance[whom];\\n    }\\n\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function approve(address dst, uint256 amt) external override returns (bool) {\\n        _allowance[msg.sender][dst] = amt;\\n        emit Approval(msg.sender, dst, amt);\\n        return true;\\n    }\\n\\n    function increaseApproval(address dst, uint256 amt) external returns (bool) {\\n        _allowance[msg.sender][dst] = badd(_allowance[msg.sender][dst], amt);\\n        emit Approval(msg.sender, dst, _allowance[msg.sender][dst]);\\n        return true;\\n    }\\n\\n    function decreaseApproval(address dst, uint256 amt) external returns (bool) {\\n        uint256 oldValue = _allowance[msg.sender][dst];\\n        if (amt > oldValue) {\\n            _allowance[msg.sender][dst] = 0;\\n        } else {\\n            _allowance[msg.sender][dst] = bsub(oldValue, amt);\\n        }\\n        emit Approval(msg.sender, dst, _allowance[msg.sender][dst]);\\n        return true;\\n    }\\n\\n    function transfer(address dst, uint256 amt) external override returns (bool) {\\n        _move(msg.sender, dst, amt);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 amt\\n    ) external override returns (bool) {\\n        require(msg.sender == src || amt <= _allowance[src][msg.sender], \\\"ERR_BTOKEN_BAD_CALLER\\\");\\n        _move(src, dst, amt);\\n        if (msg.sender != src && _allowance[src][msg.sender] != uint256(-1)) {\\n            _allowance[src][msg.sender] = bsub(_allowance[src][msg.sender], amt);\\n            emit Approval(msg.sender, dst, _allowance[src][msg.sender]);\\n        }\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x96a133234ad4896507bb420719cd57c33b17499c87558016adc9fc1b30d78eca\",\"license\":\"MIT\"},\"contracts/libraries/IERC20Full.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IERC20Full is IERC20 {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x228083482ab7326cdb12ae8cb7dcd8d3b805651e35c08c29a7b0a54e0e97fbb0\",\"license\":\"MIT\"},\"contracts/libraries/IOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\ninterface IOwnable {\\n    function getOwner() external view returns (address);\\n\\n    function transferOwnership(address _newOwner) external returns (bool);\\n}\\n\",\"keccak256\":\"0xace52430f7fd5468e14cb5a8f91f66daa9518d8393b257a3d01c5899d4828000\",\"license\":\"MIT\"},\"contracts/libraries/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\nimport \\\"./IOwnable.sol\\\";\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\\"user permissions\\\".\\n */\\nabstract contract Ownable is IOwnable {\\n    address internal owner;\\n\\n    /**\\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n     * account.\\n     */\\n    constructor() {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    function getOwner() public view override returns (address) {\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n     * @param _newOwner The address to transfer ownership to.\\n     */\\n    function transferOwnership(address _newOwner) public override onlyOwner returns (bool) {\\n        require(_newOwner != address(0));\\n        onTransferOwnership(owner, _newOwner);\\n        owner = _newOwner;\\n        return true;\\n    }\\n\\n    // Subclasses of this token may want to send additional logs through the centralized Augur log emitter contract\\n    function onTransferOwnership(address, address) internal virtual;\\n}\\n\",\"keccak256\":\"0x65f237e09612478773b06aa74b21364f4ae25b6c419793be79ab9aa0258e57ef\",\"license\":\"MIT\"},\"contracts/libraries/SafeMathInt256.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\n/**\\n * @title SafeMathInt256\\n * @dev Int256 math operations with safety checks that throw on error\\n */\\nlibrary SafeMathInt256 {\\n    // Signed ints with n bits can range from -2**(n-1) to (2**(n-1) - 1)\\n    int256 private constant INT256_MIN = -2**(255);\\n    int256 private constant INT256_MAX = (2**(255) - 1);\\n\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a * b;\\n        require(a == 0 || c / a == b);\\n        return c;\\n    }\\n\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        // No need to check for dividing by 0 -- Solidity automatically throws on division by 0\\n        int256 c = a / b;\\n        return c;\\n    }\\n\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        require(((a >= 0) && (b >= a - INT256_MAX)) || ((a < 0) && (b <= a - INT256_MIN)));\\n        return a - b;\\n    }\\n\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        require(((a >= 0) && (b <= INT256_MAX - a)) || ((a < 0) && (b >= INT256_MIN - a)));\\n        return a + b;\\n    }\\n\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        if (a <= b) {\\n            return a;\\n        } else {\\n            return b;\\n        }\\n    }\\n\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        if (a >= b) {\\n            return a;\\n        } else {\\n            return b;\\n        }\\n    }\\n\\n    function abs(int256 a) internal pure returns (int256) {\\n        if (a < 0) {\\n            return -a;\\n        }\\n        return a;\\n    }\\n\\n    function getInt256Min() internal pure returns (int256) {\\n        return INT256_MIN;\\n    }\\n\\n    function getInt256Max() internal pure returns (int256) {\\n        return INT256_MAX;\\n    }\\n\\n    // Float [fixed point] Operations\\n    function fxpMul(\\n        int256 a,\\n        int256 b,\\n        int256 base\\n    ) internal pure returns (int256) {\\n        return div(mul(a, b), base);\\n    }\\n\\n    function fxpDiv(\\n        int256 a,\\n        int256 b,\\n        int256 base\\n    ) internal pure returns (int256) {\\n        return div(mul(a, base), b);\\n    }\\n\\n    function sqrt(int256 y) internal pure returns (int256 z) {\\n        if (y > 3) {\\n            int256 x = (y + 1) / 2;\\n            z = y;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x714309025fa79f257ce215aca9bd5bd2b4c1cc5b4e14579fb815da218f8350a5\",\"license\":\"MIT\"},\"contracts/libraries/SafeMathUint256.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\n/**\\n * @title SafeMathUint256\\n * @dev Uint256 math operations with safety checks that throw on error\\n */\\nlibrary SafeMathUint256 {\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b);\\n\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a);\\n        return a - b;\\n    }\\n\\n    function subS(\\n        uint256 a,\\n        uint256 b,\\n        string memory message\\n    ) internal pure returns (uint256) {\\n        require(b <= a, message);\\n        return a - b;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a);\\n        return c;\\n    }\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a <= b) {\\n            return a;\\n        } else {\\n            return b;\\n        }\\n    }\\n\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a >= b) {\\n            return a;\\n        } else {\\n            return b;\\n        }\\n    }\\n\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        if (y > 3) {\\n            uint256 x = (y + 1) / 2;\\n            z = y;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n\\n    function getUint256Min() internal pure returns (uint256) {\\n        return 0;\\n    }\\n\\n    function getUint256Max() internal pure returns (uint256) {\\n        // 2 ** 256 - 1\\n        return 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\\n    }\\n\\n    function isMultipleOf(uint256 a, uint256 b) internal pure returns (bool) {\\n        return a % b == 0;\\n    }\\n\\n    // Float [fixed point] Operations\\n    function fxpMul(\\n        uint256 a,\\n        uint256 b,\\n        uint256 base\\n    ) internal pure returns (uint256) {\\n        return div(mul(a, b), base);\\n    }\\n\\n    function fxpDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 base\\n    ) internal pure returns (uint256) {\\n        return div(mul(a, base), b);\\n    }\\n}\\n\",\"keccak256\":\"0x96f8c0fa44dfb1d34495acebab8f6385d50a34132bd28b02a6589a976f869a87\",\"license\":\"MIT\"},\"contracts/libraries/various.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"./SafeMathUint256.sol\\\";\\nimport \\\"./SafeMathInt256.sol\\\";\\nimport \\\"./IERC20Full.sol\\\";\\n\\nimport \\\"../balancer/BPool.sol\\\";\\nimport \\\"../turbo/AbstractMarketFactoryV3.sol\\\";\\n\\nabstract contract Linked is AbstractMarketFactoryV3 {\\n    event LinkNodeChanged(address newLinkNode);\\n\\n    address public linkNode;\\n\\n    constructor(address _linkNode) {\\n        linkNode = _linkNode;\\n    }\\n\\n    function setLinkNode(address _newLinkNode) external onlyOwner {\\n        linkNode = _newLinkNode;\\n        emit LinkNodeChanged(_newLinkNode);\\n    }\\n\\n    modifier onlyLinkNode() {\\n        require(msg.sender == linkNode);\\n        _;\\n    }\\n}\\n\\nabstract contract Linear {\\n    function build1Line() internal pure returns (int256[] memory _lines) {\\n        _lines = new int256[](1);\\n    }\\n\\n    function build3Lines(int256 _homeSpread, int256 _totalScore) internal pure returns (int256[] memory _lines) {\\n        _lines = new int256[](3);\\n        // 0 is the Head-to-Head market, which has no lines\\n        _lines[1] = addHalfPoint(_homeSpread);\\n        _lines[2] = addHalfPoint(_totalScore);\\n    }\\n\\n    function addHalfPoint(int256 _line) private pure returns (int256) {\\n        // The line is a quantity of tenths. So 55 is 5.5 and -6 is -60.\\n        // If the line is a whole number then make it a half point more extreme, to eliminate ties.\\n        // So 50 becomes 55, -60 becomes -65, and 0 becomes 5.\\n        if (_line >= 0 && _line % 10 == 0) {\\n            return _line + 5;\\n        } else if (_line < 0 && (-_line) % 10 == 0) {\\n            return _line - 5;\\n        } else {\\n            return _line;\\n        }\\n    }\\n}\\n\\nabstract contract Eventual is AbstractMarketFactoryV3, Linear {\\n    event SportsEventCreated(\\n        uint256 id,\\n        uint256[] markets,\\n        int256[] lines,\\n        uint256 homeTeamId,\\n        uint256 awayTeamId,\\n        string homeTeamName,\\n        string awayTeamName,\\n        uint256 estimatedStartTime\\n    );\\n\\n    enum SportsEventStatus {Unknown, Scheduled, Final, Postponed, Canceled}\\n    struct SportsEvent {\\n        SportsEventStatus status;\\n        uint256[] markets;\\n        int256[] lines;\\n        uint256 estimatedStartTime;\\n        uint256 homeTeamId;\\n        uint256 awayTeamId;\\n        string homeTeamName;\\n        string awayTeamName;\\n        uint256 homeScore;\\n        uint256 awayScore;\\n    }\\n    // EventId => EventDetails\\n    mapping(uint256 => SportsEvent) public sportsEvents;\\n    uint256[] public listOfSportsEvents;\\n\\n    uint256 constant NoContest = 0;\\n\\n    function eventCount() public view returns (uint256) {\\n        return listOfSportsEvents.length;\\n    }\\n\\n    function getSportsEvent(uint256 _eventId) public view returns (SportsEvent memory) {\\n        return sportsEvents[_eventId];\\n    }\\n\\n    function getSportsEventByIndex(uint256 _index) public view returns (SportsEvent memory _event, uint256 _eventId) {\\n        _eventId = listOfSportsEvents[_index];\\n        _event = getSportsEvent(_eventId);\\n    }\\n\\n    function makeSportsEvent(\\n        uint256 _eventId,\\n        uint256[] memory _markets,\\n        int256[] memory _lines,\\n        uint256 _estimatedStartTime,\\n        uint256 _homeTeamId,\\n        uint256 _awayTeamId,\\n        string memory _homeTeamName,\\n        string memory _awayTeamName\\n    ) internal {\\n        listOfSportsEvents.push(_eventId);\\n        sportsEvents[_eventId].status = SportsEventStatus.Scheduled; // new events must be Scheduled\\n        sportsEvents[_eventId].markets = _markets;\\n        sportsEvents[_eventId].lines = _lines;\\n        sportsEvents[_eventId].estimatedStartTime = _estimatedStartTime;\\n        sportsEvents[_eventId].homeTeamId = _homeTeamId;\\n        sportsEvents[_eventId].awayTeamId = _awayTeamId;\\n        sportsEvents[_eventId].homeTeamName = _homeTeamName;\\n        sportsEvents[_eventId].awayTeamName = _awayTeamName;\\n        // homeScore and awayScore default to zero, which is correct for new events\\n\\n        emit SportsEventCreated(\\n            _eventId,\\n            _markets,\\n            _lines,\\n            _homeTeamId,\\n            _awayTeamId,\\n            _homeTeamName,\\n            _awayTeamName,\\n            _estimatedStartTime\\n        );\\n    }\\n\\n    uint256 constant WhoWonUnknown = 0;\\n    uint256 constant WhoWonHome = 1;\\n    uint256 constant WhoWonAway = 2;\\n    uint256 constant WhoWonDraw = 3;\\n\\n    function eventIsNoContest(\\n        SportsEvent memory _event,\\n        SportsEventStatus _eventStatus,\\n        uint256 _homeTeamId,\\n        uint256 _awayTeamId,\\n        uint256 _whoWon // pass in WhoWonUnknown if using a scoring sport\\n    ) internal pure returns (bool) {\\n        bool _draw = _whoWon == WhoWonDraw;\\n        bool _notFinal = _eventStatus != SportsEventStatus.Final;\\n        bool _unstableHomeTeamId = _event.homeTeamId != _homeTeamId;\\n        bool _unstableAwayTeamId = _event.awayTeamId != _awayTeamId;\\n        return _draw || _notFinal || _unstableHomeTeamId || _unstableAwayTeamId;\\n    }\\n\\n    function resolveInvalidEvent(uint256 _eventId) internal {\\n        uint256[] memory _marketIds = sportsEvents[_eventId].markets;\\n        for (uint256 i = 0; i < _marketIds.length; i++) {\\n            uint256 _marketId = _marketIds[i];\\n            if (_marketId == 0) continue; // skip non-created markets\\n            endMarket(_marketId, NoContest);\\n        }\\n    }\\n\\n    // TODO is this needed- getSportsEvent should do the same\\n    function getEventMarkets(uint256 _eventId) public view returns (uint256[] memory _markets) {\\n        uint256[] storage _original = sportsEvents[_eventId].markets;\\n        uint256 _len = _original.length;\\n        _markets = new uint256[](_len);\\n        for (uint256 i = 0; i < _len; i++) {\\n            _markets[i] = _original[i];\\n        }\\n    }\\n}\\n\\n// TODO change this to work with the Fetcher contracts and use it there, since it's offchain-read-only.\\nabstract contract EventualView is Eventual {\\n    // Only usable off-chain. Gas cost can easily eclipse block limit.\\n    // Lists all events that could be resolved with a call to resolveEvent.\\n    // Not all will be resolvable because this does not ensure the game ended.\\n    function listResolvableEvents() external view returns (uint256[] memory) {\\n        uint256 _totalResolvable = countResolvableEvents();\\n        uint256[] memory _resolvableEvents = new uint256[](_totalResolvable);\\n\\n        uint256 n = 0;\\n        for (uint256 i = 0; i < listOfSportsEvents.length; i++) {\\n            if (n > _totalResolvable) break;\\n            uint256 _eventId = listOfSportsEvents[i];\\n            if (isEventResolvable(_eventId)) {\\n                _resolvableEvents[n] = _eventId;\\n                n++;\\n            }\\n        }\\n\\n        return _resolvableEvents;\\n    }\\n\\n    function countResolvableEvents() internal view returns (uint256) {\\n        uint256 _totalResolvable = 0;\\n        for (uint256 i = 0; i < listOfSportsEvents.length; i++) {\\n            uint256 _eventId = listOfSportsEvents[i];\\n            if (isEventResolvable(_eventId)) {\\n                _totalResolvable++;\\n            }\\n        }\\n        return _totalResolvable;\\n    }\\n\\n    // Returns true if a call to resolveEvent is potentially useful.\\n    function isEventResolvable(uint256 _eventId) internal view returns (bool) {\\n        uint256[] memory _markets = getEventMarkets(_eventId);\\n\\n        bool _unresolved = false; // default because non-existing markets aren't resolvable\\n        for (uint256 i = 0; i < _markets.length; i++) {\\n            uint256 _marketId = _markets[i];\\n            if (_marketId != 0 && !isMarketResolved(_marketId)) {\\n                _unresolved = true;\\n                break;\\n            }\\n        }\\n\\n        return _unresolved;\\n    }\\n}\\n\\nabstract contract CalculateLinesToBPoolOdds {\\n    using SafeMathUint256 for uint256;\\n    using SafeMathInt256 for int256;\\n\\n    uint256 constant MAX_BPOOL_WEIGHT = 50e18;\\n\\n    function ratioOdds(uint256[] memory _proportions) internal pure returns (uint256[] memory _odds) {\\n        uint256 _total = sum(_proportions);\\n\\n        _odds = new uint256[](_proportions.length);\\n        for (uint256 i = 0; i < _proportions.length; i++) {\\n            _odds[i] = (MAX_BPOOL_WEIGHT).mul(_proportions[i]).div(_total);\\n            require(_odds[i] >= 1e18, \\\"min outcome weight is 2%\\\");\\n        }\\n    }\\n\\n    function sum(uint256[] memory _numbers) private pure returns (uint256 _sum) {\\n        for (uint256 i = 0; i < _numbers.length; i++) {\\n            _sum += _numbers[i];\\n        }\\n    }\\n\\n    function evenOdds(bool _invalid, uint256 _outcomes) internal pure returns (uint256[] memory _odds) {\\n        uint256 _size = _outcomes + (_invalid ? 1 : 0);\\n        _odds = new uint256[](_size);\\n\\n        if (_invalid) _odds[0] = 1e18; // 2%\\n\\n        uint256 _each = (_invalid ? 49e18 : 50e18) / _outcomes;\\n        for (uint256 i = _invalid ? 1 : 0; i < _size; i++) {\\n            _odds[i] = _each;\\n        }\\n    }\\n\\n    function oddsFromLines(int256 _moneyline1, int256 _moneyline2) internal pure returns (uint256[] memory _odds) {\\n        uint256 _odds1 = __calcLineToOdds(_moneyline1);\\n        uint256 _odds2 = __calcLineToOdds(_moneyline2);\\n\\n        uint256 _total = _odds1 + _odds2;\\n\\n        _odds1 = uint256(49e18).mul(_odds1).div(_total);\\n        _odds2 = uint256(49e18).mul(_odds2).div(_total);\\n\\n        // Moneyline odds are too skewed: would have under 2% odds.\\n        require(_odds1 >= 1e18);\\n        require(_odds2 >= 1e18);\\n\\n        _odds = new uint256[](3);\\n        _odds[0] = 1e18; // Invalid, 2%\\n        _odds[1] = _odds1;\\n        _odds[2] = _odds2;\\n    }\\n\\n    function __calcLineToOdds(int256 _line) internal pure returns (uint256) {\\n        if (_line < 0) {\\n            // favored\\n            uint256 _posLine = uint256(-_line);\\n            return _posLine.mul(49e18).div(_posLine.add(100)); // 49e18 * _line / (_line + 100)\\n        } else {\\n            // underdog\\n            return uint256(4900e18).div(uint256(_line).add(100)); // 49e18 * 100 / (_line + 100)\\n        }\\n    }\\n}\\n\\nabstract contract UsesScores is Eventual, Linked {\\n    function resolveEvent(\\n        uint256 _eventId,\\n        SportsEventStatus _eventStatus,\\n        uint256 _homeTeamId, // for verifying team stability\\n        uint256 _awayTeamId, // for verifying team stability\\n        uint256 _homeScore,\\n        uint256 _awayScore\\n    ) public onlyLinkNode {\\n        SportsEvent storage _event = sportsEvents[_eventId];\\n\\n        require(_event.status == SportsEventStatus.Scheduled);\\n        require(SportsEventStatus(_eventStatus) != SportsEventStatus.Scheduled);\\n\\n        if (eventIsNoContest(_event, _eventStatus, _homeTeamId, _awayTeamId, WhoWonUnknown)) {\\n            resolveInvalidEvent(_eventId);\\n        } else {\\n            resolveValidEvent(_event, _homeScore, _awayScore);\\n        }\\n\\n        sportsEvents[_eventId].status = _eventStatus;\\n    }\\n\\n    function resolveValidEvent(\\n        SportsEvent memory _event,\\n        uint256 _homeScore,\\n        uint256 _awayScore\\n    ) internal virtual;\\n}\\n\\nabstract contract SaysWhoWon is Eventual, Linked {\\n    function resolveEvent(\\n        uint256 _eventId,\\n        SportsEventStatus _eventStatus,\\n        uint256 _homeTeamId, // for verifying team stability\\n        uint256 _awayTeamId, // for verifying team stability\\n        uint256 _whoWon\\n    ) public onlyLinkNode {\\n        SportsEvent storage _event = sportsEvents[_eventId];\\n\\n        require(_event.status == SportsEventStatus.Scheduled);\\n        require(SportsEventStatus(_eventStatus) != SportsEventStatus.Scheduled);\\n\\n        if (eventIsNoContest(_event, _eventStatus, _homeTeamId, _awayTeamId, _whoWon)) {\\n            resolveInvalidEvent(_eventId);\\n        } else {\\n            resolveValidEvent(_event, _whoWon);\\n        }\\n\\n        sportsEvents[_eventId].status = _eventStatus;\\n    }\\n\\n    function resolveValidEvent(SportsEvent memory _event, uint256 _whoWon) internal virtual;\\n}\\n\\nabstract contract TokenNamesFromTeams is Eventual {\\n    uint256 constant Away = 1;\\n    uint256 constant Home = 2;\\n\\n    function makeSportsMarket(\\n        string memory _noContestName,\\n        string memory _homeTeamName,\\n        string memory _awayTeamName,\\n        uint256[] memory _odds\\n    ) internal returns (uint256) {\\n        string[] memory _outcomeNames = makeOutcomeNames(_noContestName, _homeTeamName, _awayTeamName);\\n        return startMarket(msg.sender, _outcomeNames, _odds, true);\\n    }\\n\\n    function makeOutcomeNames(\\n        string memory _noContestName,\\n        string memory _homeTeamName,\\n        string memory _awayTeamName\\n    ) private pure returns (string[] memory _names) {\\n        _names = new string[](3);\\n        _names[NoContest] = _noContestName;\\n        _names[Away] = _awayTeamName;\\n        _names[Home] = _homeTeamName;\\n    }\\n}\\n\\nabstract contract Facing is AbstractMarketFactoryV3, Eventual, CalculateLinesToBPoolOdds, TokenNamesFromTeams {\\n    using SafeMathUint256 for uint256;\\n    using SafeMathInt256 for int256;\\n\\n    uint256 private headToHeadMarketType;\\n    string private noContestName;\\n\\n    uint256 constant HeadToHeadAway = 1;\\n    uint256 constant HeadToHeadHome = 2;\\n\\n    constructor(uint256 _marketType, string memory _noContestName) {\\n        headToHeadMarketType = _marketType;\\n        noContestName = _noContestName;\\n    }\\n\\n    function makeHeadToHeadMarket(\\n        int256[2] memory _moneylines,\\n        string memory _homeTeamName,\\n        string memory _awayTeamName\\n    ) internal returns (uint256) {\\n        // moneylines is [home,away] but the outcomes are listed [NC,away,home] so they must be reversed\\n        return\\n            makeSportsMarket(\\n                noContestName,\\n                _homeTeamName,\\n                _awayTeamName,\\n                oddsFromLines(_moneylines[1], _moneylines[0])\\n            );\\n    }\\n\\n    function resolveHeadToHeadMarket(\\n        uint256 _marketId,\\n        uint256 _homeScore,\\n        uint256 _awayScore\\n    ) internal {\\n        uint256 _shareTokenIndex = calcHeadToHeadWinner(_homeScore, _awayScore);\\n        endMarket(_marketId, _shareTokenIndex);\\n    }\\n\\n    function calcHeadToHeadWinner(uint256 _homeScore, uint256 _awayScore) private pure returns (uint256) {\\n        if (_homeScore > _awayScore) {\\n            return HeadToHeadHome;\\n        } else if (_homeScore < _awayScore) {\\n            return HeadToHeadAway;\\n        } else {\\n            return NoContest;\\n        }\\n    }\\n}\\n\\nabstract contract Spreadable is AbstractMarketFactoryV3, Eventual, CalculateLinesToBPoolOdds, TokenNamesFromTeams {\\n    using SafeMathUint256 for uint256;\\n    using SafeMathInt256 for int256;\\n\\n    uint256 private spreadMarketType;\\n    string private noContestName;\\n\\n    uint256 constant SpreadAway = 1;\\n    uint256 constant SpreadHome = 2;\\n\\n    constructor(uint256 _marketType, string memory _noContestName) {\\n        spreadMarketType = _marketType;\\n        noContestName = _noContestName;\\n    }\\n\\n    function makeSpreadMarket(string memory _homeTeamName, string memory _awayTeamName) internal returns (uint256) {\\n        return makeSportsMarket(noContestName, _homeTeamName, _awayTeamName, evenOdds(true, 2));\\n    }\\n\\n    function resolveSpreadMarket(\\n        uint256 _marketId,\\n        int256 _line,\\n        uint256 _homeScore,\\n        uint256 _awayScore\\n    ) internal {\\n        uint256 _shareTokenIndex = calcSpreadWinner(_homeScore, _awayScore, _line);\\n        endMarket(_marketId, _shareTokenIndex);\\n    }\\n\\n    function calcSpreadWinner(\\n        uint256 _homeScore,\\n        uint256 _awayScore,\\n        int256 _targetSpread\\n    ) internal pure returns (uint256) {\\n        int256 _actualSpread = int256(_homeScore).sub(int256(_awayScore));\\n\\n        if (_actualSpread > _targetSpread) {\\n            return SpreadHome; // home spread greater\\n        } else if (_actualSpread < _targetSpread) {\\n            return SpreadAway; // away spread lesser\\n        } else {\\n            // draw / tie; some sports eliminate this with half-points\\n            return NoContest;\\n        }\\n    }\\n}\\n\\nabstract contract Hurdlable is AbstractMarketFactoryV3, Eventual, CalculateLinesToBPoolOdds {\\n    using SafeMathUint256 for uint256;\\n    using SafeMathInt256 for int256;\\n\\n    uint256 private overUnderMarketType;\\n    string private noContestName;\\n\\n    uint256 constant Over = 1;\\n    uint256 constant Under = 2;\\n\\n    constructor(uint256 _marketType, string memory _noContestName) {\\n        overUnderMarketType = _marketType;\\n        noContestName = _noContestName;\\n    }\\n\\n    function makeOverUnderMarket() internal returns (uint256) {\\n        string[] memory _outcomeNames = makeOutcomeNames(noContestName);\\n        return startMarket(msg.sender, _outcomeNames, evenOdds(true, 2), true);\\n    }\\n\\n    function resolveOverUnderMarket(\\n        uint256 _marketId,\\n        int256 _line,\\n        uint256 _homeScore,\\n        uint256 _awayScore\\n    ) internal {\\n        uint256 _shareTokenIndex = calcOverUnderWinner(_homeScore, _awayScore, _line);\\n        endMarket(_marketId, _shareTokenIndex);\\n    }\\n\\n    function calcOverUnderWinner(\\n        uint256 _homeScore,\\n        uint256 _awayScore,\\n        int256 _targetTotal\\n    ) internal pure returns (uint256) {\\n        int256 _actualTotal = int256(_homeScore).add(int256(_awayScore));\\n\\n        if (_actualTotal > _targetTotal) {\\n            return Over; // total score above than line\\n        } else if (_actualTotal < _targetTotal) {\\n            return Under; // total score below line\\n        } else {\\n            return NoContest; // draw / tie; some sports eliminate this with half-points\\n        }\\n    }\\n\\n    function makeOutcomeNames(string memory _noContestName) private pure returns (string[] memory _names) {\\n        _names = new string[](3);\\n        _names[NoContest] = _noContestName;\\n        _names[Over] = \\\"Over\\\";\\n        _names[Under] = \\\"Under\\\";\\n    }\\n}\\n\\nabstract contract Versioned {\\n    string internal version;\\n\\n    constructor(string memory _version) {\\n        version = _version;\\n    }\\n\\n    function getVersion() public view returns (string memory) {\\n        return version;\\n    }\\n}\\n\",\"keccak256\":\"0x49782ef568285cb7e3433eab2e7acd2bdde5fb4255cdc6a37ffe92af594fc9ee\",\"license\":\"MIT\"},\"contracts/turbo/AbstractMarketFactoryV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"../libraries/IERC20Full.sol\\\";\\nimport \\\"../balancer/BPool.sol\\\";\\nimport \\\"./TurboShareTokenFactory.sol\\\";\\nimport \\\"./FeePot.sol\\\";\\n\\nabstract contract AbstractMarketFactoryV3 is TurboShareTokenFactory, Ownable {\\n    using SafeMathUint256 for uint256;\\n\\n    event MarketCreated(uint256 id, string[] names, uint256[] initialOdds);\\n    event MarketResolved(uint256 id, address winner, uint256 winnerIndex, string winnerName);\\n    event MarketActivated(uint256 id);\\n\\n    event SharesMinted(uint256 id, uint256 amount, address receiver);\\n    event SharesBurned(uint256 id, uint256 amount, address receiver);\\n    event WinningsClaimed(\\n        uint256 id,\\n        address winningOutcome,\\n        uint256 winningIndex,\\n        string winningName,\\n        uint256 amount,\\n        uint256 settlementFee,\\n        uint256 payout,\\n        address indexed receiver\\n    );\\n\\n    IERC20Full public collateral;\\n    FeePot public feePot;\\n\\n    // fees are out of 1e18 and only apply to new markets\\n    uint256 public stakerFee;\\n    uint256 public settlementFee;\\n    uint256 public protocolFee;\\n\\n    address public protocol; // collects protocol fees\\n\\n    uint256 public accumulatedProtocolFee = 0;\\n    // settlement address => amount of collateral\\n    mapping(address => uint256) public accumulatedSettlementFees;\\n\\n    // How many shares equals one collateral.\\n    // Necessary to account for math errors from small numbers in balancer.\\n    // shares = collateral / shareFactor\\n    // collateral = shares * shareFactor\\n    uint256 public shareFactor;\\n\\n    struct Market {\\n        address settlementAddress;\\n        OwnedERC20[] shareTokens;\\n        OwnedERC20 winner;\\n        uint256 winnerIndex;\\n        uint256 settlementFee;\\n        uint256 protocolFee;\\n        uint256 stakerFee;\\n        uint256 creationTimestamp;\\n        uint256[] initialOdds;\\n        bool active; // false if not ready to use or if resolved\\n    }\\n    Market[] internal markets;\\n\\n    uint256 private constant MAX_UINT = 2**256 - 1;\\n\\n    constructor(\\n        address _owner,\\n        IERC20Full _collateral,\\n        uint256 _shareFactor,\\n        FeePot _feePot,\\n        uint256[3] memory _fees, // staker, settlement, protocol\\n        address _protocol\\n    ) {\\n        owner = _owner; // controls fees for new markets\\n        collateral = _collateral;\\n        shareFactor = _shareFactor;\\n        feePot = _feePot;\\n        stakerFee = _fees[0];\\n        settlementFee = _fees[1];\\n        protocolFee = _fees[2];\\n        protocol = _protocol;\\n\\n        _collateral.approve(address(_feePot), MAX_UINT);\\n\\n        // First market is always empty so that marketid zero means \\\"no market\\\"\\n        markets.push(makeEmptyMarket());\\n    }\\n\\n    // Returns an empty struct if the market doesn't exist.\\n    // Can check market existence before calling this by comparing _id against markets.length.\\n    // Can check market existence of the return struct by checking that shareTokens[0] isn't the null address\\n    function getMarket(uint256 _id) public view returns (Market memory) {\\n        if (_id >= markets.length) {\\n            return makeEmptyMarket();\\n        } else {\\n            return markets[_id];\\n        }\\n    }\\n\\n    function marketCount() public view returns (uint256) {\\n        return markets.length;\\n    }\\n\\n    // Returns factory-specific details about a market.\\n    // function getMarketDetails(uint256 _id) public view returns (MarketDetails memory);\\n\\n    function mintShares(\\n        uint256 _id,\\n        uint256 _shareToMint,\\n        address _receiver\\n    ) public {\\n        require(markets.length > _id);\\n        require(markets[_id].active);\\n\\n        uint256 _cost = calcCost(_shareToMint);\\n        collateral.transferFrom(msg.sender, address(this), _cost);\\n\\n        Market memory _market = markets[_id];\\n        for (uint256 _i = 0; _i < _market.shareTokens.length; _i++) {\\n            _market.shareTokens[_i].trustedMint(_receiver, _shareToMint);\\n        }\\n\\n        emit SharesMinted(_id, _shareToMint, _receiver);\\n    }\\n\\n    function burnShares(\\n        uint256 _id,\\n        uint256 _sharesToBurn,\\n        address _receiver\\n    ) public returns (uint256) {\\n        require(markets.length > _id);\\n        require(markets[_id].active);\\n\\n        Market memory _market = markets[_id];\\n        for (uint256 _i = 0; _i < _market.shareTokens.length; _i++) {\\n            // errors if sender doesn't have enough shares\\n            _market.shareTokens[_i].trustedBurn(msg.sender, _sharesToBurn);\\n        }\\n\\n        uint256 _payout = calcCost(_sharesToBurn);\\n        uint256 _protocolFee = _payout.mul(_market.protocolFee).div(10**18);\\n        uint256 _stakerFee = _payout.mul(_market.stakerFee).div(10**18);\\n        _payout = _payout.sub(_protocolFee).sub(_stakerFee);\\n\\n        accumulatedProtocolFee += _protocolFee;\\n        collateral.transfer(_receiver, _payout);\\n        feePot.depositFees(_stakerFee);\\n\\n        emit SharesBurned(_id, _sharesToBurn, msg.sender);\\n        return _payout;\\n    }\\n\\n    function claimWinnings(uint256 _id, address _receiver) public returns (uint256) {\\n        require(isMarketResolved(_id), \\\"market unresolved\\\");\\n\\n        Market memory _market = markets[_id];\\n        uint256 _winningShares = _market.winner.trustedBurnAll(msg.sender);\\n        _winningShares = (_winningShares / shareFactor) * shareFactor; // remove unusable dust\\n\\n        uint256 _payout = calcCost(_winningShares); // will fail if there are no winnings to claim\\n        uint256 _settlementFee = _payout.mul(_market.settlementFee).div(10**18);\\n        _payout = _payout.sub(_settlementFee);\\n\\n        accumulatedSettlementFees[_market.settlementAddress] += _settlementFee;\\n        collateral.transfer(_receiver, _payout);\\n\\n        uint256 _winningIndex = _market.winnerIndex;\\n        string memory _winningName = _market.winner.name();\\n\\n        emit WinningsClaimed(\\n            _id,\\n            address(_market.winner),\\n            _winningIndex,\\n            _winningName,\\n            _winningShares,\\n            _settlementFee,\\n            _payout,\\n            _receiver\\n        );\\n        return _payout;\\n    }\\n\\n    function claimManyWinnings(uint256[] memory _ids, address _receiver) public returns (uint256) {\\n        uint256 _totalWinnings = 0;\\n        for (uint256 i = 0; i < _ids.length; i++) {\\n            _totalWinnings = _totalWinnings.add(claimWinnings(_ids[i], _receiver));\\n        }\\n        return _totalWinnings;\\n    }\\n\\n    function claimSettlementFees(address _receiver) public returns (uint256) {\\n        uint256 _fees = accumulatedSettlementFees[msg.sender];\\n        if (_fees > 0) {\\n            accumulatedSettlementFees[msg.sender] = 0;\\n            collateral.transfer(_receiver, _fees);\\n        }\\n        return _fees;\\n    }\\n\\n    function claimProtocolFees() public returns (uint256) {\\n        require(msg.sender == protocol || msg.sender == address(this));\\n        uint256 _fees = accumulatedProtocolFee;\\n        if (_fees > 0) {\\n            accumulatedProtocolFee = 0;\\n            collateral.transfer(protocol, _fees);\\n        }\\n        return _fees;\\n    }\\n\\n    function setSettlementFee(uint256 _newFee) external onlyOwner {\\n        settlementFee = _newFee;\\n    }\\n\\n    function setStakerFee(uint256 _newFee) external onlyOwner {\\n        stakerFee = _newFee;\\n    }\\n\\n    function setProtocolFee(uint256 _newFee) external onlyOwner {\\n        protocolFee = _newFee;\\n    }\\n\\n    function setProtocol(address _newProtocol, bool _claimFirst) external onlyOwner {\\n        if (_claimFirst) {\\n            claimProtocolFees();\\n        }\\n        protocol = _newProtocol;\\n    }\\n\\n    function startMarket(\\n        address _settlementAddress,\\n        string[] memory _names,\\n        uint256[] memory _initialOdds,\\n        bool _active\\n    ) internal returns (uint256 _marketId) {\\n        _marketId = markets.length;\\n        markets.push(\\n            Market(\\n                _settlementAddress,\\n                createShareTokens(_names, address(this)),\\n                OwnedERC20(0),\\n                0,\\n                settlementFee,\\n                protocolFee,\\n                stakerFee,\\n                block.timestamp,\\n                _initialOdds,\\n                _active\\n            )\\n        );\\n        emit MarketCreated(_marketId, _names, _initialOdds);\\n        if (_active) {\\n            emit MarketActivated(_marketId);\\n        }\\n    }\\n\\n    function activateMarket(uint256 _marketId) internal {\\n        markets[_marketId].active = true;\\n        emit MarketActivated(_marketId);\\n    }\\n\\n    function makeEmptyMarket() private pure returns (Market memory) {\\n        OwnedERC20[] memory _tokens = new OwnedERC20[](0);\\n        uint256[] memory _initialOdds = new uint256[](0);\\n        return Market(address(0), _tokens, OwnedERC20(0), 0, 0, 0, 0, 0, _initialOdds, false);\\n    }\\n\\n    function endMarket(uint256 _marketId, uint256 _winningOutcome) internal {\\n        OwnedERC20 _winner = markets[_marketId].shareTokens[_winningOutcome];\\n        markets[_marketId].winner = _winner;\\n        markets[_marketId].active = false;\\n        markets[_marketId].winnerIndex = _winningOutcome;\\n        string memory _outcomeName = _winner.name();\\n        emit MarketResolved(_marketId, address(_winner), _winningOutcome, _outcomeName);\\n    }\\n\\n    function isMarketResolved(uint256 _id) public view returns (bool) {\\n        Market memory _market = markets[_id];\\n        return _market.winner != OwnedERC20(0);\\n    }\\n\\n    // shares => collateral\\n    // Shares must be both greater than (or equal to) and divisible by shareFactor.\\n    function calcCost(uint256 _shares) public view returns (uint256) {\\n        require(_shares >= shareFactor && _shares % shareFactor == 0);\\n        return _shares / shareFactor;\\n    }\\n\\n    // collateral => shares\\n    function calcShares(uint256 _collateralIn) public view returns (uint256) {\\n        return _collateralIn * shareFactor;\\n    }\\n\\n    function onTransferOwnership(address, address) internal override {}\\n}\\n\",\"keccak256\":\"0xaf5f1a9891f229774e5365010cc79544ea9c28889fd86d7c752bf5b66c5ba2f2\",\"license\":\"MIT\"},\"contracts/turbo/CryptoMarketFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"../libraries/IERC20Full.sol\\\";\\nimport \\\"../balancer/BPool.sol\\\";\\nimport \\\"./AbstractMarketFactoryV3.sol\\\";\\nimport \\\"./FeePot.sol\\\";\\nimport \\\"../libraries/SafeMathInt256.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.7/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"../libraries/various.sol\\\";\\n\\ncontract CryptoMarketFactory is AbstractMarketFactoryV3, CalculateLinesToBPoolOdds, Versioned {\\n    using SafeMathUint256 for uint256;\\n    using SafeMathInt256 for int256;\\n\\n    event CoinAdded(uint256 indexed id, string name);\\n\\n    event NewPrices(uint256 indexed nextResolutionTime, uint256[] markets, uint256[] prices);\\n\\n    struct Coin {\\n        string name;\\n        AggregatorV3Interface priceFeed;\\n        uint256 price;\\n        uint8 imprecision; // how many decimals to truncate\\n        uint256[1] currentMarkets;\\n    }\\n    Coin[] public coins;\\n\\n    enum MarketType {\\n        PriceUpDown // 0\\n    }\\n    enum PriceUpDownOutcome {\\n        Above, // 0\\n        NotAbove // 1\\n    }\\n    struct MarketDetails {\\n        MarketType marketType;\\n        uint256 coinIndex;\\n        uint256 creationPrice;\\n        uint256 resolutionPrice;\\n    }\\n    // MarketId => MarketDetails\\n    mapping(uint256 => MarketDetails) internal marketDetails;\\n\\n    address public linkNode; // market creator and resolver\\n\\n    uint256 public nextResolutionTime;\\n\\n    constructor(\\n        address _owner,\\n        IERC20Full _collateral,\\n        uint256 _shareFactor,\\n        FeePot _feePot,\\n        uint256[3] memory _fees,\\n        address _protocol,\\n        address _linkNode\\n    ) AbstractMarketFactoryV3(_owner, _collateral, _shareFactor, _feePot, _fees, _protocol) Versioned(\\\"v1.2.0\\\") {\\n        linkNode = _linkNode;\\n\\n        string memory _name = \\\"\\\";\\n        coins.push(makeCoin(_name, AggregatorV3Interface(0), 0));\\n    }\\n\\n    function getMarketDetails(uint256 _marketId) public view returns (MarketDetails memory) {\\n        return marketDetails[_marketId];\\n    }\\n\\n    // NOTE: Trusts the owner not to add a coin twice.\\n    // Returns the coin index.\\n    function addCoin(\\n        string calldata _name,\\n        AggregatorV3Interface _priceFeed,\\n        uint8 _imprecision\\n    ) external onlyOwner returns (uint256 _coinIndex) {\\n        Coin memory _coin = makeCoin(_name, _priceFeed, _imprecision);\\n        _coinIndex = coins.length;\\n        coins.push(_coin);\\n        emit CoinAdded(_coinIndex, _name);\\n    }\\n\\n    function getCoin(uint256 _coinIndex) public view returns (Coin memory _coin) {\\n        _coin = coins[_coinIndex];\\n    }\\n\\n    function getCoins() public view returns (Coin[] memory _coins) {\\n        _coins = new Coin[](coins.length);\\n        // Skip first coin because it's always the zeroed-out fake coin.\\n        for (uint256 i = 1; i < coins.length; i++) {\\n            _coins[i] = coins[i];\\n        }\\n    }\\n\\n    // Iterates over all coins.\\n    // If markets do not exist for coin, create them.\\n    // Unless _nextResolutionTime is zero; then do not create new markets.\\n    // If markets for coin exist and are ready to resolve, resolve them and create new markets.\\n    // Else, error.\\n    //\\n    // Assume that _roundIds has a dummy value at index 0, and is 1 indexed like the\\n    // coins array.\\n    function createAndResolveMarkets(uint80[] calldata _roundIds, uint256 _nextResolutionTime) public {\\n        require(msg.sender == linkNode, \\\"Only link node can create markets\\\");\\n        // If market creation was stopped then it can be started again.\\n        // If market creation wasn't stopped then you must wait for market end time to resolve.\\n        require(block.timestamp >= nextResolutionTime, \\\"Must wait for market resolution\\\");\\n        require(_roundIds.length == coins.length, \\\"Must specify one roundId for each coin\\\");\\n\\n        uint256 _resolutionTime = nextResolutionTime;\\n        nextResolutionTime = _nextResolutionTime;\\n\\n        uint256[] memory _prices = new uint256[](coins.length - 1);\\n        uint256[] memory _newMarketIds = new uint256[](coins.length - 1);\\n        // Start at 1 to skip the fake Coin in the 0 index\\n        for (uint256 i = 1; i < coins.length; i++) {\\n            (_prices[i - 1], _newMarketIds[i - 1]) = createAndResolveMarketsForCoin(i, _resolutionTime, _roundIds[i]);\\n        }\\n\\n        emit NewPrices(nextResolutionTime, _newMarketIds, _prices);\\n    }\\n\\n    function createAndResolveMarketsForCoin(\\n        uint256 _coinIndex,\\n        uint256 _resolutionTime,\\n        uint80 _roundId\\n    ) internal returns (uint256 _price, uint256 _newMarketId) {\\n        Coin memory _coin = coins[_coinIndex];\\n        (uint256 _fullPrice, uint256 _newPrice) = getPrice(_coin, _roundId, _resolutionTime);\\n\\n        // resolve markets\\n        if (_coin.currentMarkets[uint256(MarketType.PriceUpDown)] != 0) {\\n            resolvePriceUpDownMarket(_coin, _newPrice, _fullPrice);\\n        }\\n\\n        // update price only AFTER resolution\\n        coins[_coinIndex].price = _newPrice;\\n\\n        // link node sets nextResolutionTime to zero to signify \\\"do not create markets after resolution\\\"\\n        if (nextResolutionTime == 0) {\\n            return (0, 0);\\n        }\\n\\n        // create markets\\n        _newMarketId = createPriceUpDownMarket(_coinIndex, linkNode, _newPrice);\\n        coins[_coinIndex].currentMarkets[uint256(MarketType.PriceUpDown)] = _newMarketId;\\n\\n        return (_newPrice, _newMarketId);\\n    }\\n\\n    function resolvePriceUpDownMarket(\\n        Coin memory _coin,\\n        uint256 _newPrice,\\n        uint256 _fullPrice\\n    ) internal {\\n        uint256 _marketId = _coin.currentMarkets[uint256(MarketType.PriceUpDown)];\\n\\n        uint256 _winningOutcome;\\n        if (_newPrice > _coin.price) {\\n            _winningOutcome = uint256(PriceUpDownOutcome.Above);\\n        } else {\\n            _winningOutcome = uint256(PriceUpDownOutcome.NotAbove);\\n        }\\n\\n        endMarket(_marketId, _winningOutcome);\\n        marketDetails[_marketId].resolutionPrice = _fullPrice;\\n    }\\n\\n    function createPriceUpDownMarket(\\n        uint256 _coinIndex,\\n        address _creator,\\n        uint256 _newPrice\\n    ) internal returns (uint256 _id) {\\n        string[] memory _outcomes = new string[](2);\\n        _outcomes[uint256(PriceUpDownOutcome.Above)] = \\\"Above\\\";\\n        _outcomes[uint256(PriceUpDownOutcome.NotAbove)] = \\\"Not Above\\\";\\n\\n        _id = startMarket(_creator, _outcomes, evenOdds(false, 2), true);\\n        marketDetails[_id] = MarketDetails(MarketType.PriceUpDown, _coinIndex, _newPrice, 0);\\n    }\\n\\n    // Returns the price based on a few factors.\\n    // If _roundId is zero then it returns the latest price.\\n    // Else, it returns the price for that round,\\n    //       but errors if that isn't the first round after the resolution time.\\n    // The price is then altered to match the desired precision.\\n    function getPrice(\\n        Coin memory _coin,\\n        uint80 _roundId,\\n        uint256 _resolutionTime\\n    ) internal view returns (uint256 _fullPrice, uint256 _truncatedPrice) {\\n        if (_roundId == 0) {\\n            (, int256 _rawPrice, , , ) = _coin.priceFeed.latestRoundData();\\n            require(_rawPrice >= 0, \\\"Price from feed is negative\\\");\\n            _fullPrice = uint256(_rawPrice);\\n        } else {\\n            (, int256 _rawPrice, , uint256 updatedAt, ) = _coin.priceFeed.getRoundData(_roundId);\\n            require(_rawPrice >= 0, \\\"Price from feed is negative\\\");\\n            require(updatedAt >= _resolutionTime, \\\"Price hasn't been updated yet\\\");\\n\\n            // if resolution time is zero then market creation was stopped, so the previous round doesn't matter\\n            if (_resolutionTime != 0) {\\n                (, , , uint256 _previousRoundTime, ) = _coin.priceFeed.getRoundData(previousRound(_roundId));\\n                require(_previousRoundTime < _resolutionTime, \\\"Must use first round after resolution time\\\");\\n            }\\n\\n            _fullPrice = uint256(_rawPrice);\\n        }\\n\\n        // The precision is how many decimals the price has. Zero is dollars, 2 includes cents, 3 is tenths of a cent, etc.\\n        // Our resolution rules want a certain precision. Like BTC is to the dollar and MATIC is to the cent.\\n        // If somehow the decimals are larger than the desired precision then add zeroes to the end to meet the precision.\\n        // This does not change the resolution outcome but does guard against decimals() changing and therefore altering the basis.\\n\\n        uint8 _precision = _coin.priceFeed.decimals(); // probably constant but that isn't guaranteed, so query each time\\n        if (_precision > _coin.imprecision) {\\n            uint8 _truncate = _precision - _coin.imprecision;\\n            _truncatedPrice = _fullPrice / (10**_truncate);\\n        } else if (_precision < _coin.imprecision) {\\n            uint8 _greaten = _coin.imprecision - _precision;\\n            _truncatedPrice = _fullPrice * (10**_greaten);\\n        } else {\\n            _truncatedPrice = _fullPrice;\\n        }\\n\\n        // Round up because that cleanly fits Above/Not-Above.\\n        if (_truncatedPrice != _fullPrice) {\\n            _truncatedPrice += 1;\\n        }\\n    }\\n\\n    function makeCoin(\\n        string memory _name,\\n        AggregatorV3Interface _priceFeed,\\n        uint8 _imprecision\\n    ) internal pure returns (Coin memory _coin) {\\n        uint256[1] memory _currentMarkets = [uint256(0)];\\n        _coin = Coin(_name, _priceFeed, 0, _imprecision, _currentMarkets);\\n    }\\n\\n    // The roundId is the encoding of two parts: the phase and the phase-specific round id.\\n    // To find the previous roundId:\\n    // 1. extract the phase and phase-specific round (I call these _phaseId and _roundId)\\n    // 2. decrement the phase-specific round\\n    // 3. re-encode the phase and phase-specific round.\\n    uint256 private constant PHASE_OFFSET = 64;\\n\\n    function previousRound(uint80 _fullRoundId) internal pure returns (uint80) {\\n        uint256 _phaseId = uint256(uint16(_fullRoundId >> PHASE_OFFSET));\\n        uint64 _roundId = uint64(_fullRoundId) - 1;\\n        return uint80((_phaseId << PHASE_OFFSET) | _roundId);\\n    }\\n}\\n\",\"keccak256\":\"0x2847b137f79b5a8c5380b3e3b42f44ffad79a0528898ef6f5b2658edd31dcb35\",\"license\":\"MIT\"},\"contracts/turbo/FeePot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"../libraries/SafeMathUint256.sol\\\";\\nimport \\\"../libraries/IERC20Full.sol\\\";\\n\\ncontract FeePot is ERC20 {\\n    using SafeMathUint256 for uint256;\\n\\n    uint256 internal constant magnitude = 2**128;\\n\\n    IERC20Full public collateral;\\n    IERC20Full public reputationToken;\\n\\n    uint256 public magnifiedFeesPerShare;\\n\\n    mapping(address => uint256) public magnifiedFeesCorrections;\\n    mapping(address => uint256) public storedFees;\\n\\n    uint256 public feeReserve;\\n\\n    constructor(IERC20Full _collateral, IERC20Full _reputationToken)\\n        ERC20(\\n            string(abi.encodePacked(\\\"S_\\\", _reputationToken.symbol())),\\n            string(abi.encodePacked(\\\"S_\\\", _reputationToken.symbol()))\\n        )\\n    {\\n        collateral = _collateral;\\n        reputationToken = _reputationToken;\\n\\n        require(_collateral != IERC20Full(0));\\n    }\\n\\n    function depositFees(uint256 _amount) public returns (bool) {\\n        collateral.transferFrom(msg.sender, address(this), _amount);\\n        uint256 _totalSupply = totalSupply(); // after collateral.transferFrom to prevent reentrancy causing stale totalSupply\\n        if (_totalSupply == 0) {\\n            feeReserve = feeReserve.add(_amount);\\n            return true;\\n        }\\n        if (feeReserve > 0) {\\n            _amount = _amount.add(feeReserve);\\n            feeReserve = 0;\\n        }\\n        magnifiedFeesPerShare = magnifiedFeesPerShare.add((_amount).mul(magnitude) / _totalSupply);\\n        return true;\\n    }\\n\\n    function withdrawableFeesOf(address _owner) public view returns (uint256) {\\n        return earnedFeesOf(_owner).add(storedFees[_owner]);\\n    }\\n\\n    function earnedFeesOf(address _owner) public view returns (uint256) {\\n        uint256 _ownerBalance = balanceOf(_owner);\\n        uint256 _magnifiedFees = magnifiedFeesPerShare.mul(_ownerBalance);\\n        return _magnifiedFees.sub(magnifiedFeesCorrections[_owner]) / magnitude;\\n    }\\n\\n    function _transfer(\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) internal override {\\n        storedFees[_from] = storedFees[_from].add(earnedFeesOf(_from));\\n        super._transfer(_from, _to, _amount);\\n\\n        magnifiedFeesCorrections[_from] = magnifiedFeesPerShare.mul(balanceOf(_from));\\n        magnifiedFeesCorrections[_to] = magnifiedFeesCorrections[_to].add(magnifiedFeesPerShare.mul(_amount));\\n    }\\n\\n    function stake(uint256 _amount) external returns (bool) {\\n        reputationToken.transferFrom(msg.sender, address(this), _amount);\\n        _mint(msg.sender, _amount);\\n        magnifiedFeesCorrections[msg.sender] = magnifiedFeesCorrections[msg.sender].add(\\n            magnifiedFeesPerShare.mul(_amount)\\n        );\\n        return true;\\n    }\\n\\n    function exit(uint256 _amount) external returns (bool) {\\n        redeemInternal(msg.sender);\\n        _burn(msg.sender, _amount);\\n        reputationToken.transfer(msg.sender, _amount);\\n        magnifiedFeesCorrections[msg.sender] = magnifiedFeesPerShare.mul(balanceOf(msg.sender));\\n        return true;\\n    }\\n\\n    function redeem() public returns (bool) {\\n        redeemInternal(msg.sender);\\n        magnifiedFeesCorrections[msg.sender] = magnifiedFeesPerShare.mul(balanceOf(msg.sender));\\n        return true;\\n    }\\n\\n    function redeemInternal(address _account) internal {\\n        uint256 _withdrawableFees = withdrawableFeesOf(_account);\\n        if (_withdrawableFees > 0) {\\n            storedFees[_account] = 0;\\n            collateral.transfer(_account, _withdrawableFees);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4189f90e0c0d061643abdea7d166a863801cfedb488a99b018ddc52ff9bdd3b0\",\"license\":\"MIT\"},\"contracts/turbo/OwnedShareToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"../libraries/Ownable.sol\\\";\\n\\ncontract OwnedERC20 is ERC20, Ownable {\\n    constructor(\\n        string memory name_,\\n        string memory symbol_,\\n        address _owner\\n    ) ERC20(name_, symbol_) {\\n        owner = _owner;\\n    }\\n\\n    function trustedTransfer(\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) external onlyOwner {\\n        _transfer(_from, _to, _amount);\\n    }\\n\\n    function trustedMint(address _target, uint256 _amount) external onlyOwner {\\n        _mint(_target, _amount);\\n    }\\n\\n    function trustedBurn(address _target, uint256 _amount) external onlyOwner {\\n        _burn(_target, _amount);\\n    }\\n\\n    function trustedBurnAll(address _target) external onlyOwner returns (uint256) {\\n        uint256 _balance = balanceOf(_target);\\n        _burn(_target, _balance);\\n        return _balance;\\n    }\\n\\n    function onTransferOwnership(address, address) internal override {}\\n}\\n\",\"keccak256\":\"0x1a60d8f5bb07018b446bf34cdc626ab309c5d2db2eaf75575622090af92c0086\",\"license\":\"MIT\"},\"contracts/turbo/TurboShareTokenFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"./OwnedShareToken.sol\\\";\\n\\nabstract contract TurboShareTokenFactory {\\n    function createShareTokens(string[] memory _names, address _owner) internal returns (OwnedERC20[] memory) {\\n        uint256 _numOutcomes = _names.length;\\n        OwnedERC20[] memory _tokens = new OwnedERC20[](_numOutcomes);\\n\\n        for (uint256 _i = 0; _i < _numOutcomes; _i++) {\\n            _tokens[_i] = new OwnedERC20(_names[_i], _names[_i], _owner);\\n        }\\n        return _tokens;\\n    }\\n}\\n\\nabstract contract TurboShareTokenFactoryV1 {\\n    function createShareTokens(\\n        string[] memory _names,\\n        string[] memory _symbols,\\n        address _owner\\n    ) internal returns (OwnedERC20[] memory) {\\n        uint256 _numOutcomes = _names.length;\\n        OwnedERC20[] memory _tokens = new OwnedERC20[](_numOutcomes);\\n\\n        for (uint256 _i = 0; _i < _numOutcomes; _i++) {\\n            _tokens[_i] = new OwnedERC20(_names[_i], _symbols[_i], _owner);\\n        }\\n        return _tokens;\\n    }\\n}\\n\",\"keccak256\":\"0x124906d94f6cae4049f50a2b71ddb9b8c0f0da8739b5c698166126bfe3173f8c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
=======
  "solcInputHash": "aca05386cf7c6364525ad9f99dc56a7b",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Full\",\"name\":\"_collateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_shareFactor\",\"type\":\"uint256\"},{\"internalType\":\"contract FeePot\",\"name\":\"_feePot\",\"type\":\"address\"},{\"internalType\":\"uint256[3]\",\"name\":\"_fees\",\"type\":\"uint256[3]\"},{\"internalType\":\"address\",\"name\":\"_protocol\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_linkNode\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"CoinAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"MarketActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"names\",\"type\":\"string[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"initialOdds\",\"type\":\"uint256[]\"}],\"name\":\"MarketCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"winnerIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"winnerName\",\"type\":\"string\"}],\"name\":\"MarketResolved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nextResolutionTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"markets\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"prices\",\"type\":\"uint256[]\"}],\"name\":\"NewPrices\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"SharesBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"SharesMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"winningOutcome\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"winningIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"winningName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"settlementFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"WinningsClaimed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accumulatedProtocolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accumulatedSettlementFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"_priceFeed\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_imprecision\",\"type\":\"uint8\"}],\"name\":\"addCoin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_coinIndex\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sharesToBurn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"burnShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"calcCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_collateralIn\",\"type\":\"uint256\"}],\"name\":\"calcShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"claimManyWinnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimProtocolFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"claimSettlementFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"claimWinnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"coins\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"priceFeed\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"imprecision\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateral\",\"outputs\":[{\"internalType\":\"contract IERC20Full\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint80[]\",\"name\":\"_roundIds\",\"type\":\"uint80[]\"},{\"internalType\":\"uint256\",\"name\":\"_nextResolutionTime\",\"type\":\"uint256\"}],\"name\":\"createAndResolveMarkets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feePot\",\"outputs\":[{\"internalType\":\"contract FeePot\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_coinIndex\",\"type\":\"uint256\"}],\"name\":\"getCoin\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"priceFeed\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"imprecision\",\"type\":\"uint8\"},{\"internalType\":\"uint256[1]\",\"name\":\"currentMarkets\",\"type\":\"uint256[1]\"}],\"internalType\":\"struct CryptoMarketFactory.Coin\",\"name\":\"_coin\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCoins\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"priceFeed\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"imprecision\",\"type\":\"uint8\"},{\"internalType\":\"uint256[1]\",\"name\":\"currentMarkets\",\"type\":\"uint256[1]\"}],\"internalType\":\"struct CryptoMarketFactory.Coin[]\",\"name\":\"_coins\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getMarket\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"settlementAddress\",\"type\":\"address\"},{\"internalType\":\"contract OwnedERC20[]\",\"name\":\"shareTokens\",\"type\":\"address[]\"},{\"internalType\":\"contract OwnedERC20\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"winnerIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"settlementFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"creationTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"initialOdds\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"internalType\":\"struct AbstractMarketFactoryV3.Market\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"}],\"name\":\"getMarketDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"enum CryptoMarketFactory.MarketType\",\"name\":\"marketType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"coinIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"creationPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resolutionPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct CryptoMarketFactory.MarketDetails\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"isMarketResolved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"linkNode\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_shareToMint\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"mintShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextResolutionTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocol\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newProtocol\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_claimFirst\",\"type\":\"bool\"}],\"name\":\"setProtocol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"setProtocolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"setSettlementFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"setStakerFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"settlementFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shareFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakerFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"transferOwnership(address)\":{\"details\":\"Allows the current owner to transfer control of the contract to a newOwner.\",\"params\":{\"_newOwner\":\"The address to transfer ownership to.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/turbo/CryptoMarketFactory.sol\":\"CryptoMarketFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.7/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals() external view returns (uint8);\\n  function description() external view returns (string memory);\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\",\"keccak256\":\"0x78af5c13ec137bdbb22ec9d65c730fb6f138d3a61a3fdbb63be4838ce7faf2a6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xe22a1fc7400ae196eba2ad1562d0386462b00a6363b742d55a2fd2021a58586f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0x36b5ca4eabe888b39b10973621ca0dcc9b1508f8d06db9ddf045d7aa7c867d4a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"contracts/balancer/BColor.sol\":{\"content\":\"// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\ninterface BColor {\\n    function getColor() external view returns (bytes32);\\n}\\n\\ncontract BBronze is BColor {\\n    function getColor() external pure override returns (bytes32) {\\n        return bytes32(\\\"BRONZE\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xc716fe6583bbf6f8546c258540b2f7527dbc3b1f4b30007a0978b620c9779378\",\"license\":\"MIT\"},\"contracts/balancer/BConst.sol\":{\"content\":\"// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\nimport \\\"./BColor.sol\\\";\\n\\ncontract BConst is BBronze {\\n    uint256 public constant BONE = 10**18;\\n\\n    uint256 public constant MIN_BOUND_TOKENS = 2;\\n    uint256 public constant MAX_BOUND_TOKENS = 8;\\n\\n    uint256 public constant MIN_FEE = BONE / 10**6;\\n    uint256 public constant MAX_FEE = BONE / 10;\\n    uint256 public constant EXIT_FEE = 0;\\n\\n    uint256 public constant MIN_WEIGHT = BONE;\\n    uint256 public constant MAX_WEIGHT = BONE * 50;\\n    uint256 public constant MAX_TOTAL_WEIGHT = BONE * 50;\\n    uint256 public constant MIN_BALANCE = BONE / 10**12;\\n\\n    uint256 public constant INIT_POOL_SUPPLY = BONE * 100;\\n\\n    uint256 public constant MIN_BPOW_BASE = 1 wei;\\n    uint256 public constant MAX_BPOW_BASE = (2 * BONE) - 1 wei;\\n    uint256 public constant BPOW_PRECISION = BONE / 10**10;\\n\\n    uint256 public constant MAX_IN_RATIO = BONE / 2;\\n    uint256 public constant MAX_OUT_RATIO = (BONE / 3) + 1 wei;\\n}\\n\",\"keccak256\":\"0xb8d5d4ae9948f9be6ddb3111b38f01a15a607a155010321c4666351c9ca9afec\",\"license\":\"MIT\"},\"contracts/balancer/BMath.sol\":{\"content\":\"// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\nimport \\\"./BNum.sol\\\";\\n\\ncontract BMath is BBronze, BConst, BNum {\\n    /**********************************************************************************************\\n    // calcSpotPrice                                                                             //\\n    // sP = spotPrice                                                                            //\\n    // bI = tokenBalanceIn                ( bI / wI )         1                                  //\\n    // bO = tokenBalanceOut         sP =  -----------  *  ----------                             //\\n    // wI = tokenWeightIn                 ( bO / wO )     ( 1 - sF )                             //\\n    // wO = tokenWeightOut                                                                       //\\n    // sF = swapFee                                                                              //\\n    **********************************************************************************************/\\n    function calcSpotPrice(\\n        uint256 tokenBalanceIn,\\n        uint256 tokenWeightIn,\\n        uint256 tokenBalanceOut,\\n        uint256 tokenWeightOut,\\n        uint256 swapFee\\n    ) public pure returns (uint256 spotPrice) {\\n        uint256 numer = bdiv(tokenBalanceIn, tokenWeightIn);\\n        uint256 denom = bdiv(tokenBalanceOut, tokenWeightOut);\\n        uint256 ratio = bdiv(numer, denom);\\n        uint256 scale = bdiv(BONE, bsub(BONE, swapFee));\\n        return (spotPrice = bmul(ratio, scale));\\n    }\\n\\n    /**********************************************************************************************\\n    // calcOutGivenIn                                                                            //\\n    // aO = tokenAmountOut                                                                       //\\n    // bO = tokenBalanceOut                                                                      //\\n    // bI = tokenBalanceIn              /      /            bI             \\\\    (wI / wO) \\\\      //\\n    // aI = tokenAmountIn    aO = bO * |  1 - | --------------------------  | ^            |     //\\n    // wI = tokenWeightIn               \\\\      \\\\ ( bI + ( aI * ( 1 - sF )) /              /      //\\n    // wO = tokenWeightOut                                                                       //\\n    // sF = swapFee                                                                              //\\n    **********************************************************************************************/\\n    function calcOutGivenIn(\\n        uint256 tokenBalanceIn,\\n        uint256 tokenWeightIn,\\n        uint256 tokenBalanceOut,\\n        uint256 tokenWeightOut,\\n        uint256 tokenAmountIn,\\n        uint256 swapFee\\n    ) public pure returns (uint256 tokenAmountOut) {\\n        uint256 weightRatio = bdiv(tokenWeightIn, tokenWeightOut);\\n        uint256 adjustedIn = bsub(BONE, swapFee);\\n        adjustedIn = bmul(tokenAmountIn, adjustedIn);\\n        uint256 y = bdiv(tokenBalanceIn, badd(tokenBalanceIn, adjustedIn));\\n        uint256 foo = bpow(y, weightRatio);\\n        uint256 bar = bsub(BONE, foo);\\n        tokenAmountOut = bmul(tokenBalanceOut, bar);\\n        return tokenAmountOut;\\n    }\\n\\n    /**********************************************************************************************\\n    // calcInGivenOut                                                                            //\\n    // aI = tokenAmountIn                                                                        //\\n    // bO = tokenBalanceOut               /  /     bO      \\\\    (wO / wI)      \\\\                 //\\n    // bI = tokenBalanceIn          bI * |  | ------------  | ^            - 1  |                //\\n    // aO = tokenAmountOut    aI =        \\\\  \\\\ ( bO - aO ) /                   /                 //\\n    // wI = tokenWeightIn           --------------------------------------------                 //\\n    // wO = tokenWeightOut                          ( 1 - sF )                                   //\\n    // sF = swapFee                                                                              //\\n    **********************************************************************************************/\\n    function calcInGivenOut(\\n        uint256 tokenBalanceIn,\\n        uint256 tokenWeightIn,\\n        uint256 tokenBalanceOut,\\n        uint256 tokenWeightOut,\\n        uint256 tokenAmountOut,\\n        uint256 swapFee\\n    ) public pure returns (uint256 tokenAmountIn) {\\n        uint256 weightRatio = bdiv(tokenWeightOut, tokenWeightIn);\\n        uint256 diff = bsub(tokenBalanceOut, tokenAmountOut);\\n        uint256 y = bdiv(tokenBalanceOut, diff);\\n        uint256 foo = bpow(y, weightRatio);\\n        foo = bsub(foo, BONE);\\n        tokenAmountIn = bsub(BONE, swapFee);\\n        tokenAmountIn = bdiv(bmul(tokenBalanceIn, foo), tokenAmountIn);\\n        return tokenAmountIn;\\n    }\\n\\n    /**********************************************************************************************\\n    // calcPoolOutGivenSingleIn                                                                  //\\n    // pAo = poolAmountOut         /                                              \\\\              //\\n    // tAi = tokenAmountIn        ///      /     //    wI \\\\      \\\\\\\\       \\\\     wI \\\\             //\\n    // wI = tokenWeightIn        //| tAi *| 1 - || 1 - --  | * sF || + tBi \\\\    --  \\\\            //\\n    // tW = totalWeight     pAo=||  \\\\      \\\\     \\\\\\\\    tW /      //         | ^ tW   | * pS - pS //\\n    // tBi = tokenBalanceIn      \\\\\\\\  ------------------------------------- /        /            //\\n    // pS = poolSupply            \\\\\\\\                    tBi               /        /             //\\n    // sF = swapFee                \\\\                                              /              //\\n    **********************************************************************************************/\\n\\n    // Charge the trading fee for the proportion of tokenAi\\n    ///  which is implicitly traded to the other pool tokens.\\n    // That proportion is (1- weightTokenIn)\\n    // tokenAiAfterFee = tAi * (1 - (1-weightTi) * poolFee);\\n\\n    function calcPoolOutGivenSingleIn(\\n        uint256 tokenBalanceIn,\\n        uint256 tokenWeightIn,\\n        uint256 poolSupply,\\n        uint256 totalWeight,\\n        uint256 tokenAmountIn,\\n        uint256 swapFee\\n    ) public pure returns (uint256 poolAmountOut) {\\n        uint256 normalizedWeight = bdiv(tokenWeightIn, totalWeight);\\n        uint256 zaz = bmul(bsub(BONE, normalizedWeight), swapFee);\\n        uint256 tokenAmountInAfterFee = bmul(tokenAmountIn, bsub(BONE, zaz));\\n\\n        uint256 newTokenBalanceIn = badd(tokenBalanceIn, tokenAmountInAfterFee);\\n        uint256 tokenInRatio = bdiv(newTokenBalanceIn, tokenBalanceIn);\\n\\n        // uint newPoolSupply = (ratioTi ^ weightTi) * poolSupply;\\n        uint256 poolRatio = bpow(tokenInRatio, normalizedWeight);\\n        uint256 newPoolSupply = bmul(poolRatio, poolSupply);\\n        poolAmountOut = bsub(newPoolSupply, poolSupply);\\n        return poolAmountOut;\\n    }\\n\\n    /**********************************************************************************************\\n    // calcSingleInGivenPoolOut                                                                  //\\n    // tAi = tokenAmountIn              //(pS + pAo)\\\\     /    1    \\\\\\\\                           //\\n    // pS = poolSupply                 || ---------  | ^ | --------- || * bI - bI                //\\n    // pAo = poolAmountOut              \\\\\\\\    pS    /     \\\\(wI / tW)//                           //\\n    // bI = balanceIn          tAi =  --------------------------------------------               //\\n    // wI = weightIn                              /      wI  \\\\                                   //\\n    // tW = totalWeight                          |  1 - ----  |  * sF                            //\\n    // sF = swapFee                               \\\\      tW  /                                   //\\n    **********************************************************************************************/\\n    function calcSingleInGivenPoolOut(\\n        uint256 tokenBalanceIn,\\n        uint256 tokenWeightIn,\\n        uint256 poolSupply,\\n        uint256 totalWeight,\\n        uint256 poolAmountOut,\\n        uint256 swapFee\\n    ) public pure returns (uint256 tokenAmountIn) {\\n        uint256 normalizedWeight = bdiv(tokenWeightIn, totalWeight);\\n        uint256 newPoolSupply = badd(poolSupply, poolAmountOut);\\n        uint256 poolRatio = bdiv(newPoolSupply, poolSupply);\\n\\n        //uint newBalTi = poolRatio^(1/weightTi) * balTi;\\n        uint256 boo = bdiv(BONE, normalizedWeight);\\n        uint256 tokenInRatio = bpow(poolRatio, boo);\\n        uint256 newTokenBalanceIn = bmul(tokenInRatio, tokenBalanceIn);\\n        uint256 tokenAmountInAfterFee = bsub(newTokenBalanceIn, tokenBalanceIn);\\n        // Do reverse order of fees charged in joinswap_ExternAmountIn, this way\\n        //     ``` pAo == joinswap_ExternAmountIn(Ti, joinswap_PoolAmountOut(pAo, Ti)) ```\\n        //uint tAi = tAiAfterFee / (1 - (1-weightTi) * swapFee) ;\\n        uint256 zar = bmul(bsub(BONE, normalizedWeight), swapFee);\\n        tokenAmountIn = bdiv(tokenAmountInAfterFee, bsub(BONE, zar));\\n        return tokenAmountIn;\\n    }\\n\\n    /**********************************************************************************************\\n    // calcSingleOutGivenPoolIn                                                                  //\\n    // tAo = tokenAmountOut            /      /                                             \\\\\\\\   //\\n    // bO = tokenBalanceOut           /      // pS - (pAi * (1 - eF)) \\\\     /    1    \\\\      \\\\\\\\  //\\n    // pAi = poolAmountIn            | bO - || ----------------------- | ^ | --------- | * b0 || //\\n    // ps = poolSupply                \\\\      \\\\\\\\          pS           /     \\\\(wO / tW)/      //  //\\n    // wI = tokenWeightIn      tAo =   \\\\      \\\\                                             //   //\\n    // tW = totalWeight                    /     /      wO \\\\       \\\\                             //\\n    // sF = swapFee                    *  | 1 - |  1 - ---- | * sF  |                            //\\n    // eF = exitFee                        \\\\     \\\\      tW /       /                             //\\n    **********************************************************************************************/\\n    function calcSingleOutGivenPoolIn(\\n        uint256 tokenBalanceOut,\\n        uint256 tokenWeightOut,\\n        uint256 poolSupply,\\n        uint256 totalWeight,\\n        uint256 poolAmountIn,\\n        uint256 swapFee\\n    ) public pure returns (uint256 tokenAmountOut) {\\n        uint256 normalizedWeight = bdiv(tokenWeightOut, totalWeight);\\n        // charge exit fee on the pool token side\\n        // pAiAfterExitFee = pAi*(1-exitFee)\\n        uint256 poolAmountInAfterExitFee = bmul(poolAmountIn, bsub(BONE, EXIT_FEE));\\n        uint256 newPoolSupply = bsub(poolSupply, poolAmountInAfterExitFee);\\n        uint256 poolRatio = bdiv(newPoolSupply, poolSupply);\\n\\n        // newBalTo = poolRatio^(1/weightTo) * balTo;\\n        uint256 tokenOutRatio = bpow(poolRatio, bdiv(BONE, normalizedWeight));\\n        uint256 newTokenBalanceOut = bmul(tokenOutRatio, tokenBalanceOut);\\n\\n        uint256 tokenAmountOutBeforeSwapFee = bsub(tokenBalanceOut, newTokenBalanceOut);\\n\\n        // charge swap fee on the output token side\\n        //uint tAo = tAoBeforeSwapFee * (1 - (1-weightTo) * swapFee)\\n        uint256 zaz = bmul(bsub(BONE, normalizedWeight), swapFee);\\n        tokenAmountOut = bmul(tokenAmountOutBeforeSwapFee, bsub(BONE, zaz));\\n        return tokenAmountOut;\\n    }\\n\\n    /**********************************************************************************************\\n    // calcPoolInGivenSingleOut                                                                  //\\n    // pAi = poolAmountIn               // /               tAo             \\\\\\\\     / wO \\\\     \\\\   //\\n    // bO = tokenBalanceOut            // | bO - -------------------------- |\\\\   | ---- |     \\\\  //\\n    // tAo = tokenAmountOut      pS - ||   \\\\     1 - ((1 - (tO / tW)) * sF)/  | ^ \\\\ tW /  * pS | //\\n    // ps = poolSupply                 \\\\\\\\ -----------------------------------/                /  //\\n    // wO = tokenWeightOut  pAi =       \\\\\\\\               bO                 /                /   //\\n    // tW = totalWeight           -------------------------------------------------------------  //\\n    // sF = swapFee                                        ( 1 - eF )                            //\\n    // eF = exitFee                                                                              //\\n    **********************************************************************************************/\\n    function calcPoolInGivenSingleOut(\\n        uint256 tokenBalanceOut,\\n        uint256 tokenWeightOut,\\n        uint256 poolSupply,\\n        uint256 totalWeight,\\n        uint256 tokenAmountOut,\\n        uint256 swapFee\\n    ) public pure returns (uint256 poolAmountIn) {\\n        // charge swap fee on the output token side\\n        uint256 normalizedWeight = bdiv(tokenWeightOut, totalWeight);\\n        //uint tAoBeforeSwapFee = tAo / (1 - (1-weightTo) * swapFee) ;\\n        uint256 zoo = bsub(BONE, normalizedWeight);\\n        uint256 zar = bmul(zoo, swapFee);\\n        uint256 tokenAmountOutBeforeSwapFee = bdiv(tokenAmountOut, bsub(BONE, zar));\\n\\n        uint256 newTokenBalanceOut = bsub(tokenBalanceOut, tokenAmountOutBeforeSwapFee);\\n        uint256 tokenOutRatio = bdiv(newTokenBalanceOut, tokenBalanceOut);\\n\\n        //uint newPoolSupply = (ratioTo ^ weightTo) * poolSupply;\\n        uint256 poolRatio = bpow(tokenOutRatio, normalizedWeight);\\n        uint256 newPoolSupply = bmul(poolRatio, poolSupply);\\n        uint256 poolAmountInAfterExitFee = bsub(poolSupply, newPoolSupply);\\n\\n        // charge exit fee on the pool token side\\n        // pAi = pAiAfterExitFee/(1-exitFee)\\n        poolAmountIn = bdiv(poolAmountInAfterExitFee, bsub(BONE, EXIT_FEE));\\n        return poolAmountIn;\\n    }\\n}\\n\",\"keccak256\":\"0x0a19a262ccff90637f3d74538bc55cff57d1b9d484df33cca36f29fad8f37e2e\",\"license\":\"MIT\"},\"contracts/balancer/BNum.sol\":{\"content\":\"// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\nimport \\\"./BConst.sol\\\";\\n\\ncontract BNum is BConst {\\n    function btoi(uint256 a) internal pure returns (uint256) {\\n        return a / BONE;\\n    }\\n\\n    function bfloor(uint256 a) internal pure returns (uint256) {\\n        return btoi(a) * BONE;\\n    }\\n\\n    function badd(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"ERR_ADD_OVERFLOW\\\");\\n        return c;\\n    }\\n\\n    function bsub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (uint256 c, bool flag) = bsubSign(a, b);\\n        require(!flag, \\\"ERR_SUB_UNDERFLOW\\\");\\n        return c;\\n    }\\n\\n    function bsubSign(uint256 a, uint256 b) internal pure returns (uint256, bool) {\\n        if (a >= b) {\\n            return (a - b, false);\\n        } else {\\n            return (b - a, true);\\n        }\\n    }\\n\\n    function bmul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c0 = a * b;\\n        require(a == 0 || c0 / a == b, \\\"ERR_MUL_OVERFLOW\\\");\\n        uint256 c1 = c0 + (BONE / 2);\\n        require(c1 >= c0, \\\"ERR_MUL_OVERFLOW\\\");\\n        uint256 c2 = c1 / BONE;\\n        return c2;\\n    }\\n\\n    function bdiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, \\\"ERR_DIV_ZERO\\\");\\n        uint256 c0 = a * BONE;\\n        require(a == 0 || c0 / a == BONE, \\\"ERR_DIV_INTERNAL\\\"); // bmul overflow\\n        uint256 c1 = c0 + (b / 2);\\n        require(c1 >= c0, \\\"ERR_DIV_INTERNAL\\\"); //  badd require\\n        uint256 c2 = c1 / b;\\n        return c2;\\n    }\\n\\n    // DSMath.wpow\\n    function bpowi(uint256 a, uint256 n) internal pure returns (uint256) {\\n        uint256 z = n % 2 != 0 ? a : BONE;\\n\\n        for (n /= 2; n != 0; n /= 2) {\\n            a = bmul(a, a);\\n\\n            if (n % 2 != 0) {\\n                z = bmul(z, a);\\n            }\\n        }\\n        return z;\\n    }\\n\\n    // Compute b^(e.w) by splitting it into (b^e)*(b^0.w).\\n    // Use `bpowi` for `b^e` and `bpowK` for k iterations\\n    // of approximation of b^0.w\\n    function bpow(uint256 base, uint256 exp) internal pure returns (uint256) {\\n        require(base >= MIN_BPOW_BASE, \\\"ERR_BPOW_BASE_TOO_LOW\\\");\\n        require(base <= MAX_BPOW_BASE, \\\"ERR_BPOW_BASE_TOO_HIGH\\\");\\n\\n        uint256 whole = bfloor(exp);\\n        uint256 remain = bsub(exp, whole);\\n\\n        uint256 wholePow = bpowi(base, btoi(whole));\\n\\n        if (remain == 0) {\\n            return wholePow;\\n        }\\n\\n        uint256 partialResult = bpowApprox(base, remain, BPOW_PRECISION);\\n        return bmul(wholePow, partialResult);\\n    }\\n\\n    function bpowApprox(\\n        uint256 base,\\n        uint256 exp,\\n        uint256 precision\\n    ) internal pure returns (uint256) {\\n        // term 0:\\n        uint256 a = exp;\\n        (uint256 x, bool xneg) = bsubSign(base, BONE);\\n        uint256 term = BONE;\\n        uint256 sum = term;\\n        bool negative = false;\\n\\n        // term(k) = numer / denom\\n        //         = (product(a - i - 1, i=1-->k) * x^k) / (k!)\\n        // each iteration, multiply previous term by (a-(k-1)) * x / k\\n        // continue until term is less than precision\\n        for (uint256 i = 1; term >= precision; i++) {\\n            uint256 bigK = i * BONE;\\n            (uint256 c, bool cneg) = bsubSign(a, bsub(bigK, BONE));\\n            term = bmul(term, bmul(c, x));\\n            term = bdiv(term, bigK);\\n            if (term == 0) break;\\n\\n            if (xneg) negative = !negative;\\n            if (cneg) negative = !negative;\\n            if (negative) {\\n                sum = bsub(sum, term);\\n            } else {\\n                sum = badd(sum, term);\\n            }\\n        }\\n\\n        return sum;\\n    }\\n}\\n\",\"keccak256\":\"0x015e4af906575a6fff48089af01a4c683d8e9127179271f545b6e687d767d178\",\"license\":\"MIT\"},\"contracts/balancer/BPool.sol\":{\"content\":\"// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\nimport \\\"./BToken.sol\\\";\\nimport \\\"./BMath.sol\\\";\\n\\ncontract BPool is BBronze, BToken, BMath {\\n    struct Record {\\n        bool bound; // is token bound to pool\\n        uint256 index; // private\\n        uint256 denorm; // denormalized weight\\n        uint256 balance;\\n    }\\n\\n    event LOG_SWAP(\\n        address indexed caller,\\n        address indexed tokenIn,\\n        address indexed tokenOut,\\n        uint256 tokenAmountIn,\\n        uint256 tokenAmountOut\\n    );\\n\\n    event LOG_JOIN(address indexed caller, address indexed tokenIn, uint256 tokenAmountIn);\\n\\n    event LOG_EXIT(address indexed caller, address indexed tokenOut, uint256 tokenAmountOut);\\n\\n    event LOG_CALL(bytes4 indexed sig, address indexed caller, bytes data) anonymous;\\n\\n    modifier _logs_() {\\n        emit LOG_CALL(msg.sig, msg.sender, msg.data);\\n        _;\\n    }\\n\\n    modifier _lock_() {\\n        require(!_mutex, \\\"ERR_REENTRY\\\");\\n        _mutex = true;\\n        _;\\n        _mutex = false;\\n    }\\n\\n    modifier _viewlock_() {\\n        require(!_mutex, \\\"ERR_REENTRY\\\");\\n        _;\\n    }\\n\\n    bool private _mutex;\\n\\n    address private _factory; // BFactory address to push token exitFee to\\n    address private _controller; // has CONTROL role\\n    bool private _publicSwap; // true if PUBLIC can call SWAP functions\\n\\n    // `setSwapFee` and `finalize` require CONTROL\\n    // `finalize` sets `PUBLIC can SWAP`, `PUBLIC can JOIN`\\n    uint256 private _swapFee;\\n    bool private _finalized;\\n\\n    address[] private _tokens;\\n    mapping(address => Record) private _records;\\n    uint256 private _totalWeight;\\n\\n    constructor() {\\n        _controller = msg.sender;\\n        _factory = msg.sender;\\n        _swapFee = MIN_FEE;\\n        _publicSwap = false;\\n        _finalized = false;\\n    }\\n\\n    function isPublicSwap() external view returns (bool) {\\n        return _publicSwap;\\n    }\\n\\n    function isFinalized() external view returns (bool) {\\n        return _finalized;\\n    }\\n\\n    function isBound(address t) external view returns (bool) {\\n        return _records[t].bound;\\n    }\\n\\n    function getNumTokens() external view returns (uint256) {\\n        return _tokens.length;\\n    }\\n\\n    function getCurrentTokens() external view _viewlock_ returns (address[] memory tokens) {\\n        return _tokens;\\n    }\\n\\n    function getFinalTokens() external view _viewlock_ returns (address[] memory tokens) {\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\n        return _tokens;\\n    }\\n\\n    function getDenormalizedWeight(address token) external view _viewlock_ returns (uint256) {\\n        require(_records[token].bound, \\\"ERR_NOT_BOUND\\\");\\n        return _records[token].denorm;\\n    }\\n\\n    function getTotalDenormalizedWeight() external view _viewlock_ returns (uint256) {\\n        return _totalWeight;\\n    }\\n\\n    function getNormalizedWeight(address token) external view _viewlock_ returns (uint256) {\\n        require(_records[token].bound, \\\"ERR_NOT_BOUND\\\");\\n        uint256 denorm = _records[token].denorm;\\n        return bdiv(denorm, _totalWeight);\\n    }\\n\\n    function getBalance(address token) external view _viewlock_ returns (uint256) {\\n        require(_records[token].bound, \\\"ERR_NOT_BOUND\\\");\\n        return _records[token].balance;\\n    }\\n\\n    function getSwapFee() external view _viewlock_ returns (uint256) {\\n        return _swapFee;\\n    }\\n\\n    function getController() external view _viewlock_ returns (address) {\\n        return _controller;\\n    }\\n\\n    function setSwapFee(uint256 swapFee) external _logs_ _lock_ {\\n        require(!_finalized, \\\"ERR_IS_FINALIZED\\\");\\n        require(msg.sender == _controller, \\\"ERR_NOT_CONTROLLER\\\");\\n        require(swapFee >= MIN_FEE, \\\"ERR_MIN_FEE\\\");\\n        require(swapFee <= MAX_FEE, \\\"ERR_MAX_FEE\\\");\\n        _swapFee = swapFee;\\n    }\\n\\n    function setController(address manager) external _logs_ _lock_ {\\n        require(msg.sender == _controller, \\\"ERR_NOT_CONTROLLER\\\");\\n        _controller = manager;\\n    }\\n\\n    function setPublicSwap(bool public_) external _logs_ _lock_ {\\n        require(!_finalized, \\\"ERR_IS_FINALIZED\\\");\\n        require(msg.sender == _controller, \\\"ERR_NOT_CONTROLLER\\\");\\n        _publicSwap = public_;\\n    }\\n\\n    function finalize() external _logs_ _lock_ {\\n        require(msg.sender == _controller, \\\"ERR_NOT_CONTROLLER\\\");\\n        require(!_finalized, \\\"ERR_IS_FINALIZED\\\");\\n        require(_tokens.length >= MIN_BOUND_TOKENS, \\\"ERR_MIN_TOKENS\\\");\\n\\n        _finalized = true;\\n        _publicSwap = true;\\n\\n        _mintPoolShare(INIT_POOL_SUPPLY);\\n        _pushPoolShare(msg.sender, INIT_POOL_SUPPLY);\\n    }\\n\\n    function bind(\\n        address token,\\n        uint256 balance,\\n        uint256 denorm\\n    )\\n        external\\n        _logs_ // _lock_  Bind does not lock because it jumps to `rebind`, which does\\n    {\\n        require(msg.sender == _controller, \\\"ERR_NOT_CONTROLLER\\\");\\n        require(!_records[token].bound, \\\"ERR_IS_BOUND\\\");\\n        require(!_finalized, \\\"ERR_IS_FINALIZED\\\");\\n\\n        require(_tokens.length < MAX_BOUND_TOKENS, \\\"ERR_MAX_TOKENS\\\");\\n\\n        _records[token] = Record({\\n            bound: true,\\n            index: _tokens.length,\\n            denorm: 0, // balance and denorm will be validated\\n            balance: 0 // and set by `rebind`\\n        });\\n        _tokens.push(token);\\n        rebind(token, balance, denorm);\\n    }\\n\\n    function rebind(\\n        address token,\\n        uint256 balance,\\n        uint256 denorm\\n    ) public _logs_ _lock_ {\\n        require(msg.sender == _controller, \\\"ERR_NOT_CONTROLLER\\\");\\n        require(_records[token].bound, \\\"ERR_NOT_BOUND\\\");\\n        require(!_finalized, \\\"ERR_IS_FINALIZED\\\");\\n\\n        require(denorm >= MIN_WEIGHT, \\\"ERR_MIN_WEIGHT\\\");\\n        require(denorm <= MAX_WEIGHT, \\\"ERR_MAX_WEIGHT\\\");\\n        require(balance >= MIN_BALANCE, \\\"ERR_MIN_BALANCE\\\");\\n\\n        // Adjust the denorm and totalWeight\\n        uint256 oldWeight = _records[token].denorm;\\n        if (denorm > oldWeight) {\\n            _totalWeight = badd(_totalWeight, bsub(denorm, oldWeight));\\n            require(_totalWeight <= MAX_TOTAL_WEIGHT, \\\"ERR_MAX_TOTAL_WEIGHT\\\");\\n        } else if (denorm < oldWeight) {\\n            _totalWeight = bsub(_totalWeight, bsub(oldWeight, denorm));\\n        }\\n        _records[token].denorm = denorm;\\n\\n        // Adjust the balance record and actual token balance\\n        uint256 oldBalance = _records[token].balance;\\n        _records[token].balance = balance;\\n        if (balance > oldBalance) {\\n            _pullUnderlying(token, msg.sender, bsub(balance, oldBalance));\\n        } else if (balance < oldBalance) {\\n            // In this case liquidity is being withdrawn, so charge EXIT_FEE\\n            uint256 tokenBalanceWithdrawn = bsub(oldBalance, balance);\\n            uint256 tokenExitFee = bmul(tokenBalanceWithdrawn, EXIT_FEE);\\n            _pushUnderlying(token, msg.sender, bsub(tokenBalanceWithdrawn, tokenExitFee));\\n            _pushUnderlying(token, _factory, tokenExitFee);\\n        }\\n    }\\n\\n    function unbind(address token) external _logs_ _lock_ {\\n        require(msg.sender == _controller, \\\"ERR_NOT_CONTROLLER\\\");\\n        require(_records[token].bound, \\\"ERR_NOT_BOUND\\\");\\n        require(!_finalized, \\\"ERR_IS_FINALIZED\\\");\\n\\n        uint256 tokenBalance = _records[token].balance;\\n        uint256 tokenExitFee = bmul(tokenBalance, EXIT_FEE);\\n\\n        _totalWeight = bsub(_totalWeight, _records[token].denorm);\\n\\n        // Swap the token-to-unbind with the last token,\\n        // then delete the last token\\n        uint256 index = _records[token].index;\\n        uint256 last = _tokens.length - 1;\\n        _tokens[index] = _tokens[last];\\n        _records[_tokens[index]].index = index;\\n        _tokens.pop();\\n        _records[token] = Record({bound: false, index: 0, denorm: 0, balance: 0});\\n\\n        _pushUnderlying(token, msg.sender, bsub(tokenBalance, tokenExitFee));\\n        _pushUnderlying(token, _factory, tokenExitFee);\\n    }\\n\\n    // Absorb any tokens that have been sent to this contract into the pool\\n    function gulp(address token) external _logs_ _lock_ {\\n        require(_records[token].bound, \\\"ERR_NOT_BOUND\\\");\\n        _records[token].balance = IERC20Balancer(token).balanceOf(address(this));\\n    }\\n\\n    function getSpotPrice(address tokenIn, address tokenOut) external view _viewlock_ returns (uint256 spotPrice) {\\n        require(_records[tokenIn].bound, \\\"ERR_NOT_BOUND\\\");\\n        require(_records[tokenOut].bound, \\\"ERR_NOT_BOUND\\\");\\n        Record storage inRecord = _records[tokenIn];\\n        Record storage outRecord = _records[tokenOut];\\n        return calcSpotPrice(inRecord.balance, inRecord.denorm, outRecord.balance, outRecord.denorm, _swapFee);\\n    }\\n\\n    function getSpotPriceSansFee(address tokenIn, address tokenOut)\\n        external\\n        view\\n        _viewlock_\\n        returns (uint256 spotPrice)\\n    {\\n        require(_records[tokenIn].bound, \\\"ERR_NOT_BOUND\\\");\\n        require(_records[tokenOut].bound, \\\"ERR_NOT_BOUND\\\");\\n        Record storage inRecord = _records[tokenIn];\\n        Record storage outRecord = _records[tokenOut];\\n        return calcSpotPrice(inRecord.balance, inRecord.denorm, outRecord.balance, outRecord.denorm, 0);\\n    }\\n\\n    function joinPool(uint256 poolAmountOut, uint256[] calldata maxAmountsIn) external _logs_ _lock_ {\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\n\\n        uint256 poolTotal = totalSupply();\\n        uint256 ratio = bdiv(poolAmountOut, poolTotal);\\n        require(ratio != 0, \\\"ERR_MATH_APPROX\\\");\\n\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            address t = _tokens[i];\\n            uint256 bal = _records[t].balance;\\n            uint256 tokenAmountIn = bmul(ratio, bal);\\n            require(tokenAmountIn != 0, \\\"ERR_MATH_APPROX\\\");\\n            require(tokenAmountIn <= maxAmountsIn[i], \\\"ERR_LIMIT_IN\\\");\\n            _records[t].balance = badd(_records[t].balance, tokenAmountIn);\\n            emit LOG_JOIN(msg.sender, t, tokenAmountIn);\\n            _pullUnderlying(t, msg.sender, tokenAmountIn);\\n        }\\n        _mintPoolShare(poolAmountOut);\\n        _pushPoolShare(msg.sender, poolAmountOut);\\n    }\\n\\n    function exitPool(uint256 poolAmountIn, uint256[] calldata minAmountsOut) external _logs_ _lock_ {\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\n\\n        uint256 poolTotal = totalSupply();\\n        uint256 exitFee = bmul(poolAmountIn, EXIT_FEE);\\n        uint256 pAiAfterExitFee = bsub(poolAmountIn, exitFee);\\n        uint256 ratio = bdiv(pAiAfterExitFee, poolTotal);\\n        require(ratio != 0, \\\"ERR_MATH_APPROX\\\");\\n\\n        _pullPoolShare(msg.sender, poolAmountIn);\\n        _pushPoolShare(_factory, exitFee);\\n        _burnPoolShare(pAiAfterExitFee);\\n\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            address t = _tokens[i];\\n            uint256 bal = _records[t].balance;\\n            uint256 tokenAmountOut = bmul(ratio, bal);\\n            require(tokenAmountOut != 0, \\\"ERR_MATH_APPROX\\\");\\n            require(tokenAmountOut >= minAmountsOut[i], \\\"ERR_LIMIT_OUT\\\");\\n            _records[t].balance = bsub(_records[t].balance, tokenAmountOut);\\n            emit LOG_EXIT(msg.sender, t, tokenAmountOut);\\n            _pushUnderlying(t, msg.sender, tokenAmountOut);\\n        }\\n    }\\n\\n    function calcExitPool(uint256 poolAmountIn, uint256[] calldata minAmountsOut)\\n        external\\n        view\\n        returns (uint256[] memory)\\n    {\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\n\\n        uint256 poolTotal = totalSupply();\\n        uint256 exitFee = bmul(poolAmountIn, EXIT_FEE);\\n        uint256 pAiAfterExitFee = bsub(poolAmountIn, exitFee);\\n        uint256 ratio = bdiv(pAiAfterExitFee, poolTotal);\\n\\n        uint256[] memory _amounts = new uint256[](_tokens.length * 2);\\n\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            address t = _tokens[i];\\n            uint256 bal = _records[t].balance;\\n\\n            _amounts[i] = bmul(ratio, bal);\\n            _amounts[_tokens.length + i] = minAmountsOut[i];\\n            require(_amounts[i] >= minAmountsOut[i], \\\"ERR_LIMIT_OUT\\\");\\n        }\\n\\n        return _amounts;\\n    }\\n\\n    function swapExactAmountIn(\\n        address tokenIn,\\n        uint256 tokenAmountIn,\\n        address tokenOut,\\n        uint256 minAmountOut,\\n        uint256 maxPrice\\n    ) external _logs_ _lock_ returns (uint256 tokenAmountOut, uint256 spotPriceAfter) {\\n        require(_records[tokenIn].bound, \\\"ERR_NOT_BOUND\\\");\\n        require(_records[tokenOut].bound, \\\"ERR_NOT_BOUND\\\");\\n        require(_publicSwap, \\\"ERR_SWAP_NOT_PUBLIC\\\");\\n\\n        Record storage inRecord = _records[address(tokenIn)];\\n        Record storage outRecord = _records[address(tokenOut)];\\n\\n        require(tokenAmountIn <= bmul(inRecord.balance, MAX_IN_RATIO), \\\"ERR_MAX_IN_RATIO\\\");\\n\\n        uint256 spotPriceBefore =\\n            calcSpotPrice(inRecord.balance, inRecord.denorm, outRecord.balance, outRecord.denorm, _swapFee);\\n        require(spotPriceBefore <= maxPrice, \\\"ERR_BAD_LIMIT_PRICE\\\");\\n\\n        tokenAmountOut = calcOutGivenIn(\\n            inRecord.balance,\\n            inRecord.denorm,\\n            outRecord.balance,\\n            outRecord.denorm,\\n            tokenAmountIn,\\n            _swapFee\\n        );\\n        require(tokenAmountOut >= minAmountOut, \\\"ERR_LIMIT_OUT\\\");\\n\\n        inRecord.balance = badd(inRecord.balance, tokenAmountIn);\\n        outRecord.balance = bsub(outRecord.balance, tokenAmountOut);\\n\\n        spotPriceAfter = calcSpotPrice(\\n            inRecord.balance,\\n            inRecord.denorm,\\n            outRecord.balance,\\n            outRecord.denorm,\\n            _swapFee\\n        );\\n        require(spotPriceAfter >= spotPriceBefore, \\\"ERR_MATH_APPROX\\\");\\n        require(spotPriceAfter <= maxPrice, \\\"ERR_LIMIT_PRICE\\\");\\n        require(spotPriceBefore <= bdiv(tokenAmountIn, tokenAmountOut), \\\"ERR_MATH_APPROX\\\");\\n\\n        emit LOG_SWAP(msg.sender, tokenIn, tokenOut, tokenAmountIn, tokenAmountOut);\\n\\n        _pullUnderlying(tokenIn, msg.sender, tokenAmountIn);\\n        _pushUnderlying(tokenOut, msg.sender, tokenAmountOut);\\n\\n        return (tokenAmountOut, spotPriceAfter);\\n    }\\n\\n    function swapExactAmountOut(\\n        address tokenIn,\\n        uint256 maxAmountIn,\\n        address tokenOut,\\n        uint256 tokenAmountOut,\\n        uint256 maxPrice\\n    ) external _logs_ _lock_ returns (uint256 tokenAmountIn, uint256 spotPriceAfter) {\\n        require(_records[tokenIn].bound, \\\"ERR_NOT_BOUND\\\");\\n        require(_records[tokenOut].bound, \\\"ERR_NOT_BOUND\\\");\\n        require(_publicSwap, \\\"ERR_SWAP_NOT_PUBLIC\\\");\\n\\n        Record storage inRecord = _records[address(tokenIn)];\\n        Record storage outRecord = _records[address(tokenOut)];\\n\\n        require(tokenAmountOut <= bmul(outRecord.balance, MAX_OUT_RATIO), \\\"ERR_MAX_OUT_RATIO\\\");\\n\\n        uint256 spotPriceBefore =\\n            calcSpotPrice(inRecord.balance, inRecord.denorm, outRecord.balance, outRecord.denorm, _swapFee);\\n        require(spotPriceBefore <= maxPrice, \\\"ERR_BAD_LIMIT_PRICE\\\");\\n\\n        tokenAmountIn = calcInGivenOut(\\n            inRecord.balance,\\n            inRecord.denorm,\\n            outRecord.balance,\\n            outRecord.denorm,\\n            tokenAmountOut,\\n            _swapFee\\n        );\\n        require(tokenAmountIn <= maxAmountIn, \\\"ERR_LIMIT_IN\\\");\\n\\n        inRecord.balance = badd(inRecord.balance, tokenAmountIn);\\n        outRecord.balance = bsub(outRecord.balance, tokenAmountOut);\\n\\n        spotPriceAfter = calcSpotPrice(\\n            inRecord.balance,\\n            inRecord.denorm,\\n            outRecord.balance,\\n            outRecord.denorm,\\n            _swapFee\\n        );\\n        require(spotPriceAfter >= spotPriceBefore, \\\"ERR_MATH_APPROX\\\");\\n        require(spotPriceAfter <= maxPrice, \\\"ERR_LIMIT_PRICE\\\");\\n        require(spotPriceBefore <= bdiv(tokenAmountIn, tokenAmountOut), \\\"ERR_MATH_APPROX\\\");\\n\\n        emit LOG_SWAP(msg.sender, tokenIn, tokenOut, tokenAmountIn, tokenAmountOut);\\n\\n        _pullUnderlying(tokenIn, msg.sender, tokenAmountIn);\\n        _pushUnderlying(tokenOut, msg.sender, tokenAmountOut);\\n\\n        return (tokenAmountIn, spotPriceAfter);\\n    }\\n\\n    function joinswapExternAmountIn(\\n        address tokenIn,\\n        uint256 tokenAmountIn,\\n        uint256 minPoolAmountOut\\n    ) external _logs_ _lock_ returns (uint256 poolAmountOut) {\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\n        require(_records[tokenIn].bound, \\\"ERR_NOT_BOUND\\\");\\n        require(tokenAmountIn <= bmul(_records[tokenIn].balance, MAX_IN_RATIO), \\\"ERR_MAX_IN_RATIO\\\");\\n\\n        Record storage inRecord = _records[tokenIn];\\n\\n        poolAmountOut = calcPoolOutGivenSingleIn(\\n            inRecord.balance,\\n            inRecord.denorm,\\n            _totalSupply,\\n            _totalWeight,\\n            tokenAmountIn,\\n            _swapFee\\n        );\\n\\n        require(poolAmountOut >= minPoolAmountOut, \\\"ERR_LIMIT_OUT\\\");\\n\\n        inRecord.balance = badd(inRecord.balance, tokenAmountIn);\\n\\n        emit LOG_JOIN(msg.sender, tokenIn, tokenAmountIn);\\n\\n        _mintPoolShare(poolAmountOut);\\n        _pushPoolShare(msg.sender, poolAmountOut);\\n        _pullUnderlying(tokenIn, msg.sender, tokenAmountIn);\\n\\n        return poolAmountOut;\\n    }\\n\\n    function joinswapPoolAmountOut(\\n        address tokenIn,\\n        uint256 poolAmountOut,\\n        uint256 maxAmountIn\\n    ) external _logs_ _lock_ returns (uint256 tokenAmountIn) {\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\n        require(_records[tokenIn].bound, \\\"ERR_NOT_BOUND\\\");\\n\\n        Record storage inRecord = _records[tokenIn];\\n\\n        tokenAmountIn = calcSingleInGivenPoolOut(\\n            inRecord.balance,\\n            inRecord.denorm,\\n            _totalSupply,\\n            _totalWeight,\\n            poolAmountOut,\\n            _swapFee\\n        );\\n\\n        require(tokenAmountIn != 0, \\\"ERR_MATH_APPROX\\\");\\n        require(tokenAmountIn <= maxAmountIn, \\\"ERR_LIMIT_IN\\\");\\n\\n        require(tokenAmountIn <= bmul(_records[tokenIn].balance, MAX_IN_RATIO), \\\"ERR_MAX_IN_RATIO\\\");\\n\\n        inRecord.balance = badd(inRecord.balance, tokenAmountIn);\\n\\n        emit LOG_JOIN(msg.sender, tokenIn, tokenAmountIn);\\n\\n        _mintPoolShare(poolAmountOut);\\n        _pushPoolShare(msg.sender, poolAmountOut);\\n        _pullUnderlying(tokenIn, msg.sender, tokenAmountIn);\\n\\n        return tokenAmountIn;\\n    }\\n\\n    function exitswapPoolAmountIn(\\n        address tokenOut,\\n        uint256 poolAmountIn,\\n        uint256 minAmountOut\\n    ) external _logs_ _lock_ returns (uint256 tokenAmountOut) {\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\n        require(_records[tokenOut].bound, \\\"ERR_NOT_BOUND\\\");\\n\\n        Record storage outRecord = _records[tokenOut];\\n\\n        tokenAmountOut = calcSingleOutGivenPoolIn(\\n            outRecord.balance,\\n            outRecord.denorm,\\n            _totalSupply,\\n            _totalWeight,\\n            poolAmountIn,\\n            _swapFee\\n        );\\n\\n        require(tokenAmountOut >= minAmountOut, \\\"ERR_LIMIT_OUT\\\");\\n\\n        require(tokenAmountOut <= bmul(_records[tokenOut].balance, MAX_OUT_RATIO), \\\"ERR_MAX_OUT_RATIO\\\");\\n\\n        outRecord.balance = bsub(outRecord.balance, tokenAmountOut);\\n\\n        uint256 exitFee = bmul(poolAmountIn, EXIT_FEE);\\n\\n        emit LOG_EXIT(msg.sender, tokenOut, tokenAmountOut);\\n\\n        _pullPoolShare(msg.sender, poolAmountIn);\\n        _burnPoolShare(bsub(poolAmountIn, exitFee));\\n        _pushPoolShare(_factory, exitFee);\\n        _pushUnderlying(tokenOut, msg.sender, tokenAmountOut);\\n\\n        return tokenAmountOut;\\n    }\\n\\n    function exitswapExternAmountOut(\\n        address tokenOut,\\n        uint256 tokenAmountOut,\\n        uint256 maxPoolAmountIn\\n    ) external _logs_ _lock_ returns (uint256 poolAmountIn) {\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\n        require(_records[tokenOut].bound, \\\"ERR_NOT_BOUND\\\");\\n        require(tokenAmountOut <= bmul(_records[tokenOut].balance, MAX_OUT_RATIO), \\\"ERR_MAX_OUT_RATIO\\\");\\n\\n        Record storage outRecord = _records[tokenOut];\\n\\n        poolAmountIn = calcPoolInGivenSingleOut(\\n            outRecord.balance,\\n            outRecord.denorm,\\n            _totalSupply,\\n            _totalWeight,\\n            tokenAmountOut,\\n            _swapFee\\n        );\\n\\n        require(poolAmountIn != 0, \\\"ERR_MATH_APPROX\\\");\\n        require(poolAmountIn <= maxPoolAmountIn, \\\"ERR_LIMIT_IN\\\");\\n\\n        outRecord.balance = bsub(outRecord.balance, tokenAmountOut);\\n\\n        uint256 exitFee = bmul(poolAmountIn, EXIT_FEE);\\n\\n        emit LOG_EXIT(msg.sender, tokenOut, tokenAmountOut);\\n\\n        _pullPoolShare(msg.sender, poolAmountIn);\\n        _burnPoolShare(bsub(poolAmountIn, exitFee));\\n        _pushPoolShare(_factory, exitFee);\\n        _pushUnderlying(tokenOut, msg.sender, tokenAmountOut);\\n\\n        return poolAmountIn;\\n    }\\n\\n    // ==\\n    // 'Underlying' token-manipulation functions make external calls but are NOT locked\\n    // You must `_lock_` or otherwise ensure reentry-safety\\n\\n    function _pullUnderlying(\\n        address erc20,\\n        address from,\\n        uint256 amount\\n    ) internal {\\n        bool xfer = IERC20Balancer(erc20).transferFrom(from, address(this), amount);\\n        require(xfer, \\\"ERR_ERC20_FALSE\\\");\\n    }\\n\\n    function _pushUnderlying(\\n        address erc20,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool xfer = IERC20Balancer(erc20).transfer(to, amount);\\n        require(xfer, \\\"ERR_ERC20_FALSE\\\");\\n    }\\n\\n    function _pullPoolShare(address from, uint256 amount) internal {\\n        _pull(from, amount);\\n    }\\n\\n    function _pushPoolShare(address to, uint256 amount) internal {\\n        _push(to, amount);\\n    }\\n\\n    function _mintPoolShare(uint256 amount) internal {\\n        _mint(amount);\\n    }\\n\\n    function _burnPoolShare(uint256 amount) internal {\\n        _burn(amount);\\n    }\\n}\\n\",\"keccak256\":\"0x776103e689b42b4ab375106ed1183fd14fc7b842ff4eaff52de716cdb1689d92\",\"license\":\"MIT\"},\"contracts/balancer/BToken.sol\":{\"content\":\"// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\nimport \\\"./BNum.sol\\\";\\n\\ninterface IERC20Balancer {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address whom) external view returns (uint256);\\n\\n    function allowance(address src, address dst) external view returns (uint256);\\n\\n    function approve(address dst, uint256 amt) external returns (bool);\\n\\n    function transfer(address dst, uint256 amt) external returns (bool);\\n\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 amt\\n    ) external returns (bool);\\n}\\n\\ncontract BTokenBase is BNum {\\n    mapping(address => uint256) internal _balance;\\n    mapping(address => mapping(address => uint256)) internal _allowance;\\n    uint256 internal _totalSupply;\\n\\n    event Approval(address indexed src, address indexed dst, uint256 amt);\\n    event Transfer(address indexed src, address indexed dst, uint256 amt);\\n\\n    function _mint(uint256 amt) internal {\\n        _balance[address(this)] = badd(_balance[address(this)], amt);\\n        _totalSupply = badd(_totalSupply, amt);\\n        emit Transfer(address(0), address(this), amt);\\n    }\\n\\n    function _burn(uint256 amt) internal {\\n        require(_balance[address(this)] >= amt, \\\"ERR_INSUFFICIENT_BAL\\\");\\n        _balance[address(this)] = bsub(_balance[address(this)], amt);\\n        _totalSupply = bsub(_totalSupply, amt);\\n        emit Transfer(address(this), address(0), amt);\\n    }\\n\\n    function _move(\\n        address src,\\n        address dst,\\n        uint256 amt\\n    ) internal {\\n        require(_balance[src] >= amt, \\\"ERR_INSUFFICIENT_BAL\\\");\\n        _balance[src] = bsub(_balance[src], amt);\\n        _balance[dst] = badd(_balance[dst], amt);\\n        emit Transfer(src, dst, amt);\\n    }\\n\\n    function _push(address to, uint256 amt) internal {\\n        _move(address(this), to, amt);\\n    }\\n\\n    function _pull(address from, uint256 amt) internal {\\n        _move(from, address(this), amt);\\n    }\\n}\\n\\ncontract BToken is BTokenBase, IERC20Balancer {\\n    string private _name = \\\"Balancer Pool Token\\\";\\n    string private _symbol = \\\"BPT\\\";\\n    uint8 private _decimals = 18;\\n\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    function allowance(address src, address dst) external view override returns (uint256) {\\n        return _allowance[src][dst];\\n    }\\n\\n    function balanceOf(address whom) external view override returns (uint256) {\\n        return _balance[whom];\\n    }\\n\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function approve(address dst, uint256 amt) external override returns (bool) {\\n        _allowance[msg.sender][dst] = amt;\\n        emit Approval(msg.sender, dst, amt);\\n        return true;\\n    }\\n\\n    function increaseApproval(address dst, uint256 amt) external returns (bool) {\\n        _allowance[msg.sender][dst] = badd(_allowance[msg.sender][dst], amt);\\n        emit Approval(msg.sender, dst, _allowance[msg.sender][dst]);\\n        return true;\\n    }\\n\\n    function decreaseApproval(address dst, uint256 amt) external returns (bool) {\\n        uint256 oldValue = _allowance[msg.sender][dst];\\n        if (amt > oldValue) {\\n            _allowance[msg.sender][dst] = 0;\\n        } else {\\n            _allowance[msg.sender][dst] = bsub(oldValue, amt);\\n        }\\n        emit Approval(msg.sender, dst, _allowance[msg.sender][dst]);\\n        return true;\\n    }\\n\\n    function transfer(address dst, uint256 amt) external override returns (bool) {\\n        _move(msg.sender, dst, amt);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 amt\\n    ) external override returns (bool) {\\n        require(msg.sender == src || amt <= _allowance[src][msg.sender], \\\"ERR_BTOKEN_BAD_CALLER\\\");\\n        _move(src, dst, amt);\\n        if (msg.sender != src && _allowance[src][msg.sender] != uint256(-1)) {\\n            _allowance[src][msg.sender] = bsub(_allowance[src][msg.sender], amt);\\n            emit Approval(msg.sender, dst, _allowance[src][msg.sender]);\\n        }\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x96a133234ad4896507bb420719cd57c33b17499c87558016adc9fc1b30d78eca\",\"license\":\"MIT\"},\"contracts/libraries/CalculateLinesToBPoolOdds.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\nimport \\\"./SafeMathUint256.sol\\\";\\nimport \\\"./SafeMathInt256.sol\\\";\\n\\nabstract contract CalculateLinesToBPoolOdds {\\n    using SafeMathUint256 for uint256;\\n    using SafeMathInt256 for int256;\\n\\n    uint256 constant MAX_BPOOL_WEIGHT = 50e18;\\n\\n    function ratioOdds(uint256[] memory _proportions) internal pure returns (uint256[] memory _odds) {\\n        uint256 _total = sum(_proportions);\\n\\n        _odds = new uint256[](_proportions.length);\\n        for (uint256 i = 0; i < _proportions.length; i++) {\\n            _odds[i] = (MAX_BPOOL_WEIGHT).mul(_proportions[i]).div(_total);\\n            require(_odds[i] >= 1e18, \\\"min outcome weight is 2%\\\");\\n        }\\n    }\\n\\n    function sum(uint256[] memory _numbers) private pure returns (uint256 _sum) {\\n        for (uint256 i = 0; i < _numbers.length; i++) {\\n            _sum += _numbers[i];\\n        }\\n    }\\n\\n    function evenOdds(bool _invalid, uint256 _outcomes) internal pure returns (uint256[] memory _odds) {\\n        uint256 _size = _outcomes + (_invalid ? 1 : 0);\\n        _odds = new uint256[](_size);\\n\\n        if (_invalid) _odds[0] = 1e18; // 2%\\n\\n        uint256 _each = (_invalid ? 49e18 : 50e18) / _outcomes;\\n        for (uint256 i = _invalid ? 1 : 0; i < _size; i++) {\\n            _odds[i] = _each;\\n        }\\n    }\\n\\n    function oddsFromLines(int256 _moneyline1, int256 _moneyline2) internal pure returns (uint256[] memory _odds) {\\n        uint256 _odds1 = __calcLineToOdds(_moneyline1);\\n        uint256 _odds2 = __calcLineToOdds(_moneyline2);\\n\\n        uint256 _total = _odds1 + _odds2;\\n\\n        _odds1 = uint256(49e18).mul(_odds1).div(_total);\\n        _odds2 = uint256(49e18).mul(_odds2).div(_total);\\n\\n        // Moneyline odds are too skewed: would have under 2% odds.\\n        require(_odds1 >= 1e18);\\n        require(_odds2 >= 1e18);\\n\\n        _odds = new uint256[](3);\\n        _odds[0] = 1e18; // Invalid, 2%\\n        _odds[1] = _odds1;\\n        _odds[2] = _odds2;\\n    }\\n\\n    function __calcLineToOdds(int256 _line) internal pure returns (uint256) {\\n        if (_line < 0) {\\n            // favored\\n            uint256 _posLine = uint256(-_line);\\n            return _posLine.mul(49e18).div(_posLine.add(100)); // 49e18 * _line / (_line + 100)\\n        } else {\\n            // underdog\\n            return uint256(4900e18).div(uint256(_line).add(100)); // 49e18 * 100 / (_line + 100)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa83e6eb562ea996e8bf34b6e9b5ac854e2be240f420a33b9c3612401e040f069\",\"license\":\"MIT\"},\"contracts/libraries/IERC20Full.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IERC20Full is IERC20 {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x228083482ab7326cdb12ae8cb7dcd8d3b805651e35c08c29a7b0a54e0e97fbb0\",\"license\":\"MIT\"},\"contracts/libraries/IOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\ninterface IOwnable {\\n    function getOwner() external view returns (address);\\n\\n    function transferOwnership(address _newOwner) external returns (bool);\\n}\\n\",\"keccak256\":\"0xace52430f7fd5468e14cb5a8f91f66daa9518d8393b257a3d01c5899d4828000\",\"license\":\"MIT\"},\"contracts/libraries/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\nimport \\\"./IOwnable.sol\\\";\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\\"user permissions\\\".\\n */\\nabstract contract Ownable is IOwnable {\\n    address internal owner;\\n\\n    /**\\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n     * account.\\n     */\\n    constructor() {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    function getOwner() public view override returns (address) {\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n     * @param _newOwner The address to transfer ownership to.\\n     */\\n    function transferOwnership(address _newOwner) public override onlyOwner returns (bool) {\\n        require(_newOwner != address(0));\\n        onTransferOwnership(owner, _newOwner);\\n        owner = _newOwner;\\n        return true;\\n    }\\n\\n    // Subclasses of this token may want to send additional logs through the centralized Augur log emitter contract\\n    function onTransferOwnership(address, address) internal virtual;\\n}\\n\",\"keccak256\":\"0x65f237e09612478773b06aa74b21364f4ae25b6c419793be79ab9aa0258e57ef\",\"license\":\"MIT\"},\"contracts/libraries/SafeMathInt256.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\n/**\\n * @title SafeMathInt256\\n * @dev Int256 math operations with safety checks that throw on error\\n */\\nlibrary SafeMathInt256 {\\n    // Signed ints with n bits can range from -2**(n-1) to (2**(n-1) - 1)\\n    int256 private constant INT256_MIN = -2**(255);\\n    int256 private constant INT256_MAX = (2**(255) - 1);\\n\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a * b;\\n        require(a == 0 || c / a == b);\\n        return c;\\n    }\\n\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        // No need to check for dividing by 0 -- Solidity automatically throws on division by 0\\n        int256 c = a / b;\\n        return c;\\n    }\\n\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        require(((a >= 0) && (b >= a - INT256_MAX)) || ((a < 0) && (b <= a - INT256_MIN)));\\n        return a - b;\\n    }\\n\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        require(((a >= 0) && (b <= INT256_MAX - a)) || ((a < 0) && (b >= INT256_MIN - a)));\\n        return a + b;\\n    }\\n\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        if (a <= b) {\\n            return a;\\n        } else {\\n            return b;\\n        }\\n    }\\n\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        if (a >= b) {\\n            return a;\\n        } else {\\n            return b;\\n        }\\n    }\\n\\n    function abs(int256 a) internal pure returns (int256) {\\n        if (a < 0) {\\n            return -a;\\n        }\\n        return a;\\n    }\\n\\n    function getInt256Min() internal pure returns (int256) {\\n        return INT256_MIN;\\n    }\\n\\n    function getInt256Max() internal pure returns (int256) {\\n        return INT256_MAX;\\n    }\\n\\n    // Float [fixed point] Operations\\n    function fxpMul(\\n        int256 a,\\n        int256 b,\\n        int256 base\\n    ) internal pure returns (int256) {\\n        return div(mul(a, b), base);\\n    }\\n\\n    function fxpDiv(\\n        int256 a,\\n        int256 b,\\n        int256 base\\n    ) internal pure returns (int256) {\\n        return div(mul(a, base), b);\\n    }\\n\\n    function sqrt(int256 y) internal pure returns (int256 z) {\\n        if (y > 3) {\\n            int256 x = (y + 1) / 2;\\n            z = y;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x714309025fa79f257ce215aca9bd5bd2b4c1cc5b4e14579fb815da218f8350a5\",\"license\":\"MIT\"},\"contracts/libraries/SafeMathUint256.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\n/**\\n * @title SafeMathUint256\\n * @dev Uint256 math operations with safety checks that throw on error\\n */\\nlibrary SafeMathUint256 {\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b);\\n\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a);\\n        return a - b;\\n    }\\n\\n    function subS(\\n        uint256 a,\\n        uint256 b,\\n        string memory message\\n    ) internal pure returns (uint256) {\\n        require(b <= a, message);\\n        return a - b;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a);\\n        return c;\\n    }\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a <= b) {\\n            return a;\\n        } else {\\n            return b;\\n        }\\n    }\\n\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a >= b) {\\n            return a;\\n        } else {\\n            return b;\\n        }\\n    }\\n\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        if (y > 3) {\\n            uint256 x = (y + 1) / 2;\\n            z = y;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n\\n    function getUint256Min() internal pure returns (uint256) {\\n        return 0;\\n    }\\n\\n    function getUint256Max() internal pure returns (uint256) {\\n        // 2 ** 256 - 1\\n        return 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\\n    }\\n\\n    function isMultipleOf(uint256 a, uint256 b) internal pure returns (bool) {\\n        return a % b == 0;\\n    }\\n\\n    // Float [fixed point] Operations\\n    function fxpMul(\\n        uint256 a,\\n        uint256 b,\\n        uint256 base\\n    ) internal pure returns (uint256) {\\n        return div(mul(a, b), base);\\n    }\\n\\n    function fxpDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 base\\n    ) internal pure returns (uint256) {\\n        return div(mul(a, base), b);\\n    }\\n}\\n\",\"keccak256\":\"0x96f8c0fa44dfb1d34495acebab8f6385d50a34132bd28b02a6589a976f869a87\",\"license\":\"MIT\"},\"contracts/libraries/Versioned.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\nabstract contract Versioned {\\n    string internal version;\\n\\n    constructor(string memory _version) {\\n        version = _version;\\n    }\\n\\n    function getVersion() public view returns (string memory) {\\n        return version;\\n    }\\n}\\n\",\"keccak256\":\"0x06500e2a2aefc31595428cc6eb2b0d601fe853d316a41f53621ac8b809441c5f\",\"license\":\"MIT\"},\"contracts/turbo/AbstractMarketFactoryV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"../libraries/IERC20Full.sol\\\";\\nimport \\\"../balancer/BPool.sol\\\";\\nimport \\\"./TurboShareTokenFactory.sol\\\";\\nimport \\\"./FeePot.sol\\\";\\n\\nabstract contract AbstractMarketFactoryV3 is TurboShareTokenFactory, Ownable {\\n    using SafeMathUint256 for uint256;\\n\\n    event MarketCreated(uint256 id, string[] names, uint256[] initialOdds);\\n    event MarketResolved(uint256 id, address winner, uint256 winnerIndex, string winnerName);\\n    event MarketActivated(uint256 id);\\n\\n    event SharesMinted(uint256 id, uint256 amount, address receiver);\\n    event SharesBurned(uint256 id, uint256 amount, address receiver);\\n    event WinningsClaimed(\\n        uint256 id,\\n        address winningOutcome,\\n        uint256 winningIndex,\\n        string winningName,\\n        uint256 amount,\\n        uint256 settlementFee,\\n        uint256 payout,\\n        address indexed receiver\\n    );\\n\\n    IERC20Full public collateral;\\n    FeePot public feePot;\\n\\n    // fees are out of 1e18 and only apply to new markets\\n    uint256 public stakerFee;\\n    uint256 public settlementFee;\\n    uint256 public protocolFee;\\n\\n    address public protocol; // collects protocol fees\\n\\n    uint256 public accumulatedProtocolFee = 0;\\n    // settlement address => amount of collateral\\n    mapping(address => uint256) public accumulatedSettlementFees;\\n\\n    // How many shares equals one collateral.\\n    // Necessary to account for math errors from small numbers in balancer.\\n    // shares = collateral / shareFactor\\n    // collateral = shares * shareFactor\\n    uint256 public shareFactor;\\n\\n    struct Market {\\n        address settlementAddress;\\n        OwnedERC20[] shareTokens;\\n        OwnedERC20 winner;\\n        uint256 winnerIndex;\\n        uint256 settlementFee;\\n        uint256 protocolFee;\\n        uint256 stakerFee;\\n        uint256 creationTimestamp;\\n        uint256[] initialOdds;\\n        bool active; // false if not ready to use or if resolved\\n    }\\n    Market[] internal markets;\\n\\n    uint256 private constant MAX_UINT = 2**256 - 1;\\n\\n    constructor(\\n        address _owner,\\n        IERC20Full _collateral,\\n        uint256 _shareFactor,\\n        FeePot _feePot,\\n        uint256[3] memory _fees, // staker, settlement, protocol\\n        address _protocol\\n    ) {\\n        owner = _owner; // controls fees for new markets\\n        collateral = _collateral;\\n        shareFactor = _shareFactor;\\n        feePot = _feePot;\\n        stakerFee = _fees[0];\\n        settlementFee = _fees[1];\\n        protocolFee = _fees[2];\\n        protocol = _protocol;\\n\\n        _collateral.approve(address(_feePot), MAX_UINT);\\n\\n        // First market is always empty so that marketid zero means \\\"no market\\\"\\n        markets.push(makeEmptyMarket());\\n    }\\n\\n    // Returns an empty struct if the market doesn't exist.\\n    // Can check market existence before calling this by comparing _id against markets.length.\\n    // Can check market existence of the return struct by checking that shareTokens[0] isn't the null address\\n    function getMarket(uint256 _id) public view returns (Market memory) {\\n        if (_id >= markets.length) {\\n            return makeEmptyMarket();\\n        } else {\\n            return markets[_id];\\n        }\\n    }\\n\\n    function marketCount() public view returns (uint256) {\\n        return markets.length;\\n    }\\n\\n    // Returns factory-specific details about a market.\\n    // function getMarketDetails(uint256 _id) public view returns (MarketDetails memory);\\n\\n    function mintShares(\\n        uint256 _id,\\n        uint256 _shareToMint,\\n        address _receiver\\n    ) public {\\n        require(markets.length > _id);\\n        require(markets[_id].active);\\n\\n        uint256 _cost = calcCost(_shareToMint);\\n        collateral.transferFrom(msg.sender, address(this), _cost);\\n\\n        Market memory _market = markets[_id];\\n        for (uint256 _i = 0; _i < _market.shareTokens.length; _i++) {\\n            _market.shareTokens[_i].trustedMint(_receiver, _shareToMint);\\n        }\\n\\n        emit SharesMinted(_id, _shareToMint, _receiver);\\n    }\\n\\n    function burnShares(\\n        uint256 _id,\\n        uint256 _sharesToBurn,\\n        address _receiver\\n    ) public returns (uint256) {\\n        require(markets.length > _id);\\n        require(markets[_id].active);\\n\\n        Market memory _market = markets[_id];\\n        for (uint256 _i = 0; _i < _market.shareTokens.length; _i++) {\\n            // errors if sender doesn't have enough shares\\n            _market.shareTokens[_i].trustedBurn(msg.sender, _sharesToBurn);\\n        }\\n\\n        uint256 _payout = calcCost(_sharesToBurn);\\n        uint256 _protocolFee = _payout.mul(_market.protocolFee).div(10**18);\\n        uint256 _stakerFee = _payout.mul(_market.stakerFee).div(10**18);\\n        _payout = _payout.sub(_protocolFee).sub(_stakerFee);\\n\\n        accumulatedProtocolFee += _protocolFee;\\n        collateral.transfer(_receiver, _payout);\\n        feePot.depositFees(_stakerFee);\\n\\n        emit SharesBurned(_id, _sharesToBurn, msg.sender);\\n        return _payout;\\n    }\\n\\n    function claimWinnings(uint256 _id, address _receiver) public returns (uint256) {\\n        require(isMarketResolved(_id), \\\"market unresolved\\\");\\n\\n        Market memory _market = markets[_id];\\n        uint256 _winningShares = _market.winner.trustedBurnAll(msg.sender);\\n        _winningShares = (_winningShares / shareFactor) * shareFactor; // remove unusable dust\\n\\n        uint256 _payout = calcCost(_winningShares); // will fail if there are no winnings to claim\\n        uint256 _settlementFee = _payout.mul(_market.settlementFee).div(10**18);\\n        _payout = _payout.sub(_settlementFee);\\n\\n        accumulatedSettlementFees[_market.settlementAddress] += _settlementFee;\\n        collateral.transfer(_receiver, _payout);\\n\\n        uint256 _winningIndex = _market.winnerIndex;\\n        string memory _winningName = _market.winner.name();\\n\\n        emit WinningsClaimed(\\n            _id,\\n            address(_market.winner),\\n            _winningIndex,\\n            _winningName,\\n            _winningShares,\\n            _settlementFee,\\n            _payout,\\n            _receiver\\n        );\\n        return _payout;\\n    }\\n\\n    function claimManyWinnings(uint256[] memory _ids, address _receiver) public returns (uint256) {\\n        uint256 _totalWinnings = 0;\\n        for (uint256 i = 0; i < _ids.length; i++) {\\n            _totalWinnings = _totalWinnings.add(claimWinnings(_ids[i], _receiver));\\n        }\\n        return _totalWinnings;\\n    }\\n\\n    function claimSettlementFees(address _receiver) public returns (uint256) {\\n        uint256 _fees = accumulatedSettlementFees[msg.sender];\\n        if (_fees > 0) {\\n            accumulatedSettlementFees[msg.sender] = 0;\\n            collateral.transfer(_receiver, _fees);\\n        }\\n        return _fees;\\n    }\\n\\n    function claimProtocolFees() public returns (uint256) {\\n        require(msg.sender == protocol || msg.sender == address(this));\\n        uint256 _fees = accumulatedProtocolFee;\\n        if (_fees > 0) {\\n            accumulatedProtocolFee = 0;\\n            collateral.transfer(protocol, _fees);\\n        }\\n        return _fees;\\n    }\\n\\n    function setSettlementFee(uint256 _newFee) external onlyOwner {\\n        settlementFee = _newFee;\\n    }\\n\\n    function setStakerFee(uint256 _newFee) external onlyOwner {\\n        stakerFee = _newFee;\\n    }\\n\\n    function setProtocolFee(uint256 _newFee) external onlyOwner {\\n        protocolFee = _newFee;\\n    }\\n\\n    function setProtocol(address _newProtocol, bool _claimFirst) external onlyOwner {\\n        if (_claimFirst) {\\n            claimProtocolFees();\\n        }\\n        protocol = _newProtocol;\\n    }\\n\\n    function startMarket(\\n        address _settlementAddress,\\n        string[] memory _names,\\n        uint256[] memory _initialOdds,\\n        bool _active\\n    ) internal returns (uint256 _marketId) {\\n        _marketId = markets.length;\\n        markets.push(\\n            Market(\\n                _settlementAddress,\\n                createShareTokens(_names, address(this)),\\n                OwnedERC20(0),\\n                0,\\n                settlementFee,\\n                protocolFee,\\n                stakerFee,\\n                block.timestamp,\\n                _initialOdds,\\n                _active\\n            )\\n        );\\n        emit MarketCreated(_marketId, _names, _initialOdds);\\n        if (_active) {\\n            emit MarketActivated(_marketId);\\n        }\\n    }\\n\\n    function activateMarket(uint256 _marketId) internal {\\n        markets[_marketId].active = true;\\n        emit MarketActivated(_marketId);\\n    }\\n\\n    function makeEmptyMarket() private pure returns (Market memory) {\\n        OwnedERC20[] memory _tokens = new OwnedERC20[](0);\\n        uint256[] memory _initialOdds = new uint256[](0);\\n        return Market(address(0), _tokens, OwnedERC20(0), 0, 0, 0, 0, 0, _initialOdds, false);\\n    }\\n\\n    function endMarket(uint256 _marketId, uint256 _winningOutcome) internal {\\n        OwnedERC20 _winner = markets[_marketId].shareTokens[_winningOutcome];\\n        markets[_marketId].winner = _winner;\\n        markets[_marketId].active = false;\\n        markets[_marketId].winnerIndex = _winningOutcome;\\n        string memory _outcomeName = _winner.name();\\n        emit MarketResolved(_marketId, address(_winner), _winningOutcome, _outcomeName);\\n    }\\n\\n    function isMarketResolved(uint256 _id) public view returns (bool) {\\n        Market memory _market = markets[_id];\\n        return _market.winner != OwnedERC20(0);\\n    }\\n\\n    // shares => collateral\\n    // Shares must be both greater than (or equal to) and divisible by shareFactor.\\n    function calcCost(uint256 _shares) public view returns (uint256) {\\n        require(_shares >= shareFactor && _shares % shareFactor == 0);\\n        return _shares / shareFactor;\\n    }\\n\\n    // collateral => shares\\n    function calcShares(uint256 _collateralIn) public view returns (uint256) {\\n        return _collateralIn * shareFactor;\\n    }\\n\\n    function onTransferOwnership(address, address) internal override {}\\n}\\n\",\"keccak256\":\"0xaf5f1a9891f229774e5365010cc79544ea9c28889fd86d7c752bf5b66c5ba2f2\",\"license\":\"MIT\"},\"contracts/turbo/CryptoMarketFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"../libraries/IERC20Full.sol\\\";\\nimport \\\"../balancer/BPool.sol\\\";\\nimport \\\"./AbstractMarketFactoryV3.sol\\\";\\nimport \\\"./FeePot.sol\\\";\\nimport \\\"../libraries/SafeMathInt256.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.7/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"../libraries/CalculateLinesToBPoolOdds.sol\\\";\\nimport \\\"../libraries/Versioned.sol\\\";\\n\\ncontract CryptoMarketFactory is AbstractMarketFactoryV3, CalculateLinesToBPoolOdds, Versioned {\\n    using SafeMathUint256 for uint256;\\n    using SafeMathInt256 for int256;\\n\\n    event CoinAdded(uint256 indexed id, string name);\\n\\n    event NewPrices(uint256 indexed nextResolutionTime, uint256[] markets, uint256[] prices);\\n\\n    struct Coin {\\n        string name;\\n        AggregatorV3Interface priceFeed;\\n        uint256 price;\\n        uint8 imprecision; // how many decimals to truncate\\n        uint256[1] currentMarkets;\\n    }\\n    Coin[] public coins;\\n\\n    enum MarketType {\\n        PriceUpDown // 0\\n    }\\n    enum PriceUpDownOutcome {\\n        Above, // 0\\n        NotAbove // 1\\n    }\\n    struct MarketDetails {\\n        MarketType marketType;\\n        uint256 coinIndex;\\n        uint256 creationPrice;\\n        uint256 resolutionPrice;\\n    }\\n    // MarketId => MarketDetails\\n    mapping(uint256 => MarketDetails) internal marketDetails;\\n\\n    address public linkNode; // market creator and resolver\\n\\n    uint256 public nextResolutionTime;\\n\\n    constructor(\\n        address _owner,\\n        IERC20Full _collateral,\\n        uint256 _shareFactor,\\n        FeePot _feePot,\\n        uint256[3] memory _fees,\\n        address _protocol,\\n        address _linkNode\\n    ) AbstractMarketFactoryV3(_owner, _collateral, _shareFactor, _feePot, _fees, _protocol) Versioned(\\\"v1.2.0\\\") {\\n        linkNode = _linkNode;\\n\\n        string memory _name = \\\"\\\";\\n        coins.push(makeCoin(_name, AggregatorV3Interface(0), 0));\\n    }\\n\\n    function getMarketDetails(uint256 _marketId) public view returns (MarketDetails memory) {\\n        return marketDetails[_marketId];\\n    }\\n\\n    // NOTE: Trusts the owner not to add a coin twice.\\n    // Returns the coin index.\\n    function addCoin(\\n        string calldata _name,\\n        AggregatorV3Interface _priceFeed,\\n        uint8 _imprecision\\n    ) external onlyOwner returns (uint256 _coinIndex) {\\n        Coin memory _coin = makeCoin(_name, _priceFeed, _imprecision);\\n        _coinIndex = coins.length;\\n        coins.push(_coin);\\n        emit CoinAdded(_coinIndex, _name);\\n    }\\n\\n    function getCoin(uint256 _coinIndex) public view returns (Coin memory _coin) {\\n        _coin = coins[_coinIndex];\\n    }\\n\\n    function getCoins() public view returns (Coin[] memory _coins) {\\n        _coins = new Coin[](coins.length);\\n        // Skip first coin because it's always the zeroed-out fake coin.\\n        for (uint256 i = 1; i < coins.length; i++) {\\n            _coins[i] = coins[i];\\n        }\\n    }\\n\\n    // Iterates over all coins.\\n    // If markets do not exist for coin, create them.\\n    // Unless _nextResolutionTime is zero; then do not create new markets.\\n    // If markets for coin exist and are ready to resolve, resolve them and create new markets.\\n    // Else, error.\\n    //\\n    // Assume that _roundIds has a dummy value at index 0, and is 1 indexed like the\\n    // coins array.\\n    function createAndResolveMarkets(uint80[] calldata _roundIds, uint256 _nextResolutionTime) public {\\n        require(msg.sender == linkNode, \\\"Only link node can create markets\\\");\\n        // If market creation was stopped then it can be started again.\\n        // If market creation wasn't stopped then you must wait for market end time to resolve.\\n        require(block.timestamp >= nextResolutionTime, \\\"Must wait for market resolution\\\");\\n        require(_roundIds.length == coins.length, \\\"Must specify one roundId for each coin\\\");\\n\\n        uint256 _resolutionTime = nextResolutionTime;\\n        nextResolutionTime = _nextResolutionTime;\\n\\n        uint256[] memory _prices = new uint256[](coins.length - 1);\\n        uint256[] memory _newMarketIds = new uint256[](coins.length - 1);\\n        // Start at 1 to skip the fake Coin in the 0 index\\n        for (uint256 i = 1; i < coins.length; i++) {\\n            (_prices[i - 1], _newMarketIds[i - 1]) = createAndResolveMarketsForCoin(i, _resolutionTime, _roundIds[i]);\\n        }\\n\\n        emit NewPrices(nextResolutionTime, _newMarketIds, _prices);\\n    }\\n\\n    function createAndResolveMarketsForCoin(\\n        uint256 _coinIndex,\\n        uint256 _resolutionTime,\\n        uint80 _roundId\\n    ) internal returns (uint256 _price, uint256 _newMarketId) {\\n        Coin memory _coin = coins[_coinIndex];\\n        (uint256 _fullPrice, uint256 _newPrice) = getPrice(_coin, _roundId, _resolutionTime);\\n\\n        // resolve markets\\n        if (_coin.currentMarkets[uint256(MarketType.PriceUpDown)] != 0) {\\n            resolvePriceUpDownMarket(_coin, _newPrice, _fullPrice);\\n        }\\n\\n        // update price only AFTER resolution\\n        coins[_coinIndex].price = _newPrice;\\n\\n        // link node sets nextResolutionTime to zero to signify \\\"do not create markets after resolution\\\"\\n        if (nextResolutionTime == 0) {\\n            return (0, 0);\\n        }\\n\\n        // create markets\\n        _newMarketId = createPriceUpDownMarket(_coinIndex, linkNode, _newPrice);\\n        coins[_coinIndex].currentMarkets[uint256(MarketType.PriceUpDown)] = _newMarketId;\\n\\n        return (_newPrice, _newMarketId);\\n    }\\n\\n    function resolvePriceUpDownMarket(\\n        Coin memory _coin,\\n        uint256 _newPrice,\\n        uint256 _fullPrice\\n    ) internal {\\n        uint256 _marketId = _coin.currentMarkets[uint256(MarketType.PriceUpDown)];\\n\\n        uint256 _winningOutcome;\\n        if (_newPrice > _coin.price) {\\n            _winningOutcome = uint256(PriceUpDownOutcome.Above);\\n        } else {\\n            _winningOutcome = uint256(PriceUpDownOutcome.NotAbove);\\n        }\\n\\n        endMarket(_marketId, _winningOutcome);\\n        marketDetails[_marketId].resolutionPrice = _fullPrice;\\n    }\\n\\n    function createPriceUpDownMarket(\\n        uint256 _coinIndex,\\n        address _creator,\\n        uint256 _newPrice\\n    ) internal returns (uint256 _id) {\\n        string[] memory _outcomes = new string[](2);\\n        _outcomes[uint256(PriceUpDownOutcome.Above)] = \\\"Above\\\";\\n        _outcomes[uint256(PriceUpDownOutcome.NotAbove)] = \\\"Not Above\\\";\\n\\n        _id = startMarket(_creator, _outcomes, evenOdds(false, 2), true);\\n        marketDetails[_id] = MarketDetails(MarketType.PriceUpDown, _coinIndex, _newPrice, 0);\\n    }\\n\\n    // Returns the price based on a few factors.\\n    // If _roundId is zero then it returns the latest price.\\n    // Else, it returns the price for that round,\\n    //       but errors if that isn't the first round after the resolution time.\\n    // The price is then altered to match the desired precision.\\n    function getPrice(\\n        Coin memory _coin,\\n        uint80 _roundId,\\n        uint256 _resolutionTime\\n    ) internal view returns (uint256 _fullPrice, uint256 _truncatedPrice) {\\n        if (_roundId == 0) {\\n            (, int256 _rawPrice, , , ) = _coin.priceFeed.latestRoundData();\\n            require(_rawPrice >= 0, \\\"Price from feed is negative\\\");\\n            _fullPrice = uint256(_rawPrice);\\n        } else {\\n            (, int256 _rawPrice, , uint256 updatedAt, ) = _coin.priceFeed.getRoundData(_roundId);\\n            require(_rawPrice >= 0, \\\"Price from feed is negative\\\");\\n            require(updatedAt >= _resolutionTime, \\\"Price hasn't been updated yet\\\");\\n\\n            // if resolution time is zero then market creation was stopped, so the previous round doesn't matter\\n            if (_resolutionTime != 0) {\\n                (, , , uint256 _previousRoundTime, ) = _coin.priceFeed.getRoundData(previousRound(_roundId));\\n                require(_previousRoundTime < _resolutionTime, \\\"Must use first round after resolution time\\\");\\n            }\\n\\n            _fullPrice = uint256(_rawPrice);\\n        }\\n\\n        // The precision is how many decimals the price has. Zero is dollars, 2 includes cents, 3 is tenths of a cent, etc.\\n        // Our resolution rules want a certain precision. Like BTC is to the dollar and MATIC is to the cent.\\n        // If somehow the decimals are larger than the desired precision then add zeroes to the end to meet the precision.\\n        // This does not change the resolution outcome but does guard against decimals() changing and therefore altering the basis.\\n\\n        uint8 _precision = _coin.priceFeed.decimals(); // probably constant but that isn't guaranteed, so query each time\\n        if (_precision > _coin.imprecision) {\\n            uint8 _truncate = _precision - _coin.imprecision;\\n            _truncatedPrice = _fullPrice / (10**_truncate);\\n        } else if (_precision < _coin.imprecision) {\\n            uint8 _greaten = _coin.imprecision - _precision;\\n            _truncatedPrice = _fullPrice * (10**_greaten);\\n        } else {\\n            _truncatedPrice = _fullPrice;\\n        }\\n\\n        // Round up because that cleanly fits Above/Not-Above.\\n        if (_truncatedPrice != _fullPrice) {\\n            _truncatedPrice += 1;\\n        }\\n    }\\n\\n    function makeCoin(\\n        string memory _name,\\n        AggregatorV3Interface _priceFeed,\\n        uint8 _imprecision\\n    ) internal pure returns (Coin memory _coin) {\\n        uint256[1] memory _currentMarkets = [uint256(0)];\\n        _coin = Coin(_name, _priceFeed, 0, _imprecision, _currentMarkets);\\n    }\\n\\n    // The roundId is the encoding of two parts: the phase and the phase-specific round id.\\n    // To find the previous roundId:\\n    // 1. extract the phase and phase-specific round (I call these _phaseId and _roundId)\\n    // 2. decrement the phase-specific round\\n    // 3. re-encode the phase and phase-specific round.\\n    uint256 private constant PHASE_OFFSET = 64;\\n\\n    function previousRound(uint80 _fullRoundId) internal pure returns (uint80) {\\n        uint256 _phaseId = uint256(uint16(_fullRoundId >> PHASE_OFFSET));\\n        uint64 _roundId = uint64(_fullRoundId) - 1;\\n        return uint80((_phaseId << PHASE_OFFSET) | _roundId);\\n    }\\n}\\n\",\"keccak256\":\"0x39c794237d935445c58d0f3ed18cd74bd35fc5ff7cb7b6f0aa0fca61a70a9e67\",\"license\":\"MIT\"},\"contracts/turbo/FeePot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"../libraries/SafeMathUint256.sol\\\";\\nimport \\\"../libraries/IERC20Full.sol\\\";\\n\\ncontract FeePot is ERC20 {\\n    using SafeMathUint256 for uint256;\\n\\n    uint256 internal constant magnitude = 2**128;\\n\\n    IERC20Full public collateral;\\n    IERC20Full public reputationToken;\\n\\n    uint256 public magnifiedFeesPerShare;\\n\\n    mapping(address => uint256) public magnifiedFeesCorrections;\\n    mapping(address => uint256) public storedFees;\\n\\n    uint256 public feeReserve;\\n\\n    constructor(IERC20Full _collateral, IERC20Full _reputationToken)\\n        ERC20(\\n            string(abi.encodePacked(\\\"S_\\\", _reputationToken.symbol())),\\n            string(abi.encodePacked(\\\"S_\\\", _reputationToken.symbol()))\\n        )\\n    {\\n        collateral = _collateral;\\n        reputationToken = _reputationToken;\\n\\n        require(_collateral != IERC20Full(0));\\n    }\\n\\n    function depositFees(uint256 _amount) public returns (bool) {\\n        collateral.transferFrom(msg.sender, address(this), _amount);\\n        uint256 _totalSupply = totalSupply(); // after collateral.transferFrom to prevent reentrancy causing stale totalSupply\\n        if (_totalSupply == 0) {\\n            feeReserve = feeReserve.add(_amount);\\n            return true;\\n        }\\n        if (feeReserve > 0) {\\n            _amount = _amount.add(feeReserve);\\n            feeReserve = 0;\\n        }\\n        magnifiedFeesPerShare = magnifiedFeesPerShare.add((_amount).mul(magnitude) / _totalSupply);\\n        return true;\\n    }\\n\\n    function withdrawableFeesOf(address _owner) public view returns (uint256) {\\n        return earnedFeesOf(_owner).add(storedFees[_owner]);\\n    }\\n\\n    function earnedFeesOf(address _owner) public view returns (uint256) {\\n        uint256 _ownerBalance = balanceOf(_owner);\\n        uint256 _magnifiedFees = magnifiedFeesPerShare.mul(_ownerBalance);\\n        return _magnifiedFees.sub(magnifiedFeesCorrections[_owner]) / magnitude;\\n    }\\n\\n    function _transfer(\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) internal override {\\n        storedFees[_from] = storedFees[_from].add(earnedFeesOf(_from));\\n        super._transfer(_from, _to, _amount);\\n\\n        magnifiedFeesCorrections[_from] = magnifiedFeesPerShare.mul(balanceOf(_from));\\n        magnifiedFeesCorrections[_to] = magnifiedFeesCorrections[_to].add(magnifiedFeesPerShare.mul(_amount));\\n    }\\n\\n    function stake(uint256 _amount) external returns (bool) {\\n        reputationToken.transferFrom(msg.sender, address(this), _amount);\\n        _mint(msg.sender, _amount);\\n        magnifiedFeesCorrections[msg.sender] = magnifiedFeesCorrections[msg.sender].add(\\n            magnifiedFeesPerShare.mul(_amount)\\n        );\\n        return true;\\n    }\\n\\n    function exit(uint256 _amount) external returns (bool) {\\n        redeemInternal(msg.sender);\\n        _burn(msg.sender, _amount);\\n        reputationToken.transfer(msg.sender, _amount);\\n        magnifiedFeesCorrections[msg.sender] = magnifiedFeesPerShare.mul(balanceOf(msg.sender));\\n        return true;\\n    }\\n\\n    function redeem() public returns (bool) {\\n        redeemInternal(msg.sender);\\n        magnifiedFeesCorrections[msg.sender] = magnifiedFeesPerShare.mul(balanceOf(msg.sender));\\n        return true;\\n    }\\n\\n    function redeemInternal(address _account) internal {\\n        uint256 _withdrawableFees = withdrawableFeesOf(_account);\\n        if (_withdrawableFees > 0) {\\n            storedFees[_account] = 0;\\n            collateral.transfer(_account, _withdrawableFees);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4189f90e0c0d061643abdea7d166a863801cfedb488a99b018ddc52ff9bdd3b0\",\"license\":\"MIT\"},\"contracts/turbo/OwnedShareToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"../libraries/Ownable.sol\\\";\\n\\ncontract OwnedERC20 is ERC20, Ownable {\\n    constructor(\\n        string memory name_,\\n        string memory symbol_,\\n        address _owner\\n    ) ERC20(name_, symbol_) {\\n        owner = _owner;\\n    }\\n\\n    function trustedTransfer(\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) external onlyOwner {\\n        _transfer(_from, _to, _amount);\\n    }\\n\\n    function trustedMint(address _target, uint256 _amount) external onlyOwner {\\n        _mint(_target, _amount);\\n    }\\n\\n    function trustedBurn(address _target, uint256 _amount) external onlyOwner {\\n        _burn(_target, _amount);\\n    }\\n\\n    function trustedBurnAll(address _target) external onlyOwner returns (uint256) {\\n        uint256 _balance = balanceOf(_target);\\n        _burn(_target, _balance);\\n        return _balance;\\n    }\\n\\n    function onTransferOwnership(address, address) internal override {}\\n}\\n\",\"keccak256\":\"0x1a60d8f5bb07018b446bf34cdc626ab309c5d2db2eaf75575622090af92c0086\",\"license\":\"MIT\"},\"contracts/turbo/TurboShareTokenFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"./OwnedShareToken.sol\\\";\\n\\nabstract contract TurboShareTokenFactory {\\n    function createShareTokens(string[] memory _names, address _owner) internal returns (OwnedERC20[] memory) {\\n        uint256 _numOutcomes = _names.length;\\n        OwnedERC20[] memory _tokens = new OwnedERC20[](_numOutcomes);\\n\\n        for (uint256 _i = 0; _i < _numOutcomes; _i++) {\\n            _tokens[_i] = new OwnedERC20(_names[_i], _names[_i], _owner);\\n        }\\n        return _tokens;\\n    }\\n}\\n\\nabstract contract TurboShareTokenFactoryV1 {\\n    function createShareTokens(\\n        string[] memory _names,\\n        string[] memory _symbols,\\n        address _owner\\n    ) internal returns (OwnedERC20[] memory) {\\n        uint256 _numOutcomes = _names.length;\\n        OwnedERC20[] memory _tokens = new OwnedERC20[](_numOutcomes);\\n\\n        for (uint256 _i = 0; _i < _numOutcomes; _i++) {\\n            _tokens[_i] = new OwnedERC20(_names[_i], _symbols[_i], _owner);\\n        }\\n        return _tokens;\\n    }\\n}\\n\",\"keccak256\":\"0x124906d94f6cae4049f50a2b71ddb9b8c0f0da8739b5c698166126bfe3173f8c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620002445760003560e01c80638ce744261162000141578063cc87adea11620000bd578063da3115881162000087578063da31158814620004bc578063e5678dfa14620004e2578063eb44fdd314620004f9578063ec979082146200051f578063f2fde38b14620005295762000244565b8063cc87adea146200047a578063d4b6838e1462000491578063d5da4f1d146200049b578063d8dfeb4514620004b25762000244565b8063992c9079116200010b578063992c90791462000400578063a544a62c1462000417578063b06c1ba31462000421578063b0e21e8a1462000447578063c661065714620004515762000244565b80638ce7442614620003be5780638e0ed19314620003c857806390cb4dce14620003df57806397eef18714620003e95762000244565b80634a7d036911620001d15780637641ab01116200019b5780637641ab011462000372578063787dce3d146200037c5780637a5c327814620003935780637d1d7fb814620003aa578063893d20e814620003b45762000244565b80634a7d0369146200031f5780634b2d9ffc14620003295780634c9f66c7146200033357806353ac55f5146200034c5762000244565b806332ecabe9116200021357806332ecabe914620002c357806335a9cdad14620002da578063473a6d5214620002f157806349a4d93414620003085762000244565b80630d8e6e2c146200024957806313c390ef146200026b578063221fff8114620002845780632cfcfa3a146200029d575b600080fd5b6200025362000540565b604051620002629190620035ec565b60405180910390f35b62000275620005da565b6040516200026291906200351c565b6200029b62000295366004620032c7565b62000791565b005b620002b4620002ae3660046200314c565b62000ab4565b60405162000262919062003932565b6200029b620002d436600462002fb8565b62000c15565b620002b4620002eb366004620032c7565b62000c63565b620002b4620003023660046200326e565b62001092565b620002b46200031936600462002f99565b620010d0565b620002b4620010e2565b620002b4620011ac565b6200033d620011b2565b604051620002629190620034cb565b620003636200035d3660046200326e565b620011c1565b604051620002629190620035b2565b620002b462001341565b6200029b6200038d3660046200326e565b62001347565b6200029b620003a4366004620030b3565b62001364565b620002b46200154e565b6200033d62001554565b6200033d62001563565b620002b4620003d936600462002f99565b62001572565b620002b46200162e565b6200029b620003fa3660046200326e565b62001634565b620002b462000411366004620032a0565b62001651565b620002b462001a60565b62000438620004323660046200326e565b62001a66565b60405162000262919062003836565b620002b462001aca565b62000468620004623660046200326e565b62001ad0565b60405162000262949392919062003601565b620002b46200048b3660046200326e565b62001ba9565b6200033d62001bb0565b6200029b620004ac3660046200326e565b62001bbf565b6200033d62001bdc565b620004d3620004cd3660046200326e565b62001beb565b60405162000262919062003821565b620002b4620004f336600462002ff5565b62001d22565b620005106200050a3660046200326e565b62001d70565b60405162000262919062003870565b620002b462001f05565b620003636200053a36600462002f99565b62001f0b565b600b8054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015620005d05780601f10620005a457610100808354040283529160200191620005d0565b820191906000526020600020905b815481529060010190602001808311620005b257829003601f168201915b5050505050905090565b600c5460609067ffffffffffffffff81118015620005f757600080fd5b506040519080825280602002602001820160405280156200063557816020015b6200062162002d21565b815260200190600190039081620006175790505b50905060015b600c548110156200078d57600c81815481106200065457fe5b600091825260209182902060408051600593909302909101805460026001821615610100026000190190911604601f8101859004909402830160c090810190925260a0830184815292939092849290918491840182828015620006fb5780601f10620006cf57610100808354040283529160200191620006fb565b820191906000526020600020905b815481529060010190602001808311620006dd57829003601f168201915b50505091835250506001828101546001600160a01b03166020808401919091526002840154604080850191909152600385015460ff1660608501528051918201908190526080909301929091600485019182845b8154815260200190600101908083116200074f575050505050815250508282815181106200077957fe5b60209081029190910101526001016200063b565b5090565b600a548310620007a057600080fd5b600a8381548110620007ae57fe5b600091825260209091206009600a90920201015460ff16620007cf57600080fd5b6000620007dc8362001092565b6001546040516323b872dd60e01b81529192506001600160a01b0316906323b872dd906200081390339030908690600401620034df565b602060405180830381600087803b1580156200082e57600080fd5b505af115801562000843573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200086991906200312d565b506000600a85815481106200087a57fe5b60009182526020918290206040805161014081018252600a90930290910180546001600160a01b03168352600181018054835181870281018701909452808452939491938583019392830182828015620008fe57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311620008df575b505050505081526020016002820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b03168152602001600382015481526020016004820154815260200160058201548152602001600682015481526020016007820154815260200160088201805480602002602001604051908101604052809291908181526020018280548015620009b957602002820191906000526020600020905b815481526020019060010190808311620009a4575b50505091835250506009919091015460ff161515602090910152905060005b81602001515181101562000a6f5781602001518181518110620009f757fe5b60200260200101516001600160a01b031663c024cd2685876040518363ffffffff1660e01b815260040162000a2e92919062003503565b600060405180830381600087803b15801562000a4957600080fd5b505af115801562000a5e573d6000803e3d6000fd5b505060019092019150620009d89050565b507fd81c0442e10068a9818f3aa093c9ccb804584690df572d7df3da2d892a6973f285858560405162000aa59392919062003a39565b60405180910390a15050505050565b600080546001600160a01b0316331462000acd57600080fd5b600062000b1486868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525088925087915062001f759050565b600c80546001810182556000919091528151805191945091925082917fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c760058602019162000b6a91839160209091019062002d63565b506020820151600182810180546001600160a01b0319166001600160a01b039093169290921790915560408301516002830155606083015160038301805460ff191660ff909216919091179055608083015162000bcd9160048401919062002df4565b505050817fd9d3ec4c7486dfb74c1b8e96ca18907b1683022eeef70494bcc437873c1cfa18878760405162000c04929190620035bd565b60405180910390a250949350505050565b6000546001600160a01b0316331462000c2d57600080fd5b801562000c405762000c3e620010e2565b505b50600680546001600160a01b0319166001600160a01b0392909216919091179055565b600a54600090841062000c7557600080fd5b600a848154811062000c8357fe5b600091825260209091206009600a90920201015460ff1662000ca457600080fd5b6000600a858154811062000cb457fe5b60009182526020918290206040805161014081018252600a90930290910180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801562000d3857602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831162000d19575b505050505081526020016002820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b0316815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782015481526020016008820180548060200260200160405190810160405280929190818152602001828054801562000df357602002820191906000526020600020905b81548152602001906001019080831162000dde575b50505091835250506009919091015460ff161515602090910152905060005b81602001515181101562000ea9578160200151818151811062000e3157fe5b60200260200101516001600160a01b03166342986e1333876040518363ffffffff1660e01b815260040162000e6892919062003503565b600060405180830381600087803b15801562000e8357600080fd5b505af115801562000e98573d6000803e3d6000fd5b50506001909201915062000e129050565b50600062000eb78562001092565b9050600062000ee8670de0b6b3a764000062000ee18560a001518562001fc190919063ffffffff16565b9062001ff3565b9050600062000f12670de0b6b3a764000062000ee18660c001518662001fc190919063ffffffff16565b905062000f2c8162000f25858562002009565b9062002009565b600780548401905560015460405163a9059cbb60e01b81529194506001600160a01b03169063a9059cbb9062000f69908990879060040162003503565b602060405180830381600087803b15801562000f8457600080fd5b505af115801562000f99573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000fbf91906200312d565b50600254604051630ebdac0960e41b81526001600160a01b039091169063ebdac0909062000ff290849060040162003932565b602060405180830381600087803b1580156200100d57600080fd5b505af115801562001022573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200104891906200312d565b507fb6fdb729b2ed801daf629f0ab713e4a7a73619505790f6f27fd92d6f2c9688d78888336040516200107e9392919062003a39565b60405180910390a150909695505050505050565b60006009548210158015620010b157506009548281620010ae57fe5b06155b620010bb57600080fd5b6009548281620010c757fe5b0490505b919050565b60086020526000908152604090205481565b6006546000906001600160a01b0316331480620010fe57503330145b6200110857600080fd5b6007548015620011a757600060075560015460065460405163a9059cbb60e01b81526001600160a01b039283169263a9059cbb926200114f92911690859060040162003503565b602060405180830381600087803b1580156200116a57600080fd5b505af11580156200117f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620011a591906200312d565b505b905090565b60035481565b6002546001600160a01b031681565b600080600a8381548110620011d257fe5b60009182526020918290206040805161014081018252600a90930290910180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156200125657602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831162001237575b505050505081526020016002820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016003820154815260200160048201548152602001600582015481526020016006820154815260200160078201548152602001600882018054806020026020016040519081016040528092919081815260200182805480156200131157602002820191906000526020600020905b815481526020019060010190808311620012fc575b50505091835250506009919091015460ff161515602090910152604001516001600160a01b031615159392505050565b60095481565b6000546001600160a01b031633146200135f57600080fd5b600555565b600e546001600160a01b031633146200139a5760405162461bcd60e51b8152600401620013919062003701565b60405180910390fd5b600f54421015620013bf5760405162461bcd60e51b8152600401620013919062003680565b600c548214620013e35760405162461bcd60e51b8152600401620013919062003742565b600f805490829055600c546000906000190167ffffffffffffffff811180156200140c57600080fd5b5060405190808252806020026020018201604052801562001437578160200160208202803683370190505b50600c549091506000906000190167ffffffffffffffff811180156200145c57600080fd5b5060405190808252806020026020018201604052801562001487578160200160208202803683370190505b50905060015b600c548110156200150757620014c88185898985818110620014ab57fe5b9050602002016020810190620014c2919062003302565b6200201f565b846001840381518110620014d857fe5b60200260200101846001850381518110620014ef57fe5b6020908102919091010191909152526001016200148d565b50600f547f9cc38710842a8839fc5a048a7ca3d507324bfdae4d23cf8e8fa77b270f43104b82846040516200153e92919062003580565b60405180910390a2505050505050565b60045481565b6000546001600160a01b031690565b6006546001600160a01b031681565b33600090815260086020526040812054801562001628573360009081526008602052604080822091909155600154905163a9059cbb60e01b81526001600160a01b039091169063a9059cbb90620015d0908690859060040162003503565b602060405180830381600087803b158015620015eb57600080fd5b505af115801562001600573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200162691906200312d565b505b92915050565b600f5481565b6000546001600160a01b031633146200164c57600080fd5b600355565b60006200165e83620011c1565b6200167d5760405162461bcd60e51b81526004016200139190620037f6565b6000600a84815481106200168d57fe5b60009182526020918290206040805161014081018252600a90930290910180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156200171157602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311620016f2575b505050505081526020016002820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b03168152602001600382015481526020016004820154815260200160058201548152602001600682015481526020016007820154815260200160088201805480602002602001604051908101604052809291908181526020018280548015620017cc57602002820191906000526020600020905b815481526020019060010190808311620017b7575b50505091835250506009919091015460ff1615156020909101526040808201519051631c4a5de160e21b81529192506000916001600160a01b039091169063712977849062001820903390600401620034cb565b602060405180830381600087803b1580156200183b57600080fd5b505af115801562001850573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001876919062003287565b905060095460095482816200188757fe5b040290506000620018988262001092565b90506000620018c2670de0b6b3a764000062000ee186608001518562001fc190919063ffffffff16565b9050620018d0828262002009565b84516001600160a01b0390811660009081526008602052604090819020805485019055600154905163a9059cbb60e01b8152929450169063a9059cbb906200191f908990869060040162003503565b602060405180830381600087803b1580156200193a57600080fd5b505af11580156200194f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200197591906200312d565b50600084606001519050600085604001516001600160a01b03166306fdde036040518163ffffffff1660e01b815260040160006040518083038186803b158015620019bf57600080fd5b505afa158015620019d4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620019fe9190810190620031e4565b9050876001600160a01b03167f76ea0c89f1eef8b1ac3908910bbe5ee5120ff997f6b3bcc900659973e6a2ff128a886040015185858a898b60405162001a4b979695949392919062003974565b60405180910390a25091979650505050505050565b60075481565b62001a7062002e24565b6000828152600d6020526040908190208151608081019092528054829060ff16801562001a9957fe5b801562001aa257fe5b8152600182015460208201526002820154604082015260039091015460609091015292915050565b60055481565b600c818154811062001ae157600080fd5b60009182526020918290206005919091020180546040805160026001841615610100026000190190931692909204601f81018590048502830185019091528082529193509183919083018282801562001b7e5780601f1062001b525761010080835404028352916020019162001b7e565b820191906000526020600020905b81548152906001019060200180831162001b6057829003601f168201915b505050506001830154600284015460039094015492936001600160a01b039091169290915060ff1684565b6009540290565b600e546001600160a01b031681565b6000546001600160a01b0316331462001bd757600080fd5b600455565b6001546001600160a01b031681565b62001bf562002d21565b600c828154811062001c0357fe5b600091825260209182902060408051600593909302909101805460026001821615610100026000190190911604601f8101859004909402830160c090810190925260a083018481529293909284929091849184018282801562001caa5780601f1062001c7e5761010080835404028352916020019162001caa565b820191906000526020600020905b81548152906001019060200180831162001c8c57829003601f168201915b50505091835250506001828101546001600160a01b03166020808401919091526002840154604080850191909152600385015460ff1660608501528051918201908190526080909301929091600485019182845b81548152602001906001019080831162001cfe575050505050815250509050919050565b600080805b845181101562001d685762001d5d62001d5586838151811062001d4657fe5b60200260200101518662001651565b839062002202565b915060010162001d27565b509392505050565b62001d7a62002e4d565b600a54821062001d965762001d8e62002215565b9050620010cb565b600a828154811062001da457fe5b60009182526020918290206040805161014081018252600a90930290910180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801562001e2857602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831162001e09575b505050505081526020016002820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b0316815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782015481526020016008820180548060200260200160405190810160405280929190818152602001828054801562001ee357602002820191906000526020600020905b81548152602001906001019080831162001ece575b50505091835250506009919091015460ff1615156020909101529050620010cb565b600a5490565b600080546001600160a01b0316331462001f2457600080fd5b6001600160a01b03821662001f3857600080fd5b60005462001f50906001600160a01b03168362002283565b50600080546001600160a01b0383166001600160a01b03199091161790556001919050565b62001f7f62002d21565b5060408051602080820183526000808352835160a0810185529687526001600160a01b03909516908601529084019290925260ff166060830152608082015290565b60008262001fd25750600062001628565b8282028284828162001fe057fe5b041462001fec57600080fd5b9392505050565b6000808284816200200057fe5b04949350505050565b6000828211156200201957600080fd5b50900390565b6000806000600c86815481106200203257fe5b600091825260209182902060408051600593909302909101805460026001821615610100026000190190911604601f8101859004909402830160c090810190925260a0830184815292939092849290918491840182828015620020d95780601f10620020ad57610100808354040283529160200191620020d9565b820191906000526020600020905b815481529060010190602001808311620020bb57829003601f168201915b50505091835250506001828101546001600160a01b03166020808401919091526002840154604080850191909152600385015460ff1660608501528051918201908190526080909301929091600485019182845b8154815260200190600101908083116200212d5750505050508152505090506000806200215c83878962002287565b6080850151519193509150156200217a576200217a838284620025df565b80600c89815481106200218957fe5b6000918252602090912060026005909202010155600f54620021b55760008094509450505050620021fa565b600e54620021cf9089906001600160a01b03168362002625565b935083600c8981548110620021e057fe5b600091825260208220600591909102016004010155935050505b935093915050565b60008282018381101562001fec57600080fd5b6200221f62002e4d565b506040805160008082526020820181815261018083018452928201818152606083018390526080830182905260a0830182905260c0830182905260e08301829052610100830182905261012083018290526101408301939093526101609091015290565b5050565b60008069ffffffffffffffffffff84166200234957600085602001516001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015620022dc57600080fd5b505afa158015620022f1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002317919062003321565b5050509150506000811215620023415760405162461bcd60e51b8152600401620013919062003788565b9150620024e7565b60008086602001516001600160a01b0316639a6fc8f5876040518263ffffffff1660e01b81526004016200237e919062003a58565b60a06040518083038186803b1580156200239757600080fd5b505afa158015620023ac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620023d2919062003321565b509350509250506000821215620023fd5760405162461bcd60e51b8152600401620013919062003788565b84811015620024205760405162461bcd60e51b81526004016200139190620037bf565b8415620024e357600087602001516001600160a01b0316639a6fc8f562002447896200276a565b6040518263ffffffff1660e01b815260040162002465919062003a58565b60a06040518083038186803b1580156200247e57600080fd5b505afa15801562002493573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620024b9919062003321565b509350505050858110620024e15760405162461bcd60e51b81526004016200139190620036b7565b505b5091505b600085602001516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156200252757600080fd5b505afa1580156200253c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200256291906200337d565b9050856060015160ff168160ff16111562002598576060860151810360ff8116600a0a84816200258e57fe5b04925050620025c7565b856060015160ff168160ff161015620025c357606086015181900360ff16600a0a83029150620025c7565b8291505b828214620025d6576001820191505b50935093915050565b6080830151516040840151600090841115620025fe5750600062002602565b5060015b6200260e82826200278c565b506000908152600d60205260409020600301555050565b60408051600280825260608201909252600091829190816020015b6060815260200190600190039081620026405790505060408051808201909152600581526441626f766560d81b6020820152909150816000815181106200268357fe5b6020026020010181905250604051806040016040528060098152602001684e6f742041626f766560b81b81525081600180811115620026be57fe5b81518110620026c957fe5b6020026020010181905250620026f08482620026e86000600262002936565b600162002a4a565b604080516080810190915290925080600081526020808201889052604080830187905260006060909301839052858352600d909152902081518154829060ff191660018380156200273d57fe5b02179055506020820151600182015560408201516002820155606090910151600390910155509392505050565b69ffff0000000000000000811667ffffffffffffffff60001983011617919050565b6000600a83815481106200279c57fe5b90600052602060002090600a02016001018281548110620027b957fe5b600091825260209091200154600a80546001600160a01b039092169250829185908110620027e357fe5b90600052602060002090600a020160020160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506000600a84815481106200282857fe5b90600052602060002090600a020160090160006101000a81548160ff02191690831515021790555081600a84815481106200285f57fe5b90600052602060002090600a0201600301819055506000816001600160a01b03166306fdde036040518163ffffffff1660e01b815260040160006040518083038186803b158015620028b057600080fd5b505afa158015620028c5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620028ef9190810190620031e4565b90507f8008bbeee2e3c054e71d4965b4c22b41a2287cd6cc67c714bf918b538338be5f848385846040516200292894939291906200393b565b60405180910390a150505050565b6060600083620029485760006200294b565b60015b60ff16830190508067ffffffffffffffff811180156200296a57600080fd5b5060405190808252806020026020018201604052801562002995578160200160208202803683370190505b5091508315620029c357670de0b6b3a764000082600081518110620029b657fe5b6020026020010181815250505b60008385620029dc576802b5e3af16b1880000620029e7565b6802a802f8630a2400005b68ffffffffffffffffff1681620029fa57fe5b04905060008562002a0d57600062002a10565b60015b60ff1690505b8281101562002a41578184828151811062002a2d57fe5b602090810291909101015260010162002a16565b50505092915050565b600a80546040805161014081019091526001600160a01b03871681529091906020810162002a79873062002c2c565b815260006020808301829052604083018290526004546060840152600554608084015260035460a08401524260c084015260e0830188905286151561010090930192909252835460018082018655948252908290208351600a9092020180546001600160a01b0319166001600160a01b039092169190911781558282015180519394919362002b119392850192919091019062002eb4565b5060408201516002820180546001600160a01b0319166001600160a01b03909216919091179055606082015160038201556080820151600482015560a0820151600582015560c0820151600682015560e08201516007820155610100820151805162002b8891600884019160209091019062002f0c565b5061012091909101516009909101805460ff19169115159190911790556040517f037fdac9e4b37ad8b184ce958d7b275e578c9e03d4cfbc51aa75de25fdb6bbec9062002bdb90839087908790620039c2565b60405180910390a1811562002c24577fee570fee9d8debeedea533b8cdfde6b9d9995b915869d4d10d350e75a9bf0f888160405162002c1b919062003932565b60405180910390a15b949350505050565b815160609060008167ffffffffffffffff8111801562002c4b57600080fd5b5060405190808252806020026020018201604052801562002c76578160200160208202803683370190505b50905060005b8281101562002d185785818151811062002c9257fe5b602002602001015186828151811062002ca757fe5b60200260200101518660405162002cbe9062002f49565b62002ccc939291906200363e565b604051809103906000f08015801562002ce9573d6000803e3d6000fd5b5082828151811062002cf757fe5b6001600160a01b039092166020928302919091019091015260010162002c7c565b50949350505050565b6040518060a001604052806060815260200160006001600160a01b0316815260200160008152602001600060ff16815260200162002d5e62002f57565b905290565b828054600181600116156101000203166002900490600052602060002090601f01602090048101928262002d9b576000855562002de6565b82601f1062002db657805160ff191683800117855562002de6565b8280016001018555821562002de6579182015b8281111562002de657825182559160200191906001019062002dc9565b506200078d92915062002f75565b826001810192821562002de6579160200282018281111562002de657825182559160200191906001019062002dc9565b604080516080810190915280600081526020016000815260200160008152602001600081525090565b60405180610140016040528060006001600160a01b031681526020016060815260200160006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160008152602001606081526020016000151581525090565b82805482825590600052602060002090810192821562002de6579160200282015b8281111562002de657825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019062002ed5565b82805482825590600052602060002090810192821562002de6579160200282018281111562002de657825182559160200191906001019062002dc9565b6111f38062003b1983390190565b60405180602001604052806001906020820280368337509192915050565b5b808211156200078d576000815560010162002f76565b8035620010cb8162003ac7565b60006020828403121562002fab578081fd5b813562001fec8162003ac7565b6000806040838503121562002fcb578081fd5b823562002fd88162003ac7565b9150602083013562002fea8162003ae0565b809150509250929050565b6000806040838503121562003008578182fd5b823567ffffffffffffffff8082111562003020578384fd5b818501915085601f83011262003034578384fd5b81356020828211156200304357fe5b80820292506200305581840162003a6f565b8281528181019085830185870184018b101562003070578889fd5b8896505b848710156200309457803583526001969096019591830191830162003074565b509650620030a6905087820162002f8c565b9450505050509250929050565b600080600060408486031215620030c8578081fd5b833567ffffffffffffffff80821115620030e0578283fd5b818601915086601f830112620030f4578283fd5b81358181111562003103578384fd5b876020808302850101111562003117578384fd5b6020928301989097509590910135949350505050565b6000602082840312156200313f578081fd5b815162001fec8162003ae0565b6000806000806060858703121562003162578081fd5b843567ffffffffffffffff808211156200317a578283fd5b818701915087601f8301126200318e578283fd5b8135818111156200319d578384fd5b886020828501011115620031af578384fd5b60209283019650945050850135620031c78162003ac7565b91506040850135620031d98162003aef565b939692955090935050565b600060208284031215620031f6578081fd5b815167ffffffffffffffff808211156200320e578283fd5b818401915084601f83011262003222578283fd5b8151818111156200322f57fe5b62003244601f8201601f191660200162003a6f565b91508082528560208285010111156200325b578384fd5b62002d1881602084016020860162003a94565b60006020828403121562003280578081fd5b5035919050565b60006020828403121562003299578081fd5b5051919050565b60008060408385031215620032b3578182fd5b82359150602083013562002fea8162003ac7565b600080600060608486031215620032dc578081fd5b83359250602084013591506040840135620032f78162003ac7565b809150509250925092565b60006020828403121562003314578081fd5b813562001fec8162003aff565b600080600080600060a0868803121562003339578283fd5b8551620033468162003aff565b8095505060208601519350604086015192506060860151915060808601516200336f8162003aff565b809150509295509295909350565b6000602082840312156200338f578081fd5b815162001fec8162003aef565b6001600160a01b03169052565b6000815180845260208085019450808401835b83811015620033e35781516001600160a01b031687529582019590820190600101620033bc565b509495945050505050565b6000815180845260208085019450808401835b83811015620033e35781518752958201959082019060010162003401565b15159052565b600081518084526200343f81602086016020860162003a94565b601f01601f19169290920160200192915050565b6000815160a084526200346a60a085018262003425565b9050602060018060a01b038185015116818601526040840151604086015260ff6060850151166060860152608084015160808601845b6001811015620034bf57825182529183019190830190600101620034a0565b50929695505050505050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6000602080830181845280855180835260408601915060408482028701019250838701855b828110156200357357603f198886030184526200356085835162003453565b9450928501929085019060010162003541565b5092979650505050505050565b600060408252620035956040830185620033ee565b8281036020840152620035a98185620033ee565b95945050505050565b901515815260200190565b60006020825282602083015282846040840137818301604090810191909152601f909201601f19160101919050565b60006020825262001fec602083018462003425565b60006080825262003616608083018762003425565b6001600160a01b0395909516602083015250604081019290925260ff16606090910152919050565b60006060825262003653606083018662003425565b828103602084015262003667818662003425565b91505060018060a01b0383166040830152949350505050565b6020808252601f908201527f4d757374207761697420666f72206d61726b6574207265736f6c7574696f6e00604082015260600190565b6020808252602a908201527f4d7573742075736520666972737420726f756e64206166746572207265736f6c6040820152697574696f6e2074696d6560b01b606082015260800190565b60208082526021908201527f4f6e6c79206c696e6b206e6f64652063616e20637265617465206d61726b65746040820152607360f81b606082015260800190565b60208082526026908201527f4d7573742073706563696679206f6e6520726f756e64496420666f7220656163604082015265341031b7b4b760d11b606082015260800190565b6020808252601b908201527f50726963652066726f6d2066656564206973206e656761746976650000000000604082015260600190565b6020808252601d908201527f5072696365206861736e2774206265656e207570646174656420796574000000604082015260600190565b6020808252601190820152701b585c9ad95d081d5b9c995cdbdb1d9959607a1b604082015260600190565b60006020825262001fec602083018462003453565b81516080820190600181106200384857fe5b8083525060208301516020830152604083015160408301526060830151606083015292915050565b600060208252620038866020830184516200339c565b6020830151610140806040850152620038a4610160850183620033a9565b91506040850151620038ba60608601826200339c565b5060608501516080850152608085015160a085015260a085015160c085015260c085015160e085015260e0850151610100818187015280870151915050610120601f198685030181870152620039118483620033ee565b93508087015191505062003928828601826200341f565b5090949350505050565b90815260200190565b600085825260018060a01b0385166020830152836040830152608060608301526200396a608083018462003425565b9695505050505050565b600088825260018060a01b038816602083015286604083015260e06060830152620039a360e083018762003425565b60808301959095525060a081019290925260c090910152949350505050565b600060608201858352602060608185015281865180845260808601915060808382028701019350828801855b8281101562003a2057607f1988870301845262003a0d86835162003425565b95509284019290840190600101620039ee565b505050505082810360408401526200396a8185620033ee565b92835260208301919091526001600160a01b0316604082015260600190565b69ffffffffffffffffffff91909116815260200190565b60405181810167ffffffffffffffff8111828210171562003a8c57fe5b604052919050565b60005b8381101562003ab157818101518382015260200162003a97565b8381111562003ac1576000848401525b50505050565b6001600160a01b038116811462003add57600080fd5b50565b801515811462003add57600080fd5b60ff8116811462003add57600080fd5b69ffffffffffffffffffff8116811462003add57600080fdfe60806040523480156200001157600080fd5b50604051620011f3380380620011f3833981810160405260608110156200003757600080fd5b81019080805160405193929190846401000000008211156200005857600080fd5b9083019060208201858111156200006e57600080fd5b82516401000000008111828201881017156200008957600080fd5b82525081516020918201929091019080838360005b83811015620000b85781810151838201526020016200009e565b50505050905090810190601f168015620000e65780820380516001836020036101000a031916815260200191505b50604052602001805160405193929190846401000000008211156200010a57600080fd5b9083019060208201858111156200012057600080fd5b82516401000000008111828201881017156200013b57600080fd5b82525081516020918201929091019080838360005b838110156200016a57818101518382015260200162000150565b50505050905090810190601f168015620001985780820380516001836020036101000a031916815260200191505b5060405260209081015185519093508592508491620001bd9160039185019062000219565b508051620001d390600490602084019062000219565b5050600580546001600160a01b039390931661010090810233909102610100600160a81b031960ff199095166012178516179093169290921790915550620002c5915050565b828054600181600116156101000203166002900490600052602060002090601f0160209004810192826200025157600085556200029c565b82601f106200026c57805160ff19168380011785556200029c565b828001600101855582156200029c579182015b828111156200029c5782518255916020019190600101906200027f565b50620002aa929150620002ae565b5090565b5b80821115620002aa5760008155600101620002af565b610f1e80620002d56000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c806370a08231116100a2578063a457c2d711610071578063a457c2d714610343578063a9059cbb1461036f578063c024cd261461039b578063dd62ed3e146103c7578063f2fde38b146103f55761010b565b806370a08231146102cb57806371297784146102f1578063893d20e81461031757806395d89b411461033b5761010b565b806323b872dd116100de57806323b872dd1461021f578063313ce56714610255578063395093511461027357806342986e131461029f5761010b565b806306fdde0314610110578063095ea7b31461018d5780630fb66557146101cd57806318160ddd14610205575b600080fd5b61011861041b565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561015257818101518382015260200161013a565b50505050905090810190601f16801561017f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101b9600480360360408110156101a357600080fd5b506001600160a01b0381351690602001356104b1565b604080519115158252519081900360200190f35b610203600480360360608110156101e357600080fd5b506001600160a01b038135811691602081013590911690604001356104ce565b005b61020d6104fa565b60408051918252519081900360200190f35b6101b96004803603606081101561023557600080fd5b506001600160a01b03813581169160208101359091169060400135610500565b61025d610587565b6040805160ff9092168252519081900360200190f35b6101b96004803603604081101561028957600080fd5b506001600160a01b038135169060200135610590565b610203600480360360408110156102b557600080fd5b506001600160a01b0381351690602001356105de565b61020d600480360360208110156102e157600080fd5b50356001600160a01b0316610608565b61020d6004803603602081101561030757600080fd5b50356001600160a01b0316610623565b61031f61065f565b604080516001600160a01b039092168252519081900360200190f35b610118610673565b6101b96004803603604081101561035957600080fd5b506001600160a01b0381351690602001356106d4565b6101b96004803603604081101561038557600080fd5b506001600160a01b03813516906020013561073c565b610203600480360360408110156103b157600080fd5b506001600160a01b038135169060200135610750565b61020d600480360360408110156103dd57600080fd5b506001600160a01b0381358116916020013516610776565b6101b96004803603602081101561040b57600080fd5b50356001600160a01b03166107a1565b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156104a75780601f1061047c576101008083540402835291602001916104a7565b820191906000526020600020905b81548152906001019060200180831161048a57829003601f168201915b5050505050905090565b60006104c56104be610818565b848461081c565b50600192915050565b60055461010090046001600160a01b031633146104ea57600080fd5b6104f5838383610908565b505050565b60025490565b600061050d848484610908565b61057d84610519610818565b61057885604051806060016040528060288152602001610e32602891396001600160a01b038a16600090815260016020526040812090610557610818565b6001600160a01b031681526020810191909152604001600020549190610a63565b61081c565b5060019392505050565b60055460ff1690565b60006104c561059d610818565b8461057885600160006105ae610818565b6001600160a01b03908116825260208083019390935260409182016000908120918c168152925290205490610afa565b60055461010090046001600160a01b031633146105fa57600080fd5b6106048282610b5b565b5050565b6001600160a01b031660009081526020819052604090205490565b60055460009061010090046001600160a01b0316331461064257600080fd5b600061064d83610608565b90506106598382610b5b565b92915050565b60055461010090046001600160a01b031690565b60048054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156104a75780601f1061047c576101008083540402835291602001916104a7565b60006104c56106e1610818565b8461057885604051806060016040528060258152602001610ec4602591396001600061070b610818565b6001600160a01b03908116825260208083019390935260409182016000908120918d16815292529020549190610a63565b60006104c5610749610818565b8484610908565b60055461010090046001600160a01b0316331461076c57600080fd5b6106048282610c57565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b60055460009061010090046001600160a01b031633146107c057600080fd5b6001600160a01b0382166107d357600080fd5b6005546107ee9061010090046001600160a01b031683610604565b50600580546001600160a01b03831661010002610100600160a81b03199091161790556001919050565b3390565b6001600160a01b0383166108615760405162461bcd60e51b8152600401808060200182810382526024815260200180610ea06024913960400191505060405180910390fd5b6001600160a01b0382166108a65760405162461bcd60e51b8152600401808060200182810382526022815260200180610dea6022913960400191505060405180910390fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b03831661094d5760405162461bcd60e51b8152600401808060200182810382526025815260200180610e7b6025913960400191505060405180910390fd5b6001600160a01b0382166109925760405162461bcd60e51b8152600401808060200182810382526023815260200180610da56023913960400191505060405180910390fd5b61099d8383836104f5565b6109da81604051806060016040528060268152602001610e0c602691396001600160a01b0386166000908152602081905260409020549190610a63565b6001600160a01b038085166000908152602081905260408082209390935590841681522054610a099082610afa565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b60008184841115610af25760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610ab7578181015183820152602001610a9f565b50505050905090810190601f168015610ae45780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b600082820183811015610b54576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b6001600160a01b038216610ba05760405162461bcd60e51b8152600401808060200182810382526021815260200180610e5a6021913960400191505060405180910390fd5b610bac826000836104f5565b610be981604051806060016040528060228152602001610dc8602291396001600160a01b0385166000908152602081905260409020549190610a63565b6001600160a01b038316600090815260208190526040902055600254610c0f9082610d47565b6002556040805182815290516000916001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b6001600160a01b038216610cb2576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b610cbe600083836104f5565b600254610ccb9082610afa565b6002556001600160a01b038216600090815260208190526040902054610cf19082610afa565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b600082821115610d9e576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b5090039056fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a206275726e20616d6f756e7420657863656564732062616c616e636545524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a206275726e2066726f6d20746865207a65726f206164647265737345524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa2646970667358221220c881513fca5a75d47e02fc1c04920461b43ce001b23b37bd2a0244cb5b4737ce64736f6c63430007060033a26469706673582212203132ac07b032237ec915484af7cefcac2cf12ad4f8af792da25aed0a05cd5a6764736f6c63430007060033",
>>>>>>> robert/nfl-ncaa
  "devdoc": {
    "kind": "dev",
    "methods": {
      "transferOwnership(address)": {
        "details": "Allows the current owner to transfer control of the contract to a newOwner.",
        "params": {
          "_newOwner": "The address to transfer ownership to."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
<<<<<<< HEAD
        "astId": 5572,
=======
        "astId": 6462,
>>>>>>> robert/nfl-ncaa
        "contract": "contracts/turbo/CryptoMarketFactory.sol:CryptoMarketFactory",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
<<<<<<< HEAD
        "astId": 11701,
=======
        "astId": 11743,
>>>>>>> robert/nfl-ncaa
        "contract": "contracts/turbo/CryptoMarketFactory.sol:CryptoMarketFactory",
        "label": "collateral",
        "offset": 0,
        "slot": "1",
<<<<<<< HEAD
        "type": "t_contract(IERC20Full)5549"
      },
      {
        "astId": 11703,
=======
        "type": "t_contract(IERC20Full)6294"
      },
      {
        "astId": 11745,
>>>>>>> robert/nfl-ncaa
        "contract": "contracts/turbo/CryptoMarketFactory.sol:CryptoMarketFactory",
        "label": "feePot",
        "offset": 0,
        "slot": "2",
<<<<<<< HEAD
        "type": "t_contract(FeePot)13772"
      },
      {
        "astId": 11705,
=======
        "type": "t_contract(FeePot)14594"
      },
      {
        "astId": 11747,
>>>>>>> robert/nfl-ncaa
        "contract": "contracts/turbo/CryptoMarketFactory.sol:CryptoMarketFactory",
        "label": "stakerFee",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
<<<<<<< HEAD
        "astId": 11707,
=======
        "astId": 11749,
>>>>>>> robert/nfl-ncaa
        "contract": "contracts/turbo/CryptoMarketFactory.sol:CryptoMarketFactory",
        "label": "settlementFee",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
<<<<<<< HEAD
        "astId": 11709,
=======
        "astId": 11751,
>>>>>>> robert/nfl-ncaa
        "contract": "contracts/turbo/CryptoMarketFactory.sol:CryptoMarketFactory",
        "label": "protocolFee",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
<<<<<<< HEAD
        "astId": 11711,
=======
        "astId": 11753,
>>>>>>> robert/nfl-ncaa
        "contract": "contracts/turbo/CryptoMarketFactory.sol:CryptoMarketFactory",
        "label": "protocol",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
<<<<<<< HEAD
        "astId": 11714,
=======
        "astId": 11756,
>>>>>>> robert/nfl-ncaa
        "contract": "contracts/turbo/CryptoMarketFactory.sol:CryptoMarketFactory",
        "label": "accumulatedProtocolFee",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
<<<<<<< HEAD
        "astId": 11718,
=======
        "astId": 11760,
>>>>>>> robert/nfl-ncaa
        "contract": "contracts/turbo/CryptoMarketFactory.sol:CryptoMarketFactory",
        "label": "accumulatedSettlementFees",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
<<<<<<< HEAD
        "astId": 11720,
=======
        "astId": 11762,
>>>>>>> robert/nfl-ncaa
        "contract": "contracts/turbo/CryptoMarketFactory.sol:CryptoMarketFactory",
        "label": "shareFactor",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
<<<<<<< HEAD
        "astId": 11746,
=======
        "astId": 11788,
>>>>>>> robert/nfl-ncaa
        "contract": "contracts/turbo/CryptoMarketFactory.sol:CryptoMarketFactory",
        "label": "markets",
        "offset": 0,
        "slot": "10",
<<<<<<< HEAD
        "type": "t_array(t_struct(Market)11743_storage)dyn_storage"
      },
      {
        "astId": 7931,
=======
        "type": "t_array(t_struct(Market)11785_storage)dyn_storage"
      },
      {
        "astId": 7973,
>>>>>>> robert/nfl-ncaa
        "contract": "contracts/turbo/CryptoMarketFactory.sol:CryptoMarketFactory",
        "label": "version",
        "offset": 0,
        "slot": "11",
        "type": "t_string_storage"
      },
      {
<<<<<<< HEAD
        "astId": 12644,
=======
        "astId": 12687,
>>>>>>> robert/nfl-ncaa
        "contract": "contracts/turbo/CryptoMarketFactory.sol:CryptoMarketFactory",
        "label": "coins",
        "offset": 0,
        "slot": "12",
<<<<<<< HEAD
        "type": "t_array(t_struct(Coin)12641_storage)dyn_storage"
      },
      {
        "astId": 12662,
=======
        "type": "t_array(t_struct(Coin)12684_storage)dyn_storage"
      },
      {
        "astId": 12705,
>>>>>>> robert/nfl-ncaa
        "contract": "contracts/turbo/CryptoMarketFactory.sol:CryptoMarketFactory",
        "label": "marketDetails",
        "offset": 0,
        "slot": "13",
<<<<<<< HEAD
        "type": "t_mapping(t_uint256,t_struct(MarketDetails)12658_storage)"
      },
      {
        "astId": 12664,
=======
        "type": "t_mapping(t_uint256,t_struct(MarketDetails)12701_storage)"
      },
      {
        "astId": 12707,
>>>>>>> robert/nfl-ncaa
        "contract": "contracts/turbo/CryptoMarketFactory.sol:CryptoMarketFactory",
        "label": "linkNode",
        "offset": 0,
        "slot": "14",
        "type": "t_address"
      },
      {
<<<<<<< HEAD
        "astId": 12666,
=======
        "astId": 12709,
>>>>>>> robert/nfl-ncaa
        "contract": "contracts/turbo/CryptoMarketFactory.sol:CryptoMarketFactory",
        "label": "nextResolutionTime",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
<<<<<<< HEAD
      "t_array(t_contract(OwnedERC20)17227)dyn_storage": {
        "base": "t_contract(OwnedERC20)17227",
=======
      "t_array(t_contract(OwnedERC20)20434)dyn_storage": {
        "base": "t_contract(OwnedERC20)20434",
>>>>>>> robert/nfl-ncaa
        "encoding": "dynamic_array",
        "label": "contract OwnedERC20[]",
        "numberOfBytes": "32"
      },
<<<<<<< HEAD
      "t_array(t_struct(Coin)12641_storage)dyn_storage": {
        "base": "t_struct(Coin)12641_storage",
=======
      "t_array(t_struct(Coin)12684_storage)dyn_storage": {
        "base": "t_struct(Coin)12684_storage",
>>>>>>> robert/nfl-ncaa
        "encoding": "dynamic_array",
        "label": "struct CryptoMarketFactory.Coin[]",
        "numberOfBytes": "32"
      },
<<<<<<< HEAD
      "t_array(t_struct(Market)11743_storage)dyn_storage": {
        "base": "t_struct(Market)11743_storage",
=======
      "t_array(t_struct(Market)11785_storage)dyn_storage": {
        "base": "t_struct(Market)11785_storage",
>>>>>>> robert/nfl-ncaa
        "encoding": "dynamic_array",
        "label": "struct AbstractMarketFactoryV3.Market[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)1_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[1]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
<<<<<<< HEAD
      "t_contract(FeePot)13772": {
=======
      "t_contract(FeePot)14594": {
>>>>>>> robert/nfl-ncaa
        "encoding": "inplace",
        "label": "contract FeePot",
        "numberOfBytes": "20"
      },
<<<<<<< HEAD
      "t_contract(IERC20Full)5549": {
=======
      "t_contract(IERC20Full)6294": {
>>>>>>> robert/nfl-ncaa
        "encoding": "inplace",
        "label": "contract IERC20Full",
        "numberOfBytes": "20"
      },
<<<<<<< HEAD
      "t_contract(OwnedERC20)17227": {
=======
      "t_contract(OwnedERC20)20434": {
>>>>>>> robert/nfl-ncaa
        "encoding": "inplace",
        "label": "contract OwnedERC20",
        "numberOfBytes": "20"
      },
<<<<<<< HEAD
      "t_enum(MarketType)12646": {
=======
      "t_enum(MarketType)12689": {
>>>>>>> robert/nfl-ncaa
        "encoding": "inplace",
        "label": "enum CryptoMarketFactory.MarketType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
<<<<<<< HEAD
      "t_mapping(t_uint256,t_struct(MarketDetails)12658_storage)": {
=======
      "t_mapping(t_uint256,t_struct(MarketDetails)12701_storage)": {
>>>>>>> robert/nfl-ncaa
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct CryptoMarketFactory.MarketDetails)",
        "numberOfBytes": "32",
<<<<<<< HEAD
        "value": "t_struct(MarketDetails)12658_storage"
=======
        "value": "t_struct(MarketDetails)12701_storage"
>>>>>>> robert/nfl-ncaa
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
<<<<<<< HEAD
      "t_struct(Coin)12641_storage": {
=======
      "t_struct(Coin)12684_storage": {
>>>>>>> robert/nfl-ncaa
        "encoding": "inplace",
        "label": "struct CryptoMarketFactory.Coin",
        "members": [
          {
<<<<<<< HEAD
            "astId": 12630,
=======
            "astId": 12673,
>>>>>>> robert/nfl-ncaa
            "contract": "contracts/turbo/CryptoMarketFactory.sol:CryptoMarketFactory",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
<<<<<<< HEAD
            "astId": 12632,
=======
            "astId": 12675,
>>>>>>> robert/nfl-ncaa
            "contract": "contracts/turbo/CryptoMarketFactory.sol:CryptoMarketFactory",
            "label": "priceFeed",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(AggregatorV3Interface)45"
          },
          {
<<<<<<< HEAD
            "astId": 12634,
=======
            "astId": 12677,
>>>>>>> robert/nfl-ncaa
            "contract": "contracts/turbo/CryptoMarketFactory.sol:CryptoMarketFactory",
            "label": "price",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
<<<<<<< HEAD
            "astId": 12636,
=======
            "astId": 12679,
>>>>>>> robert/nfl-ncaa
            "contract": "contracts/turbo/CryptoMarketFactory.sol:CryptoMarketFactory",
            "label": "imprecision",
            "offset": 0,
            "slot": "3",
            "type": "t_uint8"
          },
          {
<<<<<<< HEAD
            "astId": 12640,
=======
            "astId": 12683,
>>>>>>> robert/nfl-ncaa
            "contract": "contracts/turbo/CryptoMarketFactory.sol:CryptoMarketFactory",
            "label": "currentMarkets",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_uint256)1_storage"
          }
        ],
        "numberOfBytes": "160"
      },
<<<<<<< HEAD
      "t_struct(Market)11743_storage": {
=======
      "t_struct(Market)11785_storage": {
>>>>>>> robert/nfl-ncaa
        "encoding": "inplace",
        "label": "struct AbstractMarketFactoryV3.Market",
        "members": [
          {
<<<<<<< HEAD
            "astId": 11722,
=======
            "astId": 11764,
>>>>>>> robert/nfl-ncaa
            "contract": "contracts/turbo/CryptoMarketFactory.sol:CryptoMarketFactory",
            "label": "settlementAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
<<<<<<< HEAD
            "astId": 11725,
=======
            "astId": 11767,
>>>>>>> robert/nfl-ncaa
            "contract": "contracts/turbo/CryptoMarketFactory.sol:CryptoMarketFactory",
            "label": "shareTokens",
            "offset": 0,
            "slot": "1",
<<<<<<< HEAD
            "type": "t_array(t_contract(OwnedERC20)17227)dyn_storage"
          },
          {
            "astId": 11727,
=======
            "type": "t_array(t_contract(OwnedERC20)20434)dyn_storage"
          },
          {
            "astId": 11769,
>>>>>>> robert/nfl-ncaa
            "contract": "contracts/turbo/CryptoMarketFactory.sol:CryptoMarketFactory",
            "label": "winner",
            "offset": 0,
            "slot": "2",
<<<<<<< HEAD
            "type": "t_contract(OwnedERC20)17227"
          },
          {
            "astId": 11729,
=======
            "type": "t_contract(OwnedERC20)20434"
          },
          {
            "astId": 11771,
>>>>>>> robert/nfl-ncaa
            "contract": "contracts/turbo/CryptoMarketFactory.sol:CryptoMarketFactory",
            "label": "winnerIndex",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
<<<<<<< HEAD
            "astId": 11731,
=======
            "astId": 11773,
>>>>>>> robert/nfl-ncaa
            "contract": "contracts/turbo/CryptoMarketFactory.sol:CryptoMarketFactory",
            "label": "settlementFee",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
<<<<<<< HEAD
            "astId": 11733,
=======
            "astId": 11775,
>>>>>>> robert/nfl-ncaa
            "contract": "contracts/turbo/CryptoMarketFactory.sol:CryptoMarketFactory",
            "label": "protocolFee",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
<<<<<<< HEAD
            "astId": 11735,
=======
            "astId": 11777,
>>>>>>> robert/nfl-ncaa
            "contract": "contracts/turbo/CryptoMarketFactory.sol:CryptoMarketFactory",
            "label": "stakerFee",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
<<<<<<< HEAD
            "astId": 11737,
=======
            "astId": 11779,
>>>>>>> robert/nfl-ncaa
            "contract": "contracts/turbo/CryptoMarketFactory.sol:CryptoMarketFactory",
            "label": "creationTimestamp",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
<<<<<<< HEAD
            "astId": 11740,
=======
            "astId": 11782,
>>>>>>> robert/nfl-ncaa
            "contract": "contracts/turbo/CryptoMarketFactory.sol:CryptoMarketFactory",
            "label": "initialOdds",
            "offset": 0,
            "slot": "8",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
<<<<<<< HEAD
            "astId": 11742,
=======
            "astId": 11784,
>>>>>>> robert/nfl-ncaa
            "contract": "contracts/turbo/CryptoMarketFactory.sol:CryptoMarketFactory",
            "label": "active",
            "offset": 0,
            "slot": "9",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "320"
      },
<<<<<<< HEAD
      "t_struct(MarketDetails)12658_storage": {
=======
      "t_struct(MarketDetails)12701_storage": {
>>>>>>> robert/nfl-ncaa
        "encoding": "inplace",
        "label": "struct CryptoMarketFactory.MarketDetails",
        "members": [
          {
<<<<<<< HEAD
            "astId": 12651,
=======
            "astId": 12694,
>>>>>>> robert/nfl-ncaa
            "contract": "contracts/turbo/CryptoMarketFactory.sol:CryptoMarketFactory",
            "label": "marketType",
            "offset": 0,
            "slot": "0",
<<<<<<< HEAD
            "type": "t_enum(MarketType)12646"
          },
          {
            "astId": 12653,
=======
            "type": "t_enum(MarketType)12689"
          },
          {
            "astId": 12696,
>>>>>>> robert/nfl-ncaa
            "contract": "contracts/turbo/CryptoMarketFactory.sol:CryptoMarketFactory",
            "label": "coinIndex",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
<<<<<<< HEAD
            "astId": 12655,
=======
            "astId": 12698,
>>>>>>> robert/nfl-ncaa
            "contract": "contracts/turbo/CryptoMarketFactory.sol:CryptoMarketFactory",
            "label": "creationPrice",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
<<<<<<< HEAD
            "astId": 12657,
=======
            "astId": 12700,
>>>>>>> robert/nfl-ncaa
            "contract": "contracts/turbo/CryptoMarketFactory.sol:CryptoMarketFactory",
            "label": "resolutionPrice",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}