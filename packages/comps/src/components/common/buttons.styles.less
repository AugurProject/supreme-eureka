@import (reference) "../../assets/styles/shared.less";

.Button {
  .text-16-bold;
  .SimpleBorder;

  color: var(--simple-primary-text);
  padding: 0 @size-16;
  background-color: var(--light-background-color);
  display: flex;
  justify-content: center;
  align-items: center;
  text-transform: capitalize;
  cursor: pointer;
  min-height: @size-48;
  height: @size-48;
  max-height: @size-48;
  outline: none;

  &:focus {
    outline: none;
  }

  &.subText {
    flex-direction: column;
  }

  > div > img {
    max-height: @size-16;
  }

  > span {
    .text-12-semi-bold;
  }

  &.TextAndIcon {
    > svg,
    > div {
      margin-left: @size-8;
    }

    > div {
      display: flex;
    }
  }

  .Focused;

  &:disabled,
  &.Disabled {
    pointer-events: none;
    opacity: 0.5;
  }
}

.Focused {
  &:not(:disabled):not(.Disabled) {
    &:focus {
      outline: 0;
    }

    &:focus-visible {
      outline: 0;
      border: @size-1 solid var(--simple-focus-color);
      box-shadow: inset 0 0 0 @size-2 var(--simple-focus-color);
    }
  }
}

.TinyButton {
  .Button;
  .text-12-semi-bold;

  background-color: transparent;
  color: var(--simple-secondary-text);
  min-height: @size-25;
  height: @size-25;
  max-height: @size-25;
  padding: 0 @size-8;
  flex-direction: row-reverse;
  grid-gap: 0;
  white-space: nowrap;

  > svg {
    max-width: @size-16;
    max-height: @size-16;
  }

  &.TextAndIcon > svg {
    margin-left: 0;
    margin-right: @size-4;
  }

  &:not(:disabled):not(.Disabled) {
    &:hover {
      border: @size-1 solid var(--simple-secondary-text);
    }

    &:active,
    &.Selected {
      background-color: var(--simple-alternate-background);
      border: @size-1 solid var(--simple-secondary-text);
      color: var(--simple-primary-text);
    }
  }
}

.TinyTransparentButton {
  .TinyButton;

  background-color: transparent;
  border: @size-1 solid var(--simple-border);

  &:not(:disabled):not(.Disabled) {
    &:hover {
      background-color: var(--simple-alternate-background);
    }

    &:focus {
      background-color: transparent;
    }

    &:active,
    &.Selected {
      background-color: var(--simple-alternate-background);
      border: @size-1 solid var(--simple-secondary-text);
    }
  }
}

.DirectionButton {
  align-items: center;
  border: 0;
  display: flex;
  justify-content: center;
  cursor: pointer;

  &.Left {
    > svg {
      transform: rotate(180deg);
    }
  }

  &:focus {
    outline: 0;
  }

  &:disabled {
    > svg > path {
      stroke: var(--simple-secondary-text);
      fill: var(--simple-secondary-text);
    }
  }
}

.BuySellButton {
  .Button;
  .text-20-bold;

  background: var(--simple-primary-text);
  color: var(--simple-light-bg);
  min-height: @size-68;
  height: @size-68;
  max-height: @size-68;
  flex-flow: column nowrap;
  padding: 0 @size-16;

  > span {
    text-transform: none;
  }

  &:hover {
    background-color: rgba(var(--simple-primary-text-rgb), 0.85);
  }

  &.Disabled {
    pointer-events: none;
    background: var(--light-background-color);
    border: @size-1 solid var(--simple-border);
    color: var(--simple-secondary-text);
    // purposeful override for specifically just this button for readability.
    opacity: 1;
  }

  &.Error {
    pointer-events: none;
    color: var(--simple-failed);
    background: rgba(var(--simple-failed-rgb), 0.15);
    opacity: 1;
    border: 0;
  }
}

.ApproveButton {
  .Button;
  .text-20-bold;

  color: var(--color-brand-secondary);
  background-color: var(--simple-primary-text);
  border: @size-1 solid var(--simple-border);
  min-height: @size-68;
  height: @size-68;
  max-height: @size-68;

  &:not(:disabled):not(.Disabled):focus {
    .Focused;

    background-color: var(--simple-primary-text);
  }

  &:not(:disabled):not(.Disabled):active {
    background-color: var(--simple-alternate-background);
  }
}

.Approval button {
  margin-top: @size-16;
  width: 100%;
}

.WalletButton {
  .Button;

  width: 100%;
  min-height: @size-56;
  height: @size-56;
  max-height: @size-56;
  padding: 0 @size-24;
  border-radius: @size-16;
  background-color: var(--color-brand-secondary);
  justify-content: space-between;

  > img {
    max-height: @size-24;
  }

  &:not(:disabled):not(.Disabled) {
    &:hover {
      border: @size-1 solid var(--simple-secondary-text);
    }

    &:active,
    &.Selected {
      padding: 0 @size-24 0 @size-28;
      border: @size-1 solid var(--color-brand);
      position: relative;

      &:before {
        content: "";
        position: absolute;
        left: @size-12;
        width: @size-8;
        height: @size-8;
        border-radius: 50%;
        background-color: var(--color-brand);
      }
    }
  }
}

.TextButton {
  .Button;
  .text-16-semi-bold;

  min-height: unset;
  height: unset;
  max-height: unset;
  border: none;
  text-transform: unset;
  text-decoration: underline;
  color: var(--simple-secondary-text);
  padding: 0;
  background-color: transparent;
  display: inline;
}

.SearchButton {
  .SimpleBorder;

  padding: @size-12 @size-16;

  &.Selected {
    background: var(--simple-alternate-background);
  }
}

.ExternalLinkButton {
  .text-10-semi-bold;

  color: var(--simple-primary-text);
  border: 0;
  background: transparent;
  text-transform: uppercase;
  display: inline-flex;

  > svg {
    margin-left: @size-4;
    height: @size-10;
    width: @size-10;
    margin-top: auto;
    margin-bottom: auto;

    > path {
      &:nth-child(odd) {
        fill: var(--simple-primary-text);
        stroke: none;
      }

      &:nth-child(even) {
        stroke: var(--simple-primary-text);
      }
    }
  }

  &:hover {
    color: var(--simple-secondary-text);

    > a {
      color: var(--simple-secondary-text);
    }

    > svg {
      > path {
        &:nth-child(odd) {
          fill: var(--simple-secondary-text);
        }

        &:nth-child(even) {
          stroke: var(--simple-secondary-text);
        }
      }
    }
  }
}

.ThemeButtonRadius {
  border-radius: var(--theme-button-border-radius);
}

.BaseNormalButton {
  .text-default;

  border-radius: var(--theme-button-border-radius);
  min-height: var(--normal-button-height);
  height: var(--normal-button-height);
  max-height: var(--normal-button-height);
  padding: var(--normal-button-padding);
  text-transform: capitalize;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  font-size: var(--normal-button-font-size);
  font-weight: var(--normal-button-font-weight);
  flex-flow: var(--normal-button-flex-flow);

  > span {
    white-space: nowrap;
  }

  > svg {
    height: var(--normal-button-svg-height);
    width: var(--normal-button-svg-width);
    margin: var(--normal-button-icon-margin);
  }

  > div {
    // sometimes a div is used to house a svg
    margin: var(--normal-button-icon-margin);
  }

  &:not(:disabled):not(:active):focus-within {
    outline: none;
    box-shadow: var(--theme-focus-box-shadow);
  }

  &:disabled {
    opacity: var(--button-disabled-opacity);
    cursor: not-allowed;
  }

  &.Reversed {
    flex-flow: var(--normal-button-flex-flow-reverse);

    > svg {
      margin: var(--normal-button-icon-margin-reverse);
    }

    > div {
      // sometimes a div is used to house a svg
      margin: var(--normal-button-icon-margin-reverse);
    }
  }

  &.Small {
    min-height: var(--small-button-height);
    height: var(--small-button-height);
    max-height: var(--small-button-height);
    padding: var(--small-button-padding);
    font-size: var(--small-button-font-size);
    font-weight: var(--small-button-font-weight);

    > svg {
      height: var(--small-button-svg-height);
      width: var(--small-button-svg-width);
    }

    // &:not(:disabled):not(:active):focus-within {
      // padding: var(--small-button-padding-focus);
    // }
  }

  &.Tiny {
    min-height: var(--tiny-button-height);
    height: var(--tiny-button-height);
    max-height: var(--tiny-button-height);
    padding: var(--tiny-button-padding);
    font-size: var(--tiny-button-font-size);
    font-weight: var(--tiny-button-font-weight);

    > svg {
      height: var(--tiny-button-svg-height);
      width: var(--tiny-button-svg-width);
    }

    // &:not(:disabled):not(:active):focus-within {
    //   padding: var(--tiny-button-padding-focus);
    // }
  }
}

.Primary {
  background: var(--primary-button-background);
  border: var(--primary-button-border);
  color: var(--primary-button-text-color);

  > svg {
    > path[fill],
    > g > path[fill] {
      fill: var(--primary-button-text-color);
    }

    > line,
    > path[stroke],
    > g > path[stroke] {
      stroke: var(--primary-button-text-color);
    }
  }

  &:not(:disabled) {
    // in here we will do hover/focused/pressed/etc
    &:hover {
      background: var(--primary-button-background-hover);
      border: var(--primary-button-border-hover);
      color: var(--primary-button-text-color-hover);

      > svg {
        > path[fill],
        > g > path[fill] {
          fill: var(--primary-button-text-color-hover);
        }

        > line,
        > path[stroke],
        > g > path[stroke] {
          stroke: var(--primary-button-text-color-hover);
        }
      }
    }

    &:focus-within {
      background: var(--primary-button-background-focus);
      border: var(--primary-button-border-focus);
      color: var(--primary-button-text-color-focus);

      > svg {
        > path[fill],
        > g > path[fill] {
          fill: var(--primary-button-text-color-focus);
        }

        > line,
        > path[stroke],
        > g > path[stroke] {
          stroke: var(--primary-button-text-color-focus);
        }
      }
    }

    &:active {
      background: var(--primary-button-background-pressed);
      border: var(--primary-button-border-pressed);
      color: var(--primary-button-text-color-pressed);

      > svg {
        > path[fill],
        > g > path[fill] {
          fill: var(--primary-button-text-color-pressed);
        }

        > line,
        > path[stroke],
        > g > path[stroke] {
          stroke: var(--primary-button-text-color-pressed);
        }
      }
    }
  }

  &.Inverted {
    background: var(--inverted-primary-button-background);
    border: var(--inverted-primary-button-border);
    color: var(--inverted-primary-button-text-color);

    > svg {
      > path[fill],
      > g > path[fill] {
        fill: var(--inverted-primary-button-text-color);
      }

      > line,
      > path[stroke],
      > g > path[stroke] {
        stroke: var(--inverted-primary-button-text-color);
      }
    }
    &:not(:disabled) {
      &:hover {
        background: var(--inverted-primary-button-background-hover);
        border: var(--inverted-primary-button-border-hover);
        color: var(--inverted-primary-button-text-color-hover);

        > svg {
          > path[fill],
          > g > path[fill] {
            fill: var(--inverted-primary-button-text-color-hover);
          }

          > line,
          > path[stroke],
          > g > path[stroke] {
            stroke: var(--inverted-primary-button-text-color-hover);
          }
        }
      }

      &:focus-within {
        background: var(--inverted-primary-button-background-focus);
        border: var(--inverted-primary-button-border-focus);
        color: var(--inverted-primary-button-text-color-focus);

        > svg {
          > path[fill],
          > g > path[fill] {
            fill: var(--inverted-primary-button-text-color-focus);
          }

          > line,
          > path[stroke],
          > g > path[stroke] {
            stroke: var(--inverted-primary-button-text-color-focus);
          }
        }
      }

      &:active {
        background: var(--inverted-primary-button-background-pressed);
        border: var(--inverted-primary-button-border-pressed);
        color: var(--inverted-primary-button-text-color-pressed);

        > svg {
          > path[fill],
          > g > path[fill] {
            fill: var(--inverted-primary-button-text-color-pressed);
          }

          > line,
          > path[stroke],
          > g > path[stroke] {
            stroke: var(--inverted-primary-button-text-color-pressed);
          }
        }
      }
    }
  }
}

.Secondary {
  background: var(--secondary-button-background);
  border: var(--secondary-button-border);
  color: var(--secondary-button-text-color);

  > svg {
    > path[fill],
    > g > path[fill] {
      fill: var(--secondary-button-text-color);
    }

    > line,
    > path[stroke],
    > g > path[stroke] {
      stroke: var(--secondary-button-text-color);
    }
  }

  &:not(:disabled) {
    // in here we will do hover/focused/pressed/etc
    &:hover {
      background: var(--secondary-button-background-hover);
      border: var(--secondary-button-border-hover);
      color: var(--secondary-button-text-color-hover);

      > svg {
        > path[fill],
        > g > path[fill] {
          fill: var(--secondary-button-text-color-hover);
        }

        > line,
        > path[stroke],
        > g > path[stroke] {
          stroke: var(--secondary-button-text-color-hover);
        }
      }
    }

    &:focus-within {
      background: var(--secondary-button-background-focus);
      border: var(--secondary-button-border-focus);
      color: var(--secondary-button-text-color-focus);

      > svg {
        > path[fill],
        > g > path[fill] {
          fill: var(--secondary-button-text-color-focus);
        }

        > line,
        > path[stroke],
        > g > path[stroke] {
          stroke: var(--secondary-button-text-color-focus);
        }
      }
    }

    &:active {
      background: var(--secondary-button-background-pressed);
      border: var(--secondary-button-border-pressed);
      color: var(--secondary-button-text-color-pressed);

      > svg {
        > path[fill],
        > g > path[fill] {
          fill: var(--secondary-button-text-color-pressed);
        }

        > line,
        > path[stroke],
        > g > path[stroke] {
          stroke: var(--secondary-button-text-color-pressed);
        }
      }
    }
  }

  &.Inverted {
    background: var(--inverted-secondary-button-background);
    border: var(--inverted-secondary-button-border);
    color: var(--inverted-secondary-button-text-color);

    > svg {
      > path[fill],
      > g > path[fill] {
        fill: var(--inverted-secondary-button-text-color);
      }

      > line,
      > path[stroke],
      > g > path[stroke] {
        stroke: var(--inverted-secondary-button-text-color);
      }
    }

    > div[class*="Spinner"] {
      background: white;

      &:before {
        background: linear-gradient(0deg, transparent 50%, var(transparent) 100%) 0% 0%,
          linear-gradient(90deg, rgba(var(--simple-light-bg-rgb), 0.50) 0%, rgba(var(--simple-light-bg-rgb), 0.75) 100%) 100% 0%,
          linear-gradient(180deg, rgba(var(--simple-light-bg-rgb), 0.75) 0%, var(--simple-light-bg) 100%) 100% 100%,
          linear-gradient(270deg, var(--simple-light-bg) 0%, var(--simple-light-bg) 100%) 0% 100%;
      }
      &:after {
        background: black;
      }
    }

    &:not(:disabled) {
      &:hover {
        background: var(--inverted-secondary-button-background-hover);
        border: var(--inverted-secondary-button-border-hover);
        color: var(--inverted-secondary-button-text-color-hover);

        > svg {
          > path[fill],
          > g > path[fill] {
            fill: var(--inverted-secondary-button-text-color-hover);
          }

          > line,
          > path[stroke],
          > g > path[stroke] {
            stroke: var(--inverted-secondary-button-text-color-hover);
          }
        }

        > div[class*="Spinner"] {
          background: transparent;

          &:after {
            background: var(--simple-light-bg);
          }
        }

      }

      &:focus-within {
        background: var(--inverted-secondary-button-background-focus);
        border: var(--inverted-secondary-button-border-focus);
        color: var(--inverted-secondary-button-text-color-focus);

        > svg {
          > path[fill],
          > g > path[fill] {
            fill: var(--inverted-secondary-button-text-color-focus);
          }

          > line,
          > path[stroke],
          > g > path[stroke] {
            stroke: var(--inverted-secondary-button-text-color-focus);
          }
        }
      }

      &:active {
        background: var(--inverted-secondary-button-background-pressed);
        border: var(--inverted-secondary-button-border-pressed);
        color: var(--inverted-secondary-button-text-color-pressed);

        > svg {
          > path[fill],
          > g > path[fill] {
            fill: var(--inverted-secondary-button-text-color-pressed);
          }

          > line,
          > path[stroke],
          > g > path[stroke] {
            stroke: var(--inverted-secondary-button-text-color-pressed);
          }
        }
      }
    }
  }
}

.Tiny {
  background: var(--tiny-button-background);
  border: var(--tiny-button-border);
  color: var(--tiny-button-text-color);
  text-transform: var(--tiny-button-text-transform);

  > svg {
    > path[fill],
    > g > path[fill] {
      fill: var(--tiny-button-text-color);
    }

    > line,
    > path[stroke],
    > g > path[stroke] {
      stroke: var(--tiny-button-text-color);
    }
  }

  &:not(:disabled) {
    // in here we will do hover/focused/pressed/etc
    &:hover {
      background: var(--tiny-button-background-hover);
      border: var(--tiny-button-border-hover);
      color: var(--tiny-button-text-color-hover);

      > svg {
        > path[fill],
        > g > path[fill] {
          fill: var(--tiny-button-text-color-hover);
        }

        > line,
        > path[stroke],
        > g > path[stroke] {
          stroke: var(--tiny-button-text-color-hover);
        }
      }
    }

    &:focus-within {
      background: var(--tiny-button-background-focus);
      border: var(--tiny-button-border-focus);
      color: var(--tiny-button-text-color-focus);

      > svg {
        > path[fill],
        > g > path[fill] {
          fill: var(--tiny-button-text-color-focus);
        }

        > line,
        > path[stroke],
        > g > path[stroke] {
          stroke: var(--tiny-button-text-color-focus);
        }
      }
    }

    &:active {
      background: var(--tiny-button-background-pressed);
      border: var(--tiny-button-border-pressed);
      color: var(--tiny-button-text-color-pressed);

      > svg {
        > path[fill],
        > g > path[fill] {
          fill: var(--tiny-button-text-color-pressed);
        }

        > line,
        > path[stroke],
        > g > path[stroke] {
          stroke: var(--tiny-button-text-color-pressed);
        }
      }
    }
  }
}
